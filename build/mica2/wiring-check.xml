<nesc xmlns="http://www.tinyos.net/nesC">
  <wiring>
    <wire loc="32:proj1AppC.nc">
      <from><interface-ref name="Boot" scoped="" ref="0x403b3068"/></from>
      <to><interface-ref name="Boot" scoped="" ref="0x4035a7c8"/></to>
    </wire>
    <wire loc="59:/opt/tinyos-2.1.0/tos/lib/printf/MainC.nc">
      <from><interface-ref name="Boot" scoped="" ref="0x4035a7c8"/></from>
      <to><interface-ref name="Boot" scoped="" ref="0x40436b48"/></to>
    </wire>
    <wire loc="33:proj1AppC.nc">
      <from><interface-ref name="RadioControl" scoped="" ref="0x403b04c0"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x40438d98"/></to>
    </wire>
    <wire loc="62:/opt/tinyos-2.1.0/tos/platforms/mica2/ActiveMessageC.nc">
      <from><interface-ref name="SplitControl" scoped="" ref="0x40438d98"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x40883ca8"/></to>
    </wire>
    <wire loc="34:proj1AppC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x403b59d0"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x40c4b010"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Packet" scoped="" ref="0x40c4b010"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x40885af0"/></to>
    </wire>
    <wire loc="35:proj1AppC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x403c87b0"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x40c4b6a8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="AMPacket" scoped="" ref="0x40c4b6a8"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x40884288"/></to>
    </wire>
    <wire loc="36:proj1AppC.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0x403cc7d0"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x40c33908"/></to>
    </wire>
    <wire>
      <from><interface-ref name="AMSend" scoped="" ref="0x40c33908"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x40f38a38"/></to>
    </wire>
    <wire loc="37:proj1AppC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x403c98e8"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x40c48d30"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Receive" scoped="" ref="0x40c48d30"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x40885100"/>
      <arguments>
        <value cst="I:16">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_id_t" ref="0x4039b8b0"/></typename>
          </type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="38:proj1AppC.nc">
      <from><interface-ref name="LclTime" scoped="" ref="0x403ce770"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x40c26188"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Timer" scoped="" ref="0x40c26188"/></from>
      <to><interface-ref name="TimerMilli" scoped="" ref="0x40b19010"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="39:proj1AppC.nc">
      <from><interface-ref name="PeriodTimer" scoped="" ref="0x403d7b88"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x40c22010"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Timer" scoped="" ref="0x40c22010"/></from>
      <to><interface-ref name="TimerMilli" scoped="" ref="0x40b19010"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="40:proj1AppC.nc">
      <from><interface-ref name="QTimer" scoped="" ref="0x403d5ed0"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x40c1fdc8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Timer" scoped="" ref="0x40c1fdc8"/></from>
      <to><interface-ref name="TimerMilli" scoped="" ref="0x40b19010"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="41:proj1AppC.nc">
      <from><interface-ref name="PktTimer" scoped="" ref="0x403db288"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x40c1cbe8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Timer" scoped="" ref="0x40c1cbe8"/></from>
      <to><interface-ref name="TimerMilli" scoped="" ref="0x40b19010"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="42:proj1AppC.nc">
      <from><interface-ref name="Read" scoped="" ref="0x403df8e0"/></from>
      <to><interface-ref name="Read" scoped="" ref="0x40c3ed38"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Read" scoped="" ref="0x40c3ed38"/></from>
      <to><interface-ref name="Read" scoped="" ref="0x40f072e0"/></to>
    </wire>
    <wire loc="43:proj1AppC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x403e2528"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x4084b510"/></to>
    </wire>
    <wire loc="40:/opt/tinyos-2.1.0/tos/system/LedsC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x4084b510"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x40867bd8"/></to>
    </wire>
    <wire loc="44:proj1AppC.nc">
      <from><interface-ref name="ActiveMessageAddress" scoped="" ref="0x403e9ae8"/></from>
      <to><interface-ref name="ActiveMessageAddress" scoped="" ref="0x40beca78"/></to>
    </wire>
    <wire loc="45:proj1AppC.nc">
      <from><interface-ref name="Seed" scoped="" ref="0x403eb010"/></from>
      <to><interface-ref name="SeedInit" scoped="" ref="0x40b008f8"/></to>
    </wire>
    <wire loc="46:proj1AppC.nc">
      <from><interface-ref name="Random" scoped="" ref="0x403f0548"/></from>
      <to><interface-ref name="Random" scoped="" ref="0x40b03750"/></to>
    </wire>
    <wire loc="45:/opt/tinyos-2.1.0/tos/system/RandomC.nc">
      <from><interface-ref name="Random" scoped="" ref="0x40b03750"/></from>
      <to><interface-ref name="Random" scoped="" ref="0x40aff1d0"/></to>
    </wire>
    <wire loc="42:/opt/tinyos-2.1.0/tos/system/TimerMilliP.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x40434410"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x40b17890"/></to>
    </wire>
    <wire loc="41:/opt/tinyos-2.1.0/tos/system/RandomC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x40434410"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x40b003d8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x40434410"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x40e920d8"/></to>
    </wire>
    <wire loc="78:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x40434410"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x408c1730"/></to>
    </wire>
    <wire loc="79:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x40434410"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x409a3ac0"/></to>
    </wire>
    <wire loc="63:/opt/tinyos-2.1.0/tos/chips/atm128/HplAtm128UartC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x40434410"/></from>
      <to><interface-ref name="Uart0Init" scoped="" ref="0x406fd570"/></to>
    </wire>
    <wire loc="64:/opt/tinyos-2.1.0/tos/chips/atm128/HplAtm128UartC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x40434410"/></from>
      <to><interface-ref name="Uart1Init" scoped="" ref="0x406f9010"/></to>
    </wire>
    <wire loc="61:/opt/tinyos-2.1.0/tos/chips/atm128/Atm128Uart0C.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x40434410"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x406cbe68"/></to>
    </wire>
    <wire loc="48:/opt/tinyos-2.1.0/tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x40434410"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x405d9978"/></to>
    </wire>
    <wire loc="60:/opt/tinyos-2.1.0/tos/lib/printf/PrintfC.nc">
      <from><interface-ref name="Boot" scoped="" ref="0x40436b48"/></from>
      <to><interface-ref name="Boot" scoped="" ref="0x40848040"/></to>
    </wire>
    <wire loc="53:/opt/tinyos-2.1.0/tos/lib/printf/MainC.nc">
      <from><interface-ref name="Scheduler" scoped="" ref="0x405775d8"/></from>
      <to><interface-ref name="Scheduler" scoped="" ref="0x402cf408"/></to>
    </wire>
    <wire loc="42:/opt/tinyos-2.1.0/tos/system/TinySchedulerC.nc">
      <from><interface-ref name="Scheduler" scoped="" ref="0x402cf408"/></from>
      <to><interface-ref name="Scheduler" scoped="" ref="0x4033c6e0"/></to>
    </wire>
    <wire loc="54:/opt/tinyos-2.1.0/tos/lib/printf/MainC.nc">
      <from><interface-ref name="PlatformInit" scoped="" ref="0x40577ba0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x40434e08"/></to>
    </wire>
    <wire loc="49:/opt/tinyos-2.1.0/tos/platforms/mica/PlatformC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x40434e08"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x4043d968"/></to>
    </wire>
    <wire loc="55:/opt/tinyos-2.1.0/tos/lib/printf/MainC.nc">
      <from><interface-ref name="MainBoot" scoped="" ref="0x4058c1d0"/></from>
      <to><interface-ref name="Boot" scoped="" ref="0x40577240"/></to>
    </wire>
    <wire loc="58:/opt/tinyos-2.1.0/tos/lib/printf/MainC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x40592010"/></from>
      <to><interface-ref name="SoftwareInit" scoped="" ref="0x40434410"/></to>
    </wire>
    <wire loc="62:/opt/tinyos-2.1.0/tos/chips/atm128/adc/Atm128AdcC.nc">
      <from><interface-ref name="SubInit" scoped="" ref="0x4043aea0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x40a3e388"/></to>
    </wire>
    <wire loc="26:/opt/tinyos-2.1.0/tos/platforms/mica/InitThreeP.nc">
      <from><interface-ref name="SubInit" scoped="" ref="0x4043aea0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x407b6a40"/></to>
    </wire>
    <wire loc="50:/opt/tinyos-2.1.0/tos/platforms/mica/PlatformC.nc">
      <from><interface-ref name="Atm128Calibrate" scoped="" ref="0x4043a740"/></from>
      <to><interface-ref name="Atm128Calibrate" scoped="" ref="0x40574888"/></to>
    </wire>
    <wire loc="52:/opt/tinyos-2.1.0/tos/platforms/mica/PlatformC.nc">
      <from><interface-ref name="MeasureClock" scoped="" ref="0x40444168"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x405744d8"/></to>
    </wire>
    <wire loc="45:/opt/tinyos-2.1.0/tos/platforms/mica/PlatformLedsC.nc">
      <from><interface-ref name="MoteInit" scoped="" ref="0x4043dd48"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x40889600"/></to>
    </wire>
    <wire loc="53:/opt/tinyos-2.1.0/tos/platforms/mica/PlatformC.nc">
      <from><interface-ref name="MoteInit" scoped="" ref="0x4043dd48"/></from>
      <to><interface-ref name="PlatformInit" scoped="" ref="0x4043c3c0"/></to>
    </wire>
    <wire loc="23:/opt/tinyos-2.1.0/tos/platforms/mica2/MotePlatformC.nc">
      <from><interface-ref name="PlatformInit" scoped="" ref="0x4043c3c0"/></from>
      <to><interface-ref name="PlatformInit" scoped="" ref="0x40449338"/></to>
    </wire>
    <wire loc="24:/opt/tinyos-2.1.0/tos/platforms/mica2/MotePlatformC.nc">
      <from><interface-ref name="PlatformInit" scoped="" ref="0x4043c3c0"/></from>
      <to><interface-ref name="PlatformInit" scoped="" ref="0x4044b488"/></to>
    </wire>
    <wire loc="54:/opt/tinyos-2.1.0/tos/platforms/mica/PlatformC.nc">
      <from><interface-ref name="SubInit" scoped="" ref="0x4043c790"/></from>
      <to><interface-ref name="SubInit" scoped="" ref="0x4043aea0"/></to>
    </wire>
    <wire loc="42:/opt/tinyos-2.1.0/tos/platforms/mica2/chips/cc1000/HplCC1000InitP.nc">
      <from><interface-ref name="PlatformInit" scoped="" ref="0x4044b488"/></from>
      <to><interface-ref name="PlatformInit" scoped="" ref="0x404765f8"/></to>
    </wire>
    <wire loc="43:/opt/tinyos-2.1.0/tos/platforms/mica2/chips/cc1000/HplCC1000InitP.nc">
      <from><interface-ref name="PlatformInit" scoped="" ref="0x4044b488"/></from>
      <to><interface-ref name="PlatformInit" scoped="" ref="0x4044c588"/></to>
    </wire>
    <wire loc="26:/opt/tinyos-2.1.0/tos/platforms/mica2/MotePlatformC.nc">
      <from><interface-ref name="SerialIdPin" scoped="" ref="0x404509e8"/></from>
      <to><interface-ref name="PortA4" scoped="" ref="0x404aea08"/></to>
    </wire>
    <wire loc="132:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortA4" scoped="" ref="0x404aea08"/></from>
      <to><interface-ref name="Pin4" scoped="" ref="0x404fc170"/></to>
    </wire>
    <wire loc="27:/opt/tinyos-2.1.0/tos/platforms/mica2/MotePlatformC.nc">
      <from><interface-ref name="SubInit" scoped="" ref="0x404484a8"/></from>
      <to><interface-ref name="SubInit" scoped="" ref="0x4043c790"/></to>
    </wire>
    <wire loc="45:/opt/tinyos-2.1.0/tos/platforms/mica2/chips/cc1000/HplCC1000InitP.nc">
      <from><interface-ref name="CHP_OUT" scoped="" ref="0x40481428"/></from>
      <to><interface-ref name="PortA6" scoped="" ref="0x404adea8"/></to>
    </wire>
    <wire loc="134:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortA6" scoped="" ref="0x404adea8"/></from>
      <to><interface-ref name="Pin6" scoped="" ref="0x404fb4f0"/></to>
    </wire>
    <wire loc="46:/opt/tinyos-2.1.0/tos/platforms/mica2/chips/cc1000/HplCC1000InitP.nc">
      <from><interface-ref name="PALE" scoped="" ref="0x40481e10"/></from>
      <to><interface-ref name="PortD4" scoped="" ref="0x404b9210"/></to>
    </wire>
    <wire loc="159:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortD4" scoped="" ref="0x404b9210"/></from>
      <to><interface-ref name="Pin4" scoped="" ref="0x40511d68"/></to>
    </wire>
    <wire loc="47:/opt/tinyos-2.1.0/tos/platforms/mica2/chips/cc1000/HplCC1000InitP.nc">
      <from><interface-ref name="PCLK" scoped="" ref="0x40480820"/></from>
      <to><interface-ref name="PortD6" scoped="" ref="0x404c6670"/></to>
    </wire>
    <wire loc="161:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortD6" scoped="" ref="0x404c6670"/></from>
      <to><interface-ref name="Pin6" scoped="" ref="0x4050f170"/></to>
    </wire>
    <wire loc="48:/opt/tinyos-2.1.0/tos/platforms/mica2/chips/cc1000/HplCC1000InitP.nc">
      <from><interface-ref name="PDATA" scoped="" ref="0x404872e8"/></from>
      <to><interface-ref name="PortD7" scoped="" ref="0x404c50a0"/></to>
    </wire>
    <wire loc="162:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortD7" scoped="" ref="0x404c50a0"/></from>
      <to><interface-ref name="Pin7" scoped="" ref="0x4050fac8"/></to>
    </wire>
    <wire loc="50:/opt/tinyos-2.1.0/tos/platforms/mica2/chips/cc1000/HplCC1000InitP.nc">
      <from><interface-ref name="SpiSck" scoped="" ref="0x4048f4f0"/></from>
      <to><interface-ref name="PortB1" scoped="" ref="0x404abce8"/></to>
    </wire>
    <wire loc="138:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortB1" scoped="" ref="0x404abce8"/></from>
      <to><interface-ref name="Pin1" scoped="" ref="0x40505d30"/></to>
    </wire>
    <wire loc="51:/opt/tinyos-2.1.0/tos/platforms/mica2/chips/cc1000/HplCC1000InitP.nc">
      <from><interface-ref name="SpiMiso" scoped="" ref="0x4048fef0"/></from>
      <to><interface-ref name="PortB3" scoped="" ref="0x404b7210"/></to>
    </wire>
    <wire loc="140:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortB3" scoped="" ref="0x404b7210"/></from>
      <to><interface-ref name="Pin3" scoped="" ref="0x40503030"/></to>
    </wire>
    <wire loc="52:/opt/tinyos-2.1.0/tos/platforms/mica2/chips/cc1000/HplCC1000InitP.nc">
      <from><interface-ref name="SpiMosi" scoped="" ref="0x4049c908"/></from>
      <to><interface-ref name="PortB2" scoped="" ref="0x404b8750"/></to>
    </wire>
    <wire loc="139:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortB2" scoped="" ref="0x404b8750"/></from>
      <to><interface-ref name="Pin2" scoped="" ref="0x405046b0"/></to>
    </wire>
    <wire loc="53:/opt/tinyos-2.1.0/tos/platforms/mica2/chips/cc1000/HplCC1000InitP.nc">
      <from><interface-ref name="OC1C" scoped="" ref="0x404973c0"/></from>
      <to><interface-ref name="PortB7" scoped="" ref="0x404b5c08"/></to>
    </wire>
    <wire loc="144:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortB7" scoped="" ref="0x404b5c08"/></from>
      <to><interface-ref name="Pin7" scoped="" ref="0x405006b0"/></to>
    </wire>
    <wire loc="182:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortG0" scoped="" ref="0x404c9ce8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x40548ee0"/></to>
    </wire>
    <wire loc="156:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortD1" scoped="" ref="0x404bb2f0"/></from>
      <to><interface-ref name="Pin1" scoped="" ref="0x40512090"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin1" scoped="" ref="0x40512090"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x40d166c0"/></to>
    </wire>
    <wire loc="167:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortE3" scoped="" ref="0x404c38e0"/></from>
      <to><interface-ref name="Pin3" scoped="" ref="0x4051ad68"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin3" scoped="" ref="0x4051ad68"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x40d6b7f8"/></to>
    </wire>
    <wire loc="176:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortF3" scoped="" ref="0x404cca98"/></from>
      <to><interface-ref name="Pin3" scoped="" ref="0x405216b0"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin3" scoped="" ref="0x405216b0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x40d93538"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin6" scoped="" ref="0x404fb4f0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x40c769e8"/></to>
    </wire>
    <wire loc="174:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortF1" scoped="" ref="0x404cd670"/></from>
      <to><interface-ref name="Pin1" scoped="" ref="0x40522330"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin1" scoped="" ref="0x40522330"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x40d96010"/></to>
    </wire>
    <wire loc="137:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortB0" scoped="" ref="0x404ab2f0"/></from>
      <to><interface-ref name="Pin0" scoped="" ref="0x405053d8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin0" scoped="" ref="0x405053d8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x40ca3938"/></to>
    </wire>
    <wire loc="148:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortC2" scoped="" ref="0x404b2a98"/></from>
      <to><interface-ref name="Pin2" scoped="" ref="0x4050a170"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin2" scoped="" ref="0x4050a170"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x40cf19e8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin4" scoped="" ref="0x40511d68"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x40d41538"/></to>
    </wire>
    <wire loc="170:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortE6" scoped="" ref="0x404c1750"/></from>
      <to><interface-ref name="Pin6" scoped="" ref="0x40517ac8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin6" scoped="" ref="0x40517ac8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x40d666c0"/></to>
    </wire>
    <wire loc="129:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortA1" scoped="" ref="0x404b0b18"/></from>
      <to><interface-ref name="Pin1" scoped="" ref="0x404f14f0"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin1" scoped="" ref="0x404f14f0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x40c7e718"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin3" scoped="" ref="0x40503030"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x40ccb7f8"/></to>
    </wire>
    <wire loc="151:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortC5" scoped="" ref="0x404be8e0"/></from>
      <to><interface-ref name="Pin5" scoped="" ref="0x40509e48"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin5" scoped="" ref="0x40509e48"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x40cec9e8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin7" scoped="" ref="0x4050fac8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x40d3c538"/></to>
    </wire>
    <wire loc="179:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortF6" scoped="" ref="0x404ca8e0"/></from>
      <to><interface-ref name="Pin6" scoped="" ref="0x4051f330"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin6" scoped="" ref="0x4051f330"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x40d8e538"/></to>
    </wire>
    <wire loc="185:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortG3" scoped="" ref="0x404c7dc8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x40550dd8"/></to>
    </wire>
    <wire loc="165:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortE1" scoped="" ref="0x404c44b0"/></from>
      <to><interface-ref name="Pin1" scoped="" ref="0x4051ba80"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin1" scoped="" ref="0x4051ba80"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x40d6e3b0"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin4" scoped="" ref="0x404fc170"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x40c79570"/></to>
    </wire>
    <wire loc="143:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortB6" scoped="" ref="0x404b5210"/></from>
      <to><interface-ref name="Pin6" scoped="" ref="0x40502c88"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin6" scoped="" ref="0x40502c88"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x40cc66c0"/></to>
    </wire>
    <wire loc="183:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortG1" scoped="" ref="0x404c8900"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x405553e8"/></to>
    </wire>
    <wire loc="146:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortC0" scoped="" ref="0x404b4670"/></from>
      <to><interface-ref name="Pin0" scoped="" ref="0x4050cdc8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin0" scoped="" ref="0x4050cdc8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x40cf4538"/></to>
    </wire>
    <wire loc="157:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortD2" scoped="" ref="0x404bbce8"/></from>
      <to><interface-ref name="Pin2" scoped="" ref="0x405129e8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin2" scoped="" ref="0x405129e8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x40d140b0"/></to>
    </wire>
    <wire loc="168:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortE4" scoped="" ref="0x404c22f0"/></from>
      <to><interface-ref name="Pin4" scoped="" ref="0x40518790"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin4" scoped="" ref="0x40518790"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x40d69228"/></to>
    </wire>
    <wire loc="177:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortF4" scoped="" ref="0x404cb4b0"/></from>
      <to><interface-ref name="Pin4" scoped="" ref="0x40520030"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin4" scoped="" ref="0x40520030"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x40d91010"/></to>
    </wire>
    <wire loc="135:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortA7" scoped="" ref="0x404ac8e0"/></from>
      <to><interface-ref name="Pin7" scoped="" ref="0x404fbe48"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin7" scoped="" ref="0x404fbe48"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x40c74538"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin1" scoped="" ref="0x40505d30"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x40ca03b0"/></to>
    </wire>
    <wire loc="149:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortC3" scoped="" ref="0x404bf4b0"/></from>
      <to><interface-ref name="Pin3" scoped="" ref="0x4050aac8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin3" scoped="" ref="0x4050aac8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x40cef538"/></to>
    </wire>
    <wire loc="160:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortD5" scoped="" ref="0x404b9c08"/></from>
      <to><interface-ref name="Pin5" scoped="" ref="0x40510790"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin5" scoped="" ref="0x40510790"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x40d3f010"/></to>
    </wire>
    <wire loc="171:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortE7" scoped="" ref="0x404c0210"/></from>
      <to><interface-ref name="Pin7" scoped="" ref="0x405164f0"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin7" scoped="" ref="0x405164f0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x40d640b0"/></to>
    </wire>
    <wire loc="130:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortA2" scoped="" ref="0x404af590"/></from>
      <to><interface-ref name="Pin2" scoped="" ref="0x404f1e48"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin2" scoped="" ref="0x404f1e48"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x40c7c0f8"/></to>
    </wire>
    <wire loc="141:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortB4" scoped="" ref="0x404b7c08"/></from>
      <to><interface-ref name="Pin4" scoped="" ref="0x40503988"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin4" scoped="" ref="0x40503988"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x40cc9228"/></to>
    </wire>
    <wire loc="152:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortC6" scoped="" ref="0x404bd2f0"/></from>
      <to><interface-ref name="Pin6" scoped="" ref="0x405087d0"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin6" scoped="" ref="0x405087d0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x40cea538"/></to>
    </wire>
    <wire loc="180:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortF7" scoped="" ref="0x404c92f0"/></from>
      <to><interface-ref name="Pin7" scoped="" ref="0x4051fc88"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin7" scoped="" ref="0x4051fc88"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x40d8c010"/></to>
    </wire>
    <wire loc="155:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortD0" scoped="" ref="0x404bc750"/></from>
      <to><interface-ref name="Pin0" scoped="" ref="0x405136f8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin0" scoped="" ref="0x405136f8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x40d19c20"/></to>
    </wire>
    <wire loc="166:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortE2" scoped="" ref="0x404c4ea8"/></from>
      <to><interface-ref name="Pin2" scoped="" ref="0x4051a410"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin2" scoped="" ref="0x4051a410"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x40d6dd70"/></to>
    </wire>
    <wire loc="175:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortF2" scoped="" ref="0x404cc0a0"/></from>
      <to><interface-ref name="Pin2" scoped="" ref="0x40522c88"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin2" scoped="" ref="0x40522c88"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x40d959e8"/></to>
    </wire>
    <wire loc="186:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortG4" scoped="" ref="0x404d4830"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x4055d3b0"/></to>
    </wire>
    <wire loc="133:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortA5" scoped="" ref="0x404ad4b0"/></from>
      <to><interface-ref name="Pin5" scoped="" ref="0x404fcac8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin5" scoped="" ref="0x404fcac8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x40c77010"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin7" scoped="" ref="0x405006b0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x40cc40b0"/></to>
    </wire>
    <wire loc="173:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortF0" scoped="" ref="0x404c0c08"/></from>
      <to><interface-ref name="Pin0" scoped="" ref="0x405239c0"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin0" scoped="" ref="0x405239c0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x40d98538"/></to>
    </wire>
    <wire loc="147:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortC1" scoped="" ref="0x404b20a0"/></from>
      <to><interface-ref name="Pin1" scoped="" ref="0x4050b790"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin1" scoped="" ref="0x4050b790"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x40cf2010"/></to>
    </wire>
    <wire loc="158:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortD3" scoped="" ref="0x404ba750"/></from>
      <to><interface-ref name="Pin3" scoped="" ref="0x40511410"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin3" scoped="" ref="0x40511410"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x40d13a88"/></to>
    </wire>
    <wire loc="169:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortE5" scoped="" ref="0x404c2ce8"/></from>
      <to><interface-ref name="Pin5" scoped="" ref="0x40517170"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin5" scoped="" ref="0x40517170"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x40d68c08"/></to>
    </wire>
    <wire loc="178:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortF5" scoped="" ref="0x404cbea8"/></from>
      <to><interface-ref name="Pin5" scoped="" ref="0x40520988"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin5" scoped="" ref="0x40520988"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x40d909e8"/></to>
    </wire>
    <wire loc="128:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortA0" scoped="" ref="0x404b0120"/></from>
      <to><interface-ref name="Pin0" scoped="" ref="0x404f2b18"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin0" scoped="" ref="0x404f2b18"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x40c81cd0"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin2" scoped="" ref="0x405046b0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x40ccdd70"/></to>
    </wire>
    <wire loc="150:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortC4" scoped="" ref="0x404bfea8"/></from>
      <to><interface-ref name="Pin4" scoped="" ref="0x405094f0"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin4" scoped="" ref="0x405094f0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x40ced010"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin6" scoped="" ref="0x4050f170"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x40d3e9e8"/></to>
    </wire>
    <wire loc="184:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortG2" scoped="" ref="0x404c73d0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x405538f0"/></to>
    </wire>
    <wire loc="164:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortE0" scoped="" ref="0x404c5a98"/></from>
      <to><interface-ref name="Pin0" scoped="" ref="0x4051b128"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin0" scoped="" ref="0x4051b128"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x40d70938"/></to>
    </wire>
    <wire loc="153:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortC7" scoped="" ref="0x404bdce8"/></from>
      <to><interface-ref name="Pin7" scoped="" ref="0x40507170"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin7" scoped="" ref="0x40507170"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x40ce8010"/></to>
    </wire>
    <wire loc="131:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortA3" scoped="" ref="0x404ae010"/></from>
      <to><interface-ref name="Pin3" scoped="" ref="0x404fd7d0"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin3" scoped="" ref="0x404fd7d0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x40c7bac8"/></to>
    </wire>
    <wire loc="142:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortB5" scoped="" ref="0x404b6750"/></from>
      <to><interface-ref name="Pin5" scoped="" ref="0x40502330"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin5" scoped="" ref="0x40502330"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x40cc8c08"/></to>
    </wire>
    <wire loc="43:/opt/tinyos-2.1.0/tos/system/TinySchedulerC.nc">
      <from><interface-ref name="TaskBasic" scoped="" ref="0x402d6bc0"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x4033cf18"/></to>
    </wire>
    <wire loc="44:/opt/tinyos-2.1.0/tos/system/TinySchedulerC.nc">
      <from><interface-ref name="McuSleep" scoped="" ref="0x4033bb90"/></from>
      <to><interface-ref name="McuSleep" scoped="" ref="0x4034a438"/></to>
    </wire>
    <wire loc="58:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Timer0AsyncC.nc">
      <from><interface-ref name="McuPowerOverride" scoped="" ref="0x4034e218"/></from>
      <to><interface-ref name="McuPowerOverride" scoped="" ref="0x40b7dce0"/></to>
    </wire>
    <wire loc="59:/opt/tinyos-2.1.0/tos/lib/printf/PrintfC.nc">
      <from><interface-ref name="MainBoot" scoped="" ref="0x40848440"/></from>
      <to><interface-ref name="MainBoot" scoped="" ref="0x4058c1d0"/></to>
    </wire>
    <wire loc="62:/opt/tinyos-2.1.0/tos/lib/printf/PrintfC.nc">
      <from><interface-ref name="SerialControl" scoped="" ref="0x40848880"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x4058cba0"/></to>
    </wire>
    <wire loc="50:/opt/tinyos-2.1.0/tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="SplitControl" scoped="" ref="0x4058cba0"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x405d9d10"/></to>
    </wire>
    <wire loc="63:/opt/tinyos-2.1.0/tos/lib/printf/PrintfC.nc">
      <from><interface-ref name="Queue" scoped="" ref="0x40847010"/></from>
      <to><interface-ref name="Queue" scoped="" ref="0x40829408"/></to>
    </wire>
    <wire loc="64:/opt/tinyos-2.1.0/tos/lib/printf/PrintfC.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0x40846b38"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x407e7760"/></to>
    </wire>
    <wire>
      <from><interface-ref name="AMSend" scoped="" ref="0x407e7760"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x40e660c8"/></to>
    </wire>
    <wire loc="65:/opt/tinyos-2.1.0/tos/lib/printf/PrintfC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x40860270"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x407e7df8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Packet" scoped="" ref="0x407e7df8"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x4059a288"/></to>
    </wire>
    <wire loc="56:/opt/tinyos-2.1.0/tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="SplitControl" scoped="" ref="0x405d9d10"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x405f4010"/></to>
    </wire>
    <wire loc="52:/opt/tinyos-2.1.0/tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0x4059b550"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x405a5c58"/></to>
    </wire>
    <wire loc="54:/opt/tinyos-2.1.0/tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x4059a288"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x405ca310"/></to>
    </wire>
    <wire loc="53:/opt/tinyos-2.1.0/tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x4059bf10"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x405a43b0"/></to>
    </wire>
    <wire loc="56:/opt/tinyos-2.1.0/tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="PacketAcknowledgements" scoped="" ref="0x40594b10"/></from>
      <to><interface-ref name="PacketAcknowledgements" scoped="" ref="0x405ca9a8"/></to>
    </wire>
    <wire loc="55:/opt/tinyos-2.1.0/tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x4059a978"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x405a46d8"/></to>
    </wire>
    <wire loc="58:/opt/tinyos-2.1.0/tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x405d9978"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x405f5bb8"/></to>
    </wire>
    <wire loc="49:/opt/tinyos-2.1.0/tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x405e2a10"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x40598060"/></to>
    </wire>
    <wire loc="58:/opt/tinyos-2.1.0/tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0x405caed0"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x405d5c20"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="59:/opt/tinyos-2.1.0/tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0x405da5a0"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x405d5618"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="61:/opt/tinyos-2.1.0/tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="SerialPacketInfo" scoped="" ref="0x405e2508"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="Info" scoped="" ref="0x407f1728"/></to>
    </wire>
    <wire loc="53:/opt/tinyos-2.1.0/tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="Send" scoped="" ref="0x405d5c20"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x4069b4f8"/></to>
    </wire>
    <wire loc="54:/opt/tinyos-2.1.0/tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x405d5618"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x4069b138"/></to>
    </wire>
    <wire loc="55:/opt/tinyos-2.1.0/tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="PacketInfo" scoped="" ref="0x4069bc88"/></from>
      <to><interface-ref name="SerialPacketInfo" scoped="" ref="0x405e2508"/></to>
    </wire>
    <wire loc="59:/opt/tinyos-2.1.0/tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x405f25e0"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x405e2a10"/></to>
    </wire>
    <wire loc="60:/opt/tinyos-2.1.0/tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x4069acc0"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x405e2a10"/></to>
    </wire>
    <wire loc="61:/opt/tinyos-2.1.0/tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x406a3eb8"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x405e2a10"/></to>
    </wire>
    <wire loc="63:/opt/tinyos-2.1.0/tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="ReceiveBytePacket" scoped="" ref="0x4069a230"/></from>
      <to><interface-ref name="ReceiveBytePacket" scoped="" ref="0x405ff948"/></to>
    </wire>
    <wire loc="64:/opt/tinyos-2.1.0/tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="SendBytePacket" scoped="" ref="0x4069a708"/></from>
      <to><interface-ref name="SendBytePacket" scoped="" ref="0x405f0758"/></to>
    </wire>
    <wire loc="66:/opt/tinyos-2.1.0/tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="SerialFrameComm" scoped="" ref="0x405fcca0"/></from>
      <to><interface-ref name="SerialFrameComm" scoped="" ref="0x406ab238"/></to>
    </wire>
    <wire loc="67:/opt/tinyos-2.1.0/tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="SerialControl" scoped="" ref="0x405f82d8"/></from>
      <to><interface-ref name="StdControl" scoped="" ref="0x40697ae8"/></to>
    </wire>
    <wire loc="48:/opt/tinyos-2.1.0/tos/platforms/mica/PlatformSerialC.nc">
      <from><interface-ref name="StdControl" scoped="" ref="0x40697ae8"/></from>
      <to><interface-ref name="StdControl" scoped="" ref="0x406bf838"/></to>
    </wire>
    <wire loc="69:/opt/tinyos-2.1.0/tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="UartStream" scoped="" ref="0x406a3630"/></from>
      <to><interface-ref name="UartStream" scoped="" ref="0x406c0010"/></to>
    </wire>
    <wire loc="49:/opt/tinyos-2.1.0/tos/platforms/mica/PlatformSerialC.nc">
      <from><interface-ref name="UartStream" scoped="" ref="0x406c0010"/></from>
      <to><interface-ref name="UartStream" scoped="" ref="0x406bb1d8"/></to>
    </wire>
    <wire loc="326:/opt/tinyos-2.1.0/tos/lib/serial/SerialP.nc">
      <from><interface-ref name="stopDoneTask" scoped="" ref="0x4062cd90"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x402d6bc0"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="189:/opt/tinyos-2.1.0/tos/lib/serial/SerialP.nc">
      <from><interface-ref name="RunTx" scoped="" ref="0x4060f788"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x402d6bc0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="320:/opt/tinyos-2.1.0/tos/lib/serial/SerialP.nc">
      <from><interface-ref name="startDoneTask" scoped="" ref="0x4062ebd0"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x402d6bc0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="335:/opt/tinyos-2.1.0/tos/lib/serial/SerialP.nc">
      <from><interface-ref name="defaultSerialFlushTask" scoped="" ref="0x4062aa70"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x402d6bc0"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire>
      <from><interface-ref name="receiveTask" scoped="" ref="0x40699970"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x402d6bc0"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire>
      <from><interface-ref name="signalSendDone" scoped="" ref="0x40699da8"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x402d6bc0"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="50:/opt/tinyos-2.1.0/tos/platforms/mica/PlatformSerialC.nc">
      <from><interface-ref name="UartByte" scoped="" ref="0x406bde20"/></from>
      <to><interface-ref name="UartByte" scoped="" ref="0x406bfca8"/></to>
    </wire>
    <wire loc="51:/opt/tinyos-2.1.0/tos/chips/atm128/Atm128Uart0C.nc">
      <from><interface-ref name="UartByte" scoped="" ref="0x406bfca8"/></from>
      <to><interface-ref name="UartByte" scoped="" ref="0x406ca5c8"/></to>
    </wire>
    <wire loc="52:/opt/tinyos-2.1.0/tos/chips/atm128/Atm128Uart0C.nc">
      <from><interface-ref name="UartStream" scoped="" ref="0x406bb1d8"/></from>
      <to><interface-ref name="UartStream" scoped="" ref="0x406ca9e0"/></to>
    </wire>
    <wire loc="50:/opt/tinyos-2.1.0/tos/chips/atm128/Atm128Uart0C.nc">
      <from><interface-ref name="StdControl" scoped="" ref="0x406bf838"/></from>
      <to><interface-ref name="StdControl" scoped="" ref="0x406ca1b0"/></to>
    </wire>
    <wire loc="53:/opt/tinyos-2.1.0/tos/platforms/mica/PlatformSerialC.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x406ccd18"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x4073b0b0"/></to>
    </wire>
    <wire loc="33:/opt/tinyos-2.1.0/tos/platforms/mica/CounterMicro32C.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x4073b0b0"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x407389f0"/></to>
    </wire>
    <wire loc="53:/opt/tinyos-2.1.0/tos/chips/atm128/Atm128Uart0C.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x406e58b0"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x406ccd18"/></to>
    </wire>
    <wire loc="56:/opt/tinyos-2.1.0/tos/chips/atm128/Atm128Uart0C.nc">
      <from><interface-ref name="HplUartTxControl" scoped="" ref="0x406e6350"/></from>
      <to><interface-ref name="Uart0TxControl" scoped="" ref="0x407002e8"/></to>
    </wire>
    <wire loc="51:/opt/tinyos-2.1.0/tos/chips/atm128/HplAtm128UartC.nc">
      <from><interface-ref name="Uart0TxControl" scoped="" ref="0x407002e8"/></from>
      <to><interface-ref name="Uart0TxControl" scoped="" ref="0x406fd9c0"/></to>
    </wire>
    <wire loc="57:/opt/tinyos-2.1.0/tos/chips/atm128/Atm128Uart0C.nc">
      <from><interface-ref name="HplUartRxControl" scoped="" ref="0x406e6788"/></from>
      <to><interface-ref name="Uart0RxControl" scoped="" ref="0x407007f8"/></to>
    </wire>
    <wire loc="52:/opt/tinyos-2.1.0/tos/chips/atm128/HplAtm128UartC.nc">
      <from><interface-ref name="Uart0RxControl" scoped="" ref="0x407007f8"/></from>
      <to><interface-ref name="Uart0RxControl" scoped="" ref="0x406fdef0"/></to>
    </wire>
    <wire loc="58:/opt/tinyos-2.1.0/tos/chips/atm128/Atm128Uart0C.nc">
      <from><interface-ref name="HplUart" scoped="" ref="0x406e6bc0"/></from>
      <to><interface-ref name="HplUart0" scoped="" ref="0x40700cf0"/></to>
    </wire>
    <wire loc="53:/opt/tinyos-2.1.0/tos/chips/atm128/HplAtm128UartC.nc">
      <from><interface-ref name="HplUart0" scoped="" ref="0x40700cf0"/></from>
      <to><interface-ref name="HplUart0" scoped="" ref="0x406fa420"/></to>
    </wire>
    <wire loc="57:/opt/tinyos-2.1.0/tos/chips/atm128/HplAtm128UartC.nc">
      <from><interface-ref name="HplUart1" scoped="" ref="0x406fe390"/></from>
      <to><interface-ref name="HplUart1" scoped="" ref="0x406f9ea8"/></to>
    </wire>
    <wire loc="55:/opt/tinyos-2.1.0/tos/chips/atm128/HplAtm128UartC.nc">
      <from><interface-ref name="Uart1TxControl" scoped="" ref="0x406ff968"/></from>
      <to><interface-ref name="Uart1TxControl" scoped="" ref="0x406f9460"/></to>
    </wire>
    <wire loc="56:/opt/tinyos-2.1.0/tos/chips/atm128/HplAtm128UartC.nc">
      <from><interface-ref name="Uart1RxControl" scoped="" ref="0x406ffe78"/></from>
      <to><interface-ref name="Uart1RxControl" scoped="" ref="0x406f9990"/></to>
    </wire>
    <wire loc="59:/opt/tinyos-2.1.0/tos/chips/atm128/HplAtm128UartC.nc">
      <from><interface-ref name="Atm128Calibrate" scoped="" ref="0x40712a98"/></from>
      <to><interface-ref name="Atm128Calibrate" scoped="" ref="0x4043a740"/></to>
    </wire>
    <wire loc="60:/opt/tinyos-2.1.0/tos/chips/atm128/HplAtm128UartC.nc">
      <from><interface-ref name="McuPowerState" scoped="" ref="0x407111f8"/></from>
      <to><interface-ref name="McuPowerState" scoped="" ref="0x4034f148"/></to>
    </wire>
    <wire loc="34:/opt/tinyos-2.1.0/tos/platforms/mica/CounterMicro32C.nc">
      <from><interface-ref name="CounterFrom" scoped="" ref="0x407d0cd8"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x4073ab58"/></to>
    </wire>
    <wire loc="31:/opt/tinyos-2.1.0/tos/platforms/mica/CounterThree16C.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x4073ab58"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x407b8618"/></to>
    </wire>
    <wire loc="32:/opt/tinyos-2.1.0/tos/platforms/mica/CounterThree16C.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x407c57e0"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x40746f18"/></to>
    </wire>
    <wire loc="46:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Timer3C.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x40746f18"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x40761a30"/></to>
    </wire>
    <wire loc="47:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Timer3C.nc">
      <from><interface-ref name="TimerCtrl" scoped="" ref="0x40755e28"/></from>
      <to><interface-ref name="TimerCtrl" scoped="" ref="0x4075cd78"/></to>
    </wire>
    <wire loc="48:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Timer3C.nc">
      <from><interface-ref name="Capture" scoped="" ref="0x40750c38"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x4075bb28"/></to>
    </wire>
    <wire loc="50:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Timer3C.nc">
      <from><interface-ref name="Compare" scoped="" ref="0x407627f0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareA" scoped="" ref="0x40771a80"/></to>
    </wire>
    <wire loc="51:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Timer3C.nc">
      <from><interface-ref name="Compare" scoped="" ref="0x407627f0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareB" scoped="" ref="0x4076e6a0"/></to>
    </wire>
    <wire loc="52:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Timer3C.nc">
      <from><interface-ref name="Compare" scoped="" ref="0x407627f0"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareC" scoped="" ref="0x4076b340"/></to>
    </wire>
    <wire loc="27:/opt/tinyos-2.1.0/tos/platforms/mica/InitThreeP.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x407b6e28"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x40746f18"/></to>
    </wire>
    <wire>
      <from><interface-ref name="AMPacket" scoped="" ref="0x4082c4d0"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x4059a978"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Acks" scoped="" ref="0x4082b170"/></from>
      <to><interface-ref name="PacketAcknowledgements" scoped="" ref="0x40594b10"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Send" scoped="" ref="0x40e66790"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x4080ce48"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire>
      <from><interface-ref name="AMPacket" scoped="" ref="0x40e66e28"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x4059a978"/></to>
    </wire>
    <wire loc="46:/opt/tinyos-2.1.0/tos/lib/serial/SerialAMQueueP.nc">
      <from><interface-ref name="Send" scoped="" ref="0x4080ce48"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x40806da0"/></to>
    </wire>
    <wire loc="47:/opt/tinyos-2.1.0/tos/lib/serial/SerialAMQueueP.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0x40832598"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x4059b550"/></to>
    </wire>
    <wire loc="48:/opt/tinyos-2.1.0/tos/lib/serial/SerialAMQueueP.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x40832c40"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x4059a978"/></to>
    </wire>
    <wire loc="49:/opt/tinyos-2.1.0/tos/lib/serial/SerialAMQueueP.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x40831850"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x4059a288"/></to>
    </wire>
    <wire>
      <from><interface-ref name="errorTask" scoped="" ref="0x40831f28"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x402d6bc0"/>
      <arguments>
        <value cst="I:7">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire>
      <from><interface-ref name="CancelTask" scoped="" ref="0x40830370"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x402d6bc0"/>
      <arguments>
        <value cst="I:6">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="127:/opt/tinyos-2.1.0/tos/lib/printf/PrintfP.nc">
      <from><interface-ref name="retrySend" scoped="" ref="0x4085a1e0"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x402d6bc0"/>
      <arguments>
        <value cst="I:8">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="42:/opt/tinyos-2.1.0/tos/system/LedsC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x40889600"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x40867890"/></to>
    </wire>
    <wire loc="43:/opt/tinyos-2.1.0/tos/system/LedsC.nc">
      <from><interface-ref name="Led0" scoped="" ref="0x40864940"/></from>
      <to><interface-ref name="Led0" scoped="" ref="0x408667f0"/></to>
    </wire>
    <wire loc="47:/opt/tinyos-2.1.0/tos/platforms/mica/PlatformLedsC.nc">
      <from><interface-ref name="Led0" scoped="" ref="0x408667f0"/></from>
      <to><interface-ref name="PortA2" scoped="" ref="0x404af590"/></to>
    </wire>
    <wire loc="44:/opt/tinyos-2.1.0/tos/system/LedsC.nc">
      <from><interface-ref name="Led1" scoped="" ref="0x408633c0"/></from>
      <to><interface-ref name="Led1" scoped="" ref="0x4088a220"/></to>
    </wire>
    <wire loc="48:/opt/tinyos-2.1.0/tos/platforms/mica/PlatformLedsC.nc">
      <from><interface-ref name="Led1" scoped="" ref="0x4088a220"/></from>
      <to><interface-ref name="PortA1" scoped="" ref="0x404b0b18"/></to>
    </wire>
    <wire loc="45:/opt/tinyos-2.1.0/tos/system/LedsC.nc">
      <from><interface-ref name="Led2" scoped="" ref="0x40863da8"/></from>
      <to><interface-ref name="Led2" scoped="" ref="0x4088ac28"/></to>
    </wire>
    <wire loc="49:/opt/tinyos-2.1.0/tos/platforms/mica/PlatformLedsC.nc">
      <from><interface-ref name="Led2" scoped="" ref="0x4088ac28"/></from>
      <to><interface-ref name="PortA0" scoped="" ref="0x404b0120"/></to>
    </wire>
    <wire loc="61:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000ActiveMessageC.nc">
      <from><interface-ref name="SplitControl" scoped="" ref="0x40883ca8"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x408c4040"/></to>
    </wire>
    <wire loc="64:/opt/tinyos-2.1.0/tos/platforms/mica2/ActiveMessageC.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0x40886710"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x40880630"/></to>
    </wire>
    <wire loc="66:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000ActiveMessageC.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0x40880630"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x40894158"/></to>
    </wire>
    <wire loc="66:/opt/tinyos-2.1.0/tos/platforms/mica2/ActiveMessageC.nc">
      <from><interface-ref name="Snoop" scoped="" ref="0x40885798"/></from>
      <to><interface-ref name="Snoop" scoped="" ref="0x4087e6a8"/></to>
    </wire>
    <wire loc="68:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000ActiveMessageC.nc">
      <from><interface-ref name="Snoop" scoped="" ref="0x4087e6a8"/></from>
      <to><interface-ref name="Snoop" scoped="" ref="0x408931f8"/></to>
    </wire>
    <wire loc="67:/opt/tinyos-2.1.0/tos/platforms/mica2/ActiveMessageC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x40885af0"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x4087d6d0"/></to>
    </wire>
    <wire loc="62:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000ActiveMessageC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x4087d6d0"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x408c30a0"/></to>
    </wire>
    <wire loc="65:/opt/tinyos-2.1.0/tos/platforms/mica2/ActiveMessageC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x40885100"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x4087e010"/></to>
    </wire>
    <wire loc="67:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000ActiveMessageC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x4087e010"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x40894b18"/></to>
    </wire>
    <wire loc="69:/opt/tinyos-2.1.0/tos/platforms/mica2/ActiveMessageC.nc">
      <from><interface-ref name="PacketAcknowledgements" scoped="" ref="0x40883010"/></from>
      <to><interface-ref name="PacketAcknowledgements" scoped="" ref="0x4087de48"/></to>
    </wire>
    <wire loc="63:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000ActiveMessageC.nc">
      <from><interface-ref name="PacketAcknowledgements" scoped="" ref="0x4087de48"/></from>
      <to><interface-ref name="PacketAcknowledgements" scoped="" ref="0x408bb708"/></to>
    </wire>
    <wire loc="68:/opt/tinyos-2.1.0/tos/platforms/mica2/ActiveMessageC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x40884288"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x4087ea18"/></to>
    </wire>
    <wire loc="69:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000ActiveMessageC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x4087ea18"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x40893568"/></to>
    </wire>
    <wire loc="81:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <from><interface-ref name="SplitControl" scoped="" ref="0x408c4040"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x408c1ac8"/></to>
    </wire>
    <wire loc="84:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x408c30a0"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x40939548"/></to>
    </wire>
    <wire loc="90:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <from><interface-ref name="PacketAcknowledgements" scoped="" ref="0x408bb708"/></from>
      <to><interface-ref name="PacketAcknowledgements" scoped="" ref="0x40938a10"/></to>
    </wire>
    <wire loc="64:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000ActiveMessageC.nc">
      <from><interface-ref name="LinkPacketMetadata" scoped="" ref="0x40895270"/></from>
      <to><interface-ref name="LinkPacketMetadata" scoped="" ref="0x408bbc98"/></to>
    </wire>
    <wire loc="91:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <from><interface-ref name="LinkPacketMetadata" scoped="" ref="0x408bbc98"/></from>
      <to><interface-ref name="LinkPacketMetadata" scoped="" ref="0x40936010"/></to>
    </wire>
    <wire loc="71:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000ActiveMessageC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0x40892230"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x408c4628"/></to>
    </wire>
    <wire loc="82:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <from><interface-ref name="Send" scoped="" ref="0x408c4628"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x4093a620"/></to>
    </wire>
    <wire loc="72:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000ActiveMessageC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0x40892998"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x408c4d08"/></to>
    </wire>
    <wire loc="83:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x408c4d08"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x4093ad00"/></to>
    </wire>
    <wire loc="73:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000ActiveMessageC.nc">
      <from><function-ref name="amAddress" scoped="" ref="0x408916a8"/></from>
      <to><function-ref name="amAddress" scoped="" ref="0x40c13310"/></to>
    </wire>
    <wire loc="74:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000ActiveMessageC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x40892d50"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x408c30a0"/></to>
    </wire>
    <wire loc="88:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <from><interface-ref name="LowPowerListening" scoped="" ref="0x408d21c8"/></from>
      <to><interface-ref name="LowPowerListening" scoped="" ref="0x408d0ad0"/></to>
    </wire>
    <wire loc="86:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <from><interface-ref name="CsmaControl" scoped="" ref="0x408c0460"/></from>
      <to><interface-ref name="CsmaControl" scoped="" ref="0x408d01c0"/></to>
    </wire>
    <wire loc="87:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <from><interface-ref name="CsmaBackoff" scoped="" ref="0x408be098"/></from>
      <to><interface-ref name="CsmaBackoff" scoped="" ref="0x408d0628"/></to>
    </wire>
    <wire loc="89:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <from><interface-ref name="RadioTimeStamping" scoped="" ref="0x408bb230"/></from>
      <to><interface-ref name="RadioTimeStamping" scoped="" ref="0x40939110"/></to>
    </wire>
    <wire loc="93:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <from><interface-ref name="CC1000Control" scoped="" ref="0x408de860"/></from>
      <to><interface-ref name="CC1000Control" scoped="" ref="0x409c46a0"/></to>
    </wire>
    <wire loc="94:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <from><interface-ref name="Random" scoped="" ref="0x408e3010"/></from>
      <to><interface-ref name="Random" scoped="" ref="0x40b03750"/></to>
    </wire>
    <wire loc="95:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <from><interface-ref name="CC1000Squelch" scoped="" ref="0x408dca50"/></from>
      <to><interface-ref name="CC1000Squelch" scoped="" ref="0x409a3e60"/></to>
    </wire>
    <wire loc="96:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <from><interface-ref name="WakeupTimer" scoped="" ref="0x408e35a0"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x409cab60"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Timer" scoped="" ref="0x409cab60"/></from>
      <to><interface-ref name="TimerMilli" scoped="" ref="0x40b19010"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="97:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <from><interface-ref name="ByteRadio" scoped="" ref="0x408e41c8"/></from>
      <to><interface-ref name="ByteRadio" scoped="" ref="0x40939c40"/></to>
    </wire>
    <wire loc="98:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <from><interface-ref name="ByteRadioInit" scoped="" ref="0x408cf7a8"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x4093de28"/></to>
    </wire>
    <wire loc="99:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <from><interface-ref name="ByteRadioControl" scoped="" ref="0x408cfbf0"/></from>
      <to><interface-ref name="StdControl" scoped="" ref="0x4093a1f8"/></to>
    </wire>
    <wire loc="101:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <from><interface-ref name="CC1000Control" scoped="" ref="0x40936400"/></from>
      <to><interface-ref name="CC1000Control" scoped="" ref="0x409c46a0"/></to>
    </wire>
    <wire loc="102:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <from><interface-ref name="HplCC1000Spi" scoped="" ref="0x40935330"/></from>
      <to><interface-ref name="HplCC1000Spi" scoped="" ref="0x40a12728"/></to>
    </wire>
    <wire loc="48:/opt/tinyos-2.1.0/tos/platforms/mica2/chips/cc1000/HplCC1000C.nc">
      <from><interface-ref name="HplCC1000Spi" scoped="" ref="0x40a12728"/></from>
      <to><interface-ref name="HplCC1000Spi" scoped="" ref="0x40499918"/></to>
    </wire>
    <wire loc="103:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <from><function-ref name="amAddress" scoped="" ref="0x40933398"/></from>
      <to><function-ref name="amAddress" scoped="" ref="0x40c13310"/></to>
    </wire>
    <wire loc="104:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <from><interface-ref name="RssiRx" scoped="" ref="0x409344a0"/></from>
      <to><interface-ref name="Rssi" scoped="" ref="0x409c3368"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="105:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <from><interface-ref name="CC1000Squelch" scoped="" ref="0x40935dd0"/></from>
      <to><interface-ref name="CC1000Squelch" scoped="" ref="0x409a3e60"/></to>
    </wire>
    <wire loc="107:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <from><interface-ref name="RssiNoiseFloor" scoped="" ref="0x408f3ac0"/></from>
      <to><interface-ref name="Rssi" scoped="" ref="0x409c3368"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="108:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <from><interface-ref name="RssiCheckChannel" scoped="" ref="0x408d8868"/></from>
      <to><interface-ref name="Rssi" scoped="" ref="0x409c3368"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="109:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <from><interface-ref name="RssiPulseCheck" scoped="" ref="0x408f2608"/></from>
      <to><interface-ref name="Rssi" scoped="" ref="0x409c3368"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="110:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <from><function-ref name="cancelRssi" scoped="" ref="0x408f1438"/></from>
      <to><function-ref name="cancel" scoped="" ref="0x409c2168"/></to>
    </wire>
    <wire loc="111:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <from><interface-ref name="BusyWait" scoped="" ref="0x408d7a28"/></from>
      <to><interface-ref name="BusyWait" scoped="" ref="0x40c0a5a0"/></to>
    </wire>
    <wire loc="113:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <from><interface-ref name="ActualRssi" scoped="" ref="0x409bdbe8"/></from>
      <to><interface-ref name="RssiAdc" scoped="" ref="0x40a13328"/></to>
    </wire>
    <wire loc="49:/opt/tinyos-2.1.0/tos/platforms/mica2/chips/cc1000/HplCC1000C.nc">
      <from><interface-ref name="RssiAdc" scoped="" ref="0x40a13328"/></from>
      <to><interface-ref name="ReadNow" scoped="" ref="0x40a0faf8"/></to>
    </wire>
    <wire loc="114:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x409bd398"/></from>
      <to><interface-ref name="RssiResource" scoped="" ref="0x40a12010"/></to>
    </wire>
    <wire loc="50:/opt/tinyos-2.1.0/tos/platforms/mica2/chips/cc1000/HplCC1000C.nc">
      <from><interface-ref name="RssiResource" scoped="" ref="0x40a12010"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x40a0f3d0"/></to>
    </wire>
    <wire loc="115:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <from><interface-ref name="CC" scoped="" ref="0x409c9628"/></from>
      <to><interface-ref name="HplCC1000" scoped="" ref="0x40a111b8"/></to>
    </wire>
    <wire loc="47:/opt/tinyos-2.1.0/tos/platforms/mica2/chips/cc1000/HplCC1000C.nc">
      <from><interface-ref name="HplCC1000" scoped="" ref="0x40a111b8"/></from>
      <to><interface-ref name="HplCC1000" scoped="" ref="0x4047d400"/></to>
    </wire>
    <wire loc="116:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <from><interface-ref name="BusyWait" scoped="" ref="0x409c9df0"/></from>
      <to><interface-ref name="BusyWait" scoped="" ref="0x40c0a5a0"/></to>
    </wire>
    <wire loc="108:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000CsmaP.nc">
      <from><interface-ref name="setWakeupTask" scoped="" ref="0x408ee040"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x402d6bc0"/>
      <arguments>
        <value cst="I:9">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="175:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000CsmaP.nc">
      <from><interface-ref name="startStopDone" scoped="" ref="0x408ffd18"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x402d6bc0"/>
      <arguments>
        <value cst="I:10">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="293:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000CsmaP.nc">
      <from><interface-ref name="sleepCheck" scoped="" ref="0x409118b0"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x402d6bc0"/>
      <arguments>
        <value cst="I:11">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="316:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000CsmaP.nc">
      <from><interface-ref name="adjustSquelch" scoped="" ref="0x4090d1f0"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x402d6bc0"/>
      <arguments>
        <value cst="I:12">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="377:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000SendReceiveP.nc">
      <from><interface-ref name="signalPacketSent" scoped="" ref="0x4097ed20"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x402d6bc0"/>
      <arguments>
        <value cst="I:13">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="548:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000SendReceiveP.nc">
      <from><interface-ref name="signalPacketReceived" scoped="" ref="0x409a2bd8"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x402d6bc0"/>
      <arguments>
        <value cst="I:14">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire>
      <from><interface-ref name="ReadNow" scoped="" ref="0x40a0faf8"/></from>
      <to><interface-ref name="ReadNow" scoped="" ref="0x40a2ab48"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire>
      <from><interface-ref name="Resource" scoped="" ref="0x40a0f3d0"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x40a243c0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="52:/opt/tinyos-2.1.0/tos/platforms/mica2/chips/cc1000/HplCC1000C.nc">
      <from><interface-ref name="Atm128AdcConfig" scoped="" ref="0x40b08780"/></from>
      <to><interface-ref name="RssiConfig" scoped="" ref="0x4047cde8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Atm128AdcConfig" scoped="" ref="0x40a29b30"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="Atm128AdcConfig" scoped="" ref="0x40b08780"/></to>
    </wire>
    <wire>
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0x40a226c8"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0x40b08c58"/></to>
    </wire>
    <wire loc="30:/opt/tinyos-2.1.0/tos/chips/atm128/adc/WireAdcP.nc">
      <from><interface-ref name="Read" scoped="" ref="0x40a0ab68"/></from>
      <to><interface-ref name="Read" scoped="" ref="0x40ae5560"/></to>
    </wire>
    <wire loc="31:/opt/tinyos-2.1.0/tos/chips/atm128/adc/WireAdcP.nc">
      <from><interface-ref name="ReadNow" scoped="" ref="0x40a2ab48"/></from>
      <to><interface-ref name="ReadNow" scoped="" ref="0x40ae3178"/></to>
    </wire>
    <wire loc="32:/opt/tinyos-2.1.0/tos/chips/atm128/adc/WireAdcP.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x40af3ea0"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x40a283c0"/></to>
    </wire>
    <wire loc="33:/opt/tinyos-2.1.0/tos/chips/atm128/adc/WireAdcP.nc">
      <from><interface-ref name="Atm128AdcConfig" scoped="" ref="0x40ae26b0"/></from>
      <to><interface-ref name="Atm128AdcConfig" scoped="" ref="0x40a29b30"/></to>
    </wire>
    <wire loc="35:/opt/tinyos-2.1.0/tos/chips/atm128/adc/WireAdcP.nc">
      <from><interface-ref name="Service" scoped="" ref="0x40af3280"/></from>
      <to><interface-ref name="Read" scoped="" ref="0x40ae41b8"/></to>
    </wire>
    <wire loc="36:/opt/tinyos-2.1.0/tos/chips/atm128/adc/WireAdcP.nc">
      <from><interface-ref name="Atm128AdcSingle" scoped="" ref="0x40ae3de8"/></from>
      <to><interface-ref name="Atm128AdcSingle" scoped="" ref="0x40a20d38"/></to>
    </wire>
    <wire loc="59:/opt/tinyos-2.1.0/tos/chips/atm128/adc/Atm128AdcC.nc">
      <from><interface-ref name="Atm128AdcSingle" scoped="" ref="0x40a20d38"/></from>
      <to><interface-ref name="Atm128AdcSingle" scoped="" ref="0x40a3bc70"/></to>
    </wire>
    <wire loc="60:/opt/tinyos-2.1.0/tos/chips/atm128/adc/Atm128AdcC.nc">
      <from><interface-ref name="Atm128AdcMultiple" scoped="" ref="0x40a1dec0"/></from>
      <to><interface-ref name="Atm128AdcMultiple" scoped="" ref="0x40a3d208"/></to>
    </wire>
    <wire loc="57:/opt/tinyos-2.1.0/tos/chips/atm128/adc/Atm128AdcC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x40a243c0"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x40a5a600"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Resource" scoped="" ref="0x40a5a600"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x40e90578"/></to>
    </wire>
    <wire loc="58:/opt/tinyos-2.1.0/tos/chips/atm128/adc/Atm128AdcC.nc">
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0x40aaeca0"/></from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0x40a226c8"/></to>
    </wire>
    <wire loc="64:/opt/tinyos-2.1.0/tos/chips/atm128/adc/Atm128AdcC.nc">
      <from><interface-ref name="HplAtm128Adc" scoped="" ref="0x40a33a78"/></from>
      <to><interface-ref name="HplAtm128Adc" scoped="" ref="0x40a5d010"/></to>
    </wire>
    <wire loc="41:/opt/tinyos-2.1.0/tos/chips/atm128/adc/HplAtm128AdcC.nc">
      <from><interface-ref name="HplAtm128Adc" scoped="" ref="0x40a5d010"/></from>
      <to><interface-ref name="HplAtm128Adc" scoped="" ref="0x40a5cc68"/></to>
    </wire>
    <wire loc="65:/opt/tinyos-2.1.0/tos/chips/atm128/adc/Atm128AdcC.nc">
      <from><interface-ref name="Atm128Calibrate" scoped="" ref="0x40a3cea8"/></from>
      <to><interface-ref name="Atm128Calibrate" scoped="" ref="0x4043a740"/></to>
    </wire>
    <wire loc="67:/opt/tinyos-2.1.0/tos/chips/atm128/adc/Atm128AdcC.nc">
      <from><interface-ref name="AsyncStdControl" scoped="" ref="0x40ad29f0"/></from>
      <to><interface-ref name="AsyncStdControl" scoped="" ref="0x40a3b7e0"/></to>
    </wire>
    <wire loc="68:/opt/tinyos-2.1.0/tos/chips/atm128/adc/Atm128AdcC.nc">
      <from><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x40ad1150"/></from>
      <to><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x40aae158"/></to>
    </wire>
    <wire>
      <from><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x40aae158"/></from>
      <to><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x40e8f150"/></to>
    </wire>
    <wire loc="42:/opt/tinyos-2.1.0/tos/chips/atm128/adc/HplAtm128AdcC.nc">
      <from><interface-ref name="McuPowerState" scoped="" ref="0x40a580e8"/></from>
      <to><interface-ref name="McuPowerState" scoped="" ref="0x4034f148"/></to>
    </wire>
    <wire>
      <from><interface-ref name="ResourceRequested" scoped="" ref="0x40a5ad40"/></from>
      <to><interface-ref name="ResourceRequested" scoped="" ref="0x40e90cb8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="ArbiterInfo" scoped="" ref="0x40aae7f0"/></from>
      <to><interface-ref name="ArbiterInfo" scoped="" ref="0x40e8f7e8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0x40e8fca8"/></from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0x40aaeca0"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Queue" scoped="" ref="0x40ec6170"/></from>
      <to><interface-ref name="RoundRobinQueue" scoped="" ref="0x40e92410"/></to>
    </wire>
    <wire>
      <from><interface-ref name="grantedTask" scoped="" ref="0x40ec5358"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x402d6bc0"/>
      <arguments>
        <value cst="I:15">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire>
      <from><interface-ref name="AsyncStdControl" scoped="" ref="0x40ee17c0"/></from>
      <to><interface-ref name="AsyncStdControl" scoped="" ref="0x40ad29f0"/></to>
    </wire>
    <wire>
      <from><interface-ref name="PowerDownCleanup" scoped="" ref="0x40ee1bb8"/></from>
      <to><interface-ref name="PowerDownCleanup" scoped="" ref="0x40ad2de8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x40ee1ed0"/></from>
      <to><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x40ad1150"/></to>
    </wire>
    <wire>
      <from><interface-ref name="ArbiterInfo" scoped="" ref="0x40ee0580"/></from>
      <to><interface-ref name="ArbiterInfo" scoped="" ref="0x40ad17e8"/></to>
    </wire>
    <wire loc="103:/opt/tinyos-2.1.0/tos/chips/atm128/adc/AdcP.nc">
      <from><interface-ref name="acquiredData" scoped="" ref="0x40ad9e90"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x402d6bc0"/>
      <arguments>
        <value cst="I:16">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="44:/opt/tinyos-2.1.0/tos/system/RandomC.nc">
      <from><interface-ref name="SeedInit" scoped="" ref="0x409b4e78"/></from>
      <to><interface-ref name="SeedInit" scoped="" ref="0x40b008f8"/></to>
    </wire>
    <wire loc="43:/opt/tinyos-2.1.0/tos/system/RandomC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x409b4958"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x40b003d8"/></to>
    </wire>
    <wire loc="43:/opt/tinyos-2.1.0/tos/system/TimerMilliP.nc">
      <from><interface-ref name="TimerMilli" scoped="" ref="0x40b19010"/></from>
      <to><interface-ref name="TimerMilli" scoped="" ref="0x40b13100"/></to>
    </wire>
    <wire loc="50:/opt/tinyos-2.1.0/tos/platforms/mica/HilTimerMilliC.nc">
      <from><interface-ref name="TimerMilli" scoped="" ref="0x40b13100"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x40bceea8"/></to>
    </wire>
    <wire loc="48:/opt/tinyos-2.1.0/tos/platforms/mica/HilTimerMilliC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x40b17890"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x40b0f7d8"/></to>
    </wire>
    <wire loc="54:/opt/tinyos-2.1.0/tos/platforms/mica/HilTimerMilliC.nc">
      <from><interface-ref name="LocalTime" scoped="" ref="0x40b100d0"/></from>
      <to><interface-ref name="LocalTime" scoped="" ref="0x40bf5940"/></to>
    </wire>
    <wire loc="35:/opt/tinyos-2.1.0/tos/platforms/mica/AlarmCounterMilliP.nc">
      <from><interface-ref name="Init" scoped="" ref="0x40b0f7d8"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x40b2ab18"/></to>
    </wire>
    <wire loc="51:/opt/tinyos-2.1.0/tos/platforms/mica/HilTimerMilliC.nc">
      <from><interface-ref name="TimerFrom" scoped="" ref="0x40bfa220"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x40b0cf08"/></to>
    </wire>
    <wire loc="52:/opt/tinyos-2.1.0/tos/platforms/mica/HilTimerMilliC.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0x40bd2248"/></from>
      <to><interface-ref name="AlarmMilli32" scoped="" ref="0x40b331c8"/></to>
    </wire>
    <wire loc="36:/opt/tinyos-2.1.0/tos/platforms/mica/AlarmCounterMilliP.nc">
      <from><interface-ref name="AlarmMilli32" scoped="" ref="0x40b331c8"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x40b9a010"/></to>
    </wire>
    <wire loc="55:/opt/tinyos-2.1.0/tos/platforms/mica/HilTimerMilliC.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x40bf4360"/></from>
      <to><interface-ref name="CounterMilli32" scoped="" ref="0x40b2ede8"/></to>
    </wire>
    <wire loc="37:/opt/tinyos-2.1.0/tos/platforms/mica/AlarmCounterMilliP.nc">
      <from><interface-ref name="CounterMilli32" scoped="" ref="0x40b2ede8"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x40b99a88"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Counter" scoped="" ref="0x40b99a88"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x40ed1be8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Init" scoped="" ref="0x40b2ab18"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x40ed4d28"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Alarm" scoped="" ref="0x40b9a010"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x40ed2190"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Timer" scoped="" ref="0x40ed0dd8"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x40b65910"/></to>
    </wire>
    <wire loc="60:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Timer0AsyncC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x40b65910"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x40b825b0"/></to>
    </wire>
    <wire>
      <from><interface-ref name="TimerCtrl" scoped="" ref="0x40ecc010"/></from>
      <to><interface-ref name="TimerCtrl" scoped="" ref="0x40b61c80"/></to>
    </wire>
    <wire loc="61:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Timer0AsyncC.nc">
      <from><interface-ref name="TimerCtrl" scoped="" ref="0x40b61c80"/></from>
      <to><interface-ref name="TimerCtrl" scoped="" ref="0x40b7f878"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Compare" scoped="" ref="0x40ecc838"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x40b606b8"/></to>
    </wire>
    <wire loc="62:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Timer0AsyncC.nc">
      <from><interface-ref name="Compare" scoped="" ref="0x40b606b8"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x40b7e248"/></to>
    </wire>
    <wire>
      <from><interface-ref name="TimerAsync" scoped="" ref="0x40ec9278"/></from>
      <to><interface-ref name="TimerAsync" scoped="" ref="0x40b5d280"/></to>
    </wire>
    <wire loc="63:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Timer0AsyncC.nc">
      <from><interface-ref name="TimerAsync" scoped="" ref="0x40b5d280"/></from>
      <to><interface-ref name="TimerAsync" scoped="" ref="0x40b7c1a8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="fired" scoped="" ref="0x40bd1bd0"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x402d6bc0"/>
      <arguments>
        <value cst="I:17">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire>
      <from><interface-ref name="updateFromTimer" scoped="" ref="0x40bf84b8"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x402d6bc0"/>
      <arguments>
        <value cst="I:18">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire>
      <from><interface-ref name="Read" scoped="" ref="0x40f072e0"/></from>
      <to><interface-ref name="Read" scoped="" ref="0x40f06b50"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Read" scoped="" ref="0x40f06b50"/></from>
      <to><interface-ref name="Read" scoped="" ref="0x40a0ab68"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire>
      <from><interface-ref name="Atm128AdcConfig" scoped="" ref="0x40f3d740"/></from>
      <to><interface-ref name="Atm128AdcConfig" scoped="" ref="0x40c35830"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Atm128AdcConfig" scoped="" ref="0x40a29b30"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="Atm128AdcConfig" scoped="" ref="0x40f3d740"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Resource" scoped="" ref="0x40a283c0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="Resource" scoped="" ref="0x40a243c0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire>
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0x40a226c8"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0x40f3dc18"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Acks" scoped="" ref="0x40c4a330"/></from>
      <to><interface-ref name="PacketAcknowledgements" scoped="" ref="0x40883010"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Send" scoped="" ref="0x40f34180"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x40c56810"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire>
      <from><interface-ref name="AMPacket" scoped="" ref="0x40f34818"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x40884288"/></to>
    </wire>
    <wire loc="45:/opt/tinyos-2.1.0/tos/system/AMQueueP.nc">
      <from><interface-ref name="Send" scoped="" ref="0x40c56810"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x40c52ec8"/></to>
    </wire>
    <wire loc="46:/opt/tinyos-2.1.0/tos/system/AMQueueP.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0x40c51648"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x40886710"/></to>
    </wire>
    <wire loc="47:/opt/tinyos-2.1.0/tos/system/AMQueueP.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x40c51cf0"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x40884288"/></to>
    </wire>
    <wire loc="48:/opt/tinyos-2.1.0/tos/system/AMQueueP.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x40c50930"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x40885af0"/></to>
    </wire>
    <wire>
      <from><interface-ref name="errorTask" scoped="" ref="0x40c4f030"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x402d6bc0"/>
      <arguments>
        <value cst="I:20">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire>
      <from><interface-ref name="CancelTask" scoped="" ref="0x40c4f468"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x402d6bc0"/>
      <arguments>
        <value cst="I:19">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire>
      <from><interface-ref name="Packet" scoped="" ref="0x40c47070"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x40885af0"/></to>
    </wire>
    <wire>
      <from><interface-ref name="AMPacket" scoped="" ref="0x40c47708"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x40884288"/></to>
    </wire>
  </wiring>
  <components>
    <component qname="proj1C" loc="53:proj1C.nc">
      <module/>
    </component>
    <component qname="MainC" loc="45:/opt/tinyos-2.1.0/tos/lib/printf/MainC.nc">
      <documentation loc="34:/opt/tinyos-2.1.0/tos/lib/printf/MainC.nc">
        <short>&#10; MainC is the system interface the TinyOS boot sequence.</short>
        <long>&#10; MainC is the system interface the TinyOS boot sequence. It wires the&#10; boot sequence implementation to the scheduler and hardware resources.&#10;&#10; @author Philip Levis&#10; @author Kevin Klues&#10; @date   August 6 2005&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="PlatformC" loc="35:/opt/tinyos-2.1.0/tos/platforms/mica/PlatformC.nc">
      <documentation loc="25:/opt/tinyos-2.1.0/tos/platforms/mica/PlatformC.nc">
        <short>&#10; Initialisation component for mica-family platforms.</short>
        <long>&#10; Initialisation component for mica-family platforms. See TEP107. Each &#10; mica-family member must also provide a MotePlatformC with initialisation&#10; specific to that member.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="PlatformP" loc="33:/opt/tinyos-2.1.0/tos/platforms/mica/PlatformP.nc" safe="">
      <documentation loc="25:/opt/tinyos-2.1.0/tos/platforms/mica/PlatformP.nc">
        <short>&#10; Internal platform boot code.</short>
        <long>&#10; Internal platform boot code.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="MotePlatformC" loc="15:/opt/tinyos-2.1.0/tos/platforms/mica2/MotePlatformC.nc">
      <documentation loc="10:/opt/tinyos-2.1.0/tos/platforms/mica2/MotePlatformC.nc">
        <short>&#10; The portion of a mica-family initialisation that is mote-specific.</short>
        <long>&#10; The portion of a mica-family initialisation that is mote-specific.&#10; &#10; @author David Gay&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="MotePlatformP" loc="15:/opt/tinyos-2.1.0/tos/platforms/mica2/MotePlatformP.nc" safe="">
      <documentation loc="10:/opt/tinyos-2.1.0/tos/platforms/mica2/MotePlatformP.nc">
        <short>&#10; The portion of a mica-family initialisation that is mote-specific.</short>
        <long>&#10; The portion of a mica-family initialisation that is mote-specific.&#10; &#10; @author David Gay&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="HplCC1000InitP" loc="36:/opt/tinyos-2.1.0/tos/platforms/mica2/chips/cc1000/HplCC1000InitP.nc">
      <documentation loc="30:/opt/tinyos-2.1.0/tos/platforms/mica2/chips/cc1000/HplCC1000InitP.nc">
        <short>&#10; Hardware initialisation for the CC1000 radio.</short>
        <long>&#10; Hardware initialisation for the CC1000 radio. This component is always&#10; included even if the radio is not used.&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplCC1000P" loc="41:/opt/tinyos-2.1.0/tos/platforms/mica2/chips/cc1000/HplCC1000P.nc" safe="">
      <module/>
    </component>
    <component qname="HplCC1000SpiP" loc="40:/opt/tinyos-2.1.0/tos/platforms/mica2/chips/cc1000/HplCC1000SpiP.nc" safe="">
      <documentation loc="31:/opt/tinyos-2.1.0/tos/platforms/mica2/chips/cc1000/HplCC1000SpiP.nc">
        <short>&#10; Low-level functions to access the CC1000 bus.</short>
        <long>&#10; Low-level functions to access the CC1000 bus. Built using the mica2&#10; hardware SPI.&#10;&#10; @author Jaein Jeong&#10; @author Philip buonadonna&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC" loc="33:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <documentation loc="27:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
        <short>&#10; Provide GeneralIO interfaces for all of the ATmega128's pins.</short>
        <long>&#10; Provide GeneralIO interfaces for all of the ATmega128's pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA" loc="31(HplAtm128GeneralIOC.PortA):/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <documentation loc="25:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
        <short>&#10; Generic component to expose a full 8-bit port of GPIO pins.</short>
        <long>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="HplAtm128GeneralIOPortP"/>
        <arguments>
          <value cst="I:59">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </value>
          <value cst="I:58">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </value>
          <value cst="I:57">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit0" loc="32(HplAtm128GeneralIOC.PortA.Bit0):/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit1" loc="32(HplAtm128GeneralIOC.PortA.Bit1):/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit2" loc="32(HplAtm128GeneralIOC.PortA.Bit2):/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit3" loc="32(HplAtm128GeneralIOC.PortA.Bit3):/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="3">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit4" loc="32(HplAtm128GeneralIOC.PortA.Bit4):/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="4">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit5" loc="32(HplAtm128GeneralIOC.PortA.Bit5):/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="5">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit6" loc="32(HplAtm128GeneralIOC.PortA.Bit6):/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="6">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit7" loc="32(HplAtm128GeneralIOC.PortA.Bit7):/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="7">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB" loc="31(HplAtm128GeneralIOC.PortB):/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <documentation loc="25:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
        <short>&#10; Generic component to expose a full 8-bit port of GPIO pins.</short>
        <long>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="HplAtm128GeneralIOPortP"/>
        <arguments>
          <value cst="I:56">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit0" loc="32(HplAtm128GeneralIOC.PortB.Bit0):/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="8">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit1" loc="32(HplAtm128GeneralIOC.PortB.Bit1):/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="9">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit2" loc="32(HplAtm128GeneralIOC.PortB.Bit2):/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="10">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit3" loc="32(HplAtm128GeneralIOC.PortB.Bit3):/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="11">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit4" loc="32(HplAtm128GeneralIOC.PortB.Bit4):/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="12">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit5" loc="32(HplAtm128GeneralIOC.PortB.Bit5):/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="13">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit6" loc="32(HplAtm128GeneralIOC.PortB.Bit6):/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="14">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit7" loc="32(HplAtm128GeneralIOC.PortB.Bit7):/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="15">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC" loc="31(HplAtm128GeneralIOC.PortC):/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <documentation loc="25:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
        <short>&#10; Generic component to expose a full 8-bit port of GPIO pins.</short>
        <long>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="HplAtm128GeneralIOPortP"/>
        <arguments>
          <value cst="I:53">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </value>
          <value cst="I:52">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit0" loc="32(HplAtm128GeneralIOC.PortC.Bit0):/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="16">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit1" loc="32(HplAtm128GeneralIOC.PortC.Bit1):/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="17">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit2" loc="32(HplAtm128GeneralIOC.PortC.Bit2):/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="18">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit3" loc="32(HplAtm128GeneralIOC.PortC.Bit3):/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="19">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit4" loc="32(HplAtm128GeneralIOC.PortC.Bit4):/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="20">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit5" loc="32(HplAtm128GeneralIOC.PortC.Bit5):/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="21">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit6" loc="32(HplAtm128GeneralIOC.PortC.Bit6):/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="22">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit7" loc="32(HplAtm128GeneralIOC.PortC.Bit7):/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="23">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD" loc="31(HplAtm128GeneralIOC.PortD):/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <documentation loc="25:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
        <short>&#10; Generic component to expose a full 8-bit port of GPIO pins.</short>
        <long>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="3">
        <component-ref qname="HplAtm128GeneralIOPortP"/>
        <arguments>
          <value cst="I:50">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </value>
          <value cst="I:48">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit0" loc="32(HplAtm128GeneralIOC.PortD.Bit0):/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="24">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit1" loc="32(HplAtm128GeneralIOC.PortD.Bit1):/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="25">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit2" loc="32(HplAtm128GeneralIOC.PortD.Bit2):/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="26">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit3" loc="32(HplAtm128GeneralIOC.PortD.Bit3):/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="27">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit4" loc="32(HplAtm128GeneralIOC.PortD.Bit4):/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="28">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit5" loc="32(HplAtm128GeneralIOC.PortD.Bit5):/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="29">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit6" loc="32(HplAtm128GeneralIOC.PortD.Bit6):/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="30">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit7" loc="32(HplAtm128GeneralIOC.PortD.Bit7):/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="31">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE" loc="31(HplAtm128GeneralIOC.PortE):/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <documentation loc="25:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
        <short>&#10; Generic component to expose a full 8-bit port of GPIO pins.</short>
        <long>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="4">
        <component-ref qname="HplAtm128GeneralIOPortP"/>
        <arguments>
          <value cst="I:35">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit0" loc="32(HplAtm128GeneralIOC.PortE.Bit0):/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="32">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit1" loc="32(HplAtm128GeneralIOC.PortE.Bit1):/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="33">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit2" loc="32(HplAtm128GeneralIOC.PortE.Bit2):/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="34">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit3" loc="32(HplAtm128GeneralIOC.PortE.Bit3):/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="35">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit4" loc="32(HplAtm128GeneralIOC.PortE.Bit4):/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="36">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit5" loc="32(HplAtm128GeneralIOC.PortE.Bit5):/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="37">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit6" loc="32(HplAtm128GeneralIOC.PortE.Bit6):/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="38">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit7" loc="32(HplAtm128GeneralIOC.PortE.Bit7):/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="39">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF" loc="31(HplAtm128GeneralIOC.PortF):/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <documentation loc="25:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
        <short>&#10; Generic component to expose a full 8-bit port of GPIO pins.</short>
        <long>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="5">
        <component-ref qname="HplAtm128GeneralIOPortP"/>
        <arguments>
          <value cst="I:98">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </value>
          <value cst="I:97">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </value>
          <value cst="I:32">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit0" loc="32(HplAtm128GeneralIOC.PortF.Bit0):/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="40">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit1" loc="32(HplAtm128GeneralIOC.PortF.Bit1):/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="41">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit2" loc="32(HplAtm128GeneralIOC.PortF.Bit2):/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="42">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit3" loc="32(HplAtm128GeneralIOC.PortF.Bit3):/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="43">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit4" loc="32(HplAtm128GeneralIOC.PortF.Bit4):/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="44">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit5" loc="32(HplAtm128GeneralIOC.PortF.Bit5):/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="45">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit6" loc="32(HplAtm128GeneralIOC.PortF.Bit6):/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="46">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit7" loc="32(HplAtm128GeneralIOC.PortF.Bit7):/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="25:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="47">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F0" loc="33(HplAtm128GeneralIOC.F0):/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="25:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:98">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </value>
          <value cst="I:97">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </value>
          <value cst="I:32">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F1" loc="33(HplAtm128GeneralIOC.F1):/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="25:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:98">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </value>
          <value cst="I:97">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </value>
          <value cst="I:32">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F2" loc="33(HplAtm128GeneralIOC.F2):/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="25:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:98">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </value>
          <value cst="I:97">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </value>
          <value cst="I:32">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F3" loc="33(HplAtm128GeneralIOC.F3):/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="25:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="3">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:98">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </value>
          <value cst="I:97">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </value>
          <value cst="I:32">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F4" loc="33(HplAtm128GeneralIOC.F4):/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="25:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="4">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:98">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </value>
          <value cst="I:97">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </value>
          <value cst="I:32">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F5" loc="33(HplAtm128GeneralIOC.F5):/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="25:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="5">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:98">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </value>
          <value cst="I:97">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </value>
          <value cst="I:32">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F6" loc="33(HplAtm128GeneralIOC.F6):/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="25:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="6">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:98">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </value>
          <value cst="I:97">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </value>
          <value cst="I:32">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F7" loc="33(HplAtm128GeneralIOC.F7):/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="25:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="7">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:98">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </value>
          <value cst="I:97">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </value>
          <value cst="I:32">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.G0" loc="33(HplAtm128GeneralIOC.G0):/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="25:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="8">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:101">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </value>
          <value cst="I:100">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </value>
          <value cst="I:99">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.G1" loc="33(HplAtm128GeneralIOC.G1):/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="25:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="9">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:101">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </value>
          <value cst="I:100">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </value>
          <value cst="I:99">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.G2" loc="33(HplAtm128GeneralIOC.G2):/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="25:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="10">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:101">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </value>
          <value cst="I:100">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </value>
          <value cst="I:99">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.G3" loc="33(HplAtm128GeneralIOC.G3):/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="25:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="11">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:101">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </value>
          <value cst="I:100">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </value>
          <value cst="I:99">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.G4" loc="33(HplAtm128GeneralIOC.G4):/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="25:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="12">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:101">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </value>
          <value cst="I:100">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </value>
          <value cst="I:99">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="MeasureClockC" loc="22:/opt/tinyos-2.1.0/tos/platforms/mica/MeasureClockC.nc" safe="">
      <documentation loc="14:/opt/tinyos-2.1.0/tos/platforms/mica/MeasureClockC.nc">
        <short>&#10; Measure cpu clock frequency at boot time.</short>
        <long>&#10; Measure cpu clock frequency at boot time. Provides an Atm128Calibrate&#10; interface so that other components can adjust their calibration as&#10; needed.&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="RealMainP" loc="45:/opt/tinyos-2.1.0/tos/system/RealMainP.nc" safe="">
      <documentation loc="38:/opt/tinyos-2.1.0/tos/system/RealMainP.nc">
        <short>&#10; RealMain implements the TinyOS boot sequence, as documented in TEP 107.</short>
        <long>&#10; RealMain implements the TinyOS boot sequence, as documented in TEP 107.&#10;&#10; @author Philip Levis&#10; @date   January 17 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="TinySchedulerC" loc="35:/opt/tinyos-2.1.0/tos/system/TinySchedulerC.nc">
      <documentation loc="23:/opt/tinyos-2.1.0/tos/system/TinySchedulerC.nc">
        <short>&#10; The TinyOS scheduler.</short>
        <long>&#10; The TinyOS scheduler. It provides two interfaces: Scheduler,&#10; for TinyOS to initialize and run tasks, and TaskBasic, the simplext&#10; class of TinyOS tasks (reserved always at-most-once posting,&#10; FIFO, parameter-free). For details and information on how to&#10; replace the scheduler, refer to TEP 106.&#10;&#10; @author  Phil Levis&#10; @date    August 7 2005&#10; @see     TEP 106: Tasks and Schedulers&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="SchedulerBasicP" loc="43:/opt/tinyos-2.1.0/tos/system/SchedulerBasicP.nc" safe="">
      <module/>
    </component>
    <component qname="McuSleepC" loc="40:/opt/tinyos-2.1.0/tos/chips/atm128/McuSleepC.nc" safe="">
      <documentation loc="26:/opt/tinyos-2.1.0/tos/chips/atm128/McuSleepC.nc">
        <short>&#10; Implementation of TEP 112 (Microcontroller Power Management) for&#10; the Atmega128.</short>
        <long>&#10; Implementation of TEP 112 (Microcontroller Power Management) for&#10; the Atmega128. Power state calculation code copied from Rob&#10; Szewczyk's 1.x code in HPLPowerManagementM.nc.&#10;&#10; &#60;pre>&#10;  $Id: McuSleepC.nc,v 1.10 2008/07/23 17:25:42 idgay Exp $&#10; &#60;/pre>&#10;&#10; @author Philip Levis&#10; @author Robert Szewczyk&#10; @date   October 26, 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="PrintfC" loc="45:/opt/tinyos-2.1.0/tos/lib/printf/PrintfC.nc">
      <documentation loc="23:/opt/tinyos-2.1.0/tos/lib/printf/printf.h">
        <short>&#10;&#10; </short>
        <long>&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10; @version $Revision: 1.11 $&#10; @date $Date: 2008/07/23 01:46:43 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="SerialActiveMessageC" loc="33:/opt/tinyos-2.1.0/tos/lib/serial/SerialActiveMessageC.nc">
      <documentation loc="60:/opt/tinyos-2.1.0/tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="SerialActiveMessageC.AM" loc="34(SerialActiveMessageC.AM):/opt/tinyos-2.1.0/tos/lib/serial/SerialActiveMessageP.nc">
      <documentation loc="60:/opt/tinyos-2.1.0/tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="SerialActiveMessageP"/>
      </instance>
      <module/>
    </component>
    <component qname="SerialDispatcherC" loc="36:/opt/tinyos-2.1.0/tos/lib/serial/SerialDispatcherC.nc">
      <documentation loc="24:/opt/tinyos-2.1.0/tos/lib/serial/SerialDispatcherC.nc">
        <short>&#10; This component provides functionality to send many different kinds&#10; of serial packets on top of a general packet sending component.</short>
        <long>&#10; This component provides functionality to send many different kinds&#10; of serial packets on top of a general packet sending component. It&#10; achieves this by knowing where the different packets in a message_t&#10; exist through the SerialPacketInfo interface.&#10;&#10; @author Philip Levis&#10; @author Ben Greenstein&#10; @date August 7 2005&#10;&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="SerialP" loc="60:/opt/tinyos-2.1.0/tos/lib/serial/SerialP.nc">
      <module/>
    </component>
    <component qname="SerialDispatcherC.SerialDispatcherP" loc="37(SerialDispatcherC.SerialDispatcherP):/opt/tinyos-2.1.0/tos/lib/serial/SerialDispatcherP.nc">
      <documentation loc="60:/opt/tinyos-2.1.0/tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="SerialDispatcherP"/>
      </instance>
      <module/>
    </component>
    <component qname="HdlcTranslateC" loc="35:/opt/tinyos-2.1.0/tos/lib/serial/HdlcTranslateC.nc">
      <documentation loc="60:/opt/tinyos-2.1.0/tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="PlatformSerialC" loc="38:/opt/tinyos-2.1.0/tos/platforms/mica/PlatformSerialC.nc">
      <documentation loc="32:/opt/tinyos-2.1.0/tos/platforms/mica/PlatformSerialC.nc">
        <short>&#10; </short>
        <long>&#10; @author Alec Woo &#60;awoo@archrock.com>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2006/12/12 18:23:42 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Atm128Uart0C" loc="38:/opt/tinyos-2.1.0/tos/chips/atm128/Atm128Uart0C.nc">
      <documentation loc="32:/opt/tinyos-2.1.0/tos/chips/atm128/Atm128Uart0C.nc">
        <short>&#10; </short>
        <long>&#10; @author Alec Woo &#60;awoo@archrock.com>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2006/12/12 18:23:02 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Atm128Uart0C.UartP" loc="46(Atm128Uart0C.UartP):/opt/tinyos-2.1.0/tos/chips/atm128/Atm128UartP.nc">
      <documentation loc="32:/opt/tinyos-2.1.0/tos/chips/atm128/Atm128UartP.nc">
        <short>&#10; </short>
        <long>&#10; @author Alec Woo &#60;awoo@archrock.com>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @author Philip Levis &#60;pal@cs.stanford.edu> (maintainer)&#10; @version $Revision: 1.7 $ $Date: 2008/06/23 20:25:15 $&#10;&#10; Modification @ 11/27 (pal): Folded in Alec's reimplementation&#10; from the -devel branch. Fixed bug in RX interrupts, where&#10; they were not enabled on start. Possibly due to alternative&#10; ARC TEP113 implementation that uses UartStream?&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Atm128UartP"/>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128UartC" loc="35:/opt/tinyos-2.1.0/tos/chips/atm128/HplAtm128UartC.nc">
      <documentation loc="29:/opt/tinyos-2.1.0/tos/chips/atm128/HplAtm128UartC.nc">
        <short>&#10; HPL for the Atmega 128 serial ports.</short>
        <long>&#10; HPL for the Atmega 128 serial ports.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplAtm128UartP" loc="69:/opt/tinyos-2.1.0/tos/chips/atm128/HplAtm128UartP.nc">
      <documentation loc="60:/opt/tinyos-2.1.0/tos/chips/atm128/HplAtm128UartP.nc">
        <short> &#10; Private component of the Atmega128 serial port HPL.</short>
        <long> &#10; Private component of the Atmega128 serial port HPL.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="CounterMicro32C" loc="22:/opt/tinyos-2.1.0/tos/platforms/mica/CounterMicro32C.nc">
      <documentation loc="11:/opt/tinyos-2.1.0/tos/platforms/mica/CounterMicro32C.nc">
        <short>&#10; 32-bit microsecond Counter component as per TEP102 HAL guidelines.</short>
        <long>&#10; 32-bit microsecond Counter component as per TEP102 HAL guidelines. The&#10; mica family microsecond clock is built on hardware timer 3, and actually&#10; runs at CPU frequency / 8. You can use the MeasureClockC.cyclesPerJiffy() &#10; command to figure out the exact frequency.&#10;&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="CounterThree16C" loc="22:/opt/tinyos-2.1.0/tos/platforms/mica/CounterThree16C.nc">
      <documentation loc="11:/opt/tinyos-2.1.0/tos/platforms/mica/CounterThree16C.nc">
        <short>&#10; 16-bit microsecond Counter component as per TEP102 HAL guidelines.</short>
        <long>&#10; 16-bit microsecond Counter component as per TEP102 HAL guidelines. The&#10; mica family microsecond clock is built on hardware timer 3, and actually&#10; runs at CPU frequency / 8. You can use the MeasureClockC.cyclesPerJiffy() &#10; command to figure out the exact frequency.&#10;&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplAtm128Timer3C" loc="32:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Timer3C.nc">
      <documentation loc="25:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Timer3C.nc">
        <short>&#10; HPL interface to Atmega128 timer 2.</short>
        <long>&#10; HPL interface to Atmega128 timer 2.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;david.e.gay@intel.com>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplAtm128Timer3P" loc="33:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Timer3P.nc">
      <documentation loc="25:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Timer3P.nc">
        <short>&#10; Internal componentr of the HPL interface to Atmega128 timer 3.</short>
        <long>&#10; Internal componentr of the HPL interface to Atmega128 timer 3.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="InitThreeP.InitThree" loc="35(InitThreeP.InitThree):/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128TimerInitC.nc">
      <documentation loc="25:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128TimerInitC.nc">
        <short>&#10; Initialise an Atmega128 timer to a particular prescaler.</short>
        <long>&#10; Initialise an Atmega128 timer to a particular prescaler. Expected to be&#10; used at boot time.&#10; @param timer_size Integer type of the timer&#10; @param prescaler Desired prescaler value&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;david.e.gay@intel.com>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Atm128TimerInitC"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x4019ad68"/></typename>
          </type-int>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="CounterThree16C.NCounter" loc="33(CounterThree16C.NCounter):/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128CounterC.nc">
      <documentation loc="25:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128CounterC.nc">
        <short>&#10; Build a TEP102 Counter from an Atmega128 hardware timer.</short>
        <long>&#10; Build a TEP102 Counter from an Atmega128 hardware timer.&#10; @param frequency_tag The frequency tag for this Counter&#10; @param timer_size The width of this Counter&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Atm128CounterC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x40317288"/>
            <typename><typedef-ref name="TThree" ref="0x40338bc8"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x4019ad68"/></typename>
          </type-int>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="CounterMicro32C.Transform32" loc="43(CounterMicro32C.Transform32):/opt/tinyos-2.1.0/tos/lib/timer/TransformCounterC.nc">
      <documentation loc="23:/opt/tinyos-2.1.0/tos/lib/timer/TransformCounterC.nc">
        <short>&#10; TransformCounterC decreases precision and/or widens an Counter.</short>
        <long>&#10; TransformCounterC decreases precision and/or widens an Counter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param to_precision_tag A type indicating the precision of the transformed&#10;   Counter.&#10; @param to_size_type The type for the width of the transformed Counter.&#10; @param from_precision_tag A type indicating the precision of the original&#10;   Counter.&#10; @param from_size_type The type for the width of the original Counter.&#10; @param bit_shift_right Original time units will be 2 to the power &#10;   &#60;code>bit_shift_right&#60;/code> larger than transformed time units.&#10; @param upper_count_type A type large enough to store the upper bits --&#10;   those needed above from_size_type after its shift right to fill&#10;   to_size_type.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="TransformCounterC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x40317288"/>
            <typename><typedef-ref name="TMicro" ref="0x40317450"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x4019b400"/></typename>
          </type-int>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x40317288"/>
            <typename><typedef-ref name="TThree" ref="0x40338bc8"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x4019ad68"/></typename>
          </type-int>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="counter_three_overflow_t" ref="0x403361d8"/></typename>
          </type-int>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="SerialPacketInfoActiveMessageP" loc="35:/opt/tinyos-2.1.0/tos/lib/serial/SerialPacketInfoActiveMessageP.nc">
      <documentation loc="60:/opt/tinyos-2.1.0/tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="PrintfC.SerialAMSenderC" loc="39(PrintfC.SerialAMSenderC):/opt/tinyos-2.1.0/tos/lib/serial/SerialAMSenderC.nc">
      <documentation loc="60:/opt/tinyos-2.1.0/tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="SerialAMSenderC"/>
        <arguments>
          <value cst="I:100">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="PrintfC.SerialAMSenderC.AMQueueEntryP" loc="35(PrintfC.SerialAMSenderC.AMQueueEntryP):/opt/tinyos-2.1.0/tos/system/AMQueueEntryP.nc">
      <documentation loc="25:/opt/tinyos-2.1.0/tos/system/AMQueueEntryP.nc">
        <short>&#10; Internal AM component that fills in needed packet fields for the &#10; AMSend -> Send transformation.</short>
        <long>&#10; Internal AM component that fills in needed packet fields for the &#10; AMSend -> Send transformation.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AMQueueEntryP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_id_t" ref="0x4039b8b0"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="SerialAMQueueP" loc="35:/opt/tinyos-2.1.0/tos/lib/serial/SerialAMQueueP.nc">
      <documentation loc="60:/opt/tinyos-2.1.0/tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="SerialAMQueueP.AMQueueImplP" loc="37(SerialAMQueueP.AMQueueImplP):/opt/tinyos-2.1.0/tos/system/AMQueueImplP.nc">
      <documentation loc="25:/opt/tinyos-2.1.0/tos/system/AMQueueImplP.nc">
        <short>&#10; An AM send queue that provides a Service Instance pattern for&#10; formatted packets and calls an underlying AMSend in a round-robin&#10; fashion.</short>
        <long>&#10; An AM send queue that provides a Service Instance pattern for&#10; formatted packets and calls an underlying AMSend in a round-robin&#10; fashion. Used to share L2 bandwidth between different communication&#10; clients.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AMQueueImplP"/>
        <arguments>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="PrintfC.QueueC" loc="42(PrintfC.QueueC):/opt/tinyos-2.1.0/tos/system/QueueC.nc">
      <documentation loc="33:/opt/tinyos-2.1.0/tos/system/QueueC.nc">
        <short>&#10;  A general FIFO queue component, whose queue has a bounded size.</short>
        <long>&#10;  A general FIFO queue component, whose queue has a bounded size.&#10;&#10;  @author Philip Levis&#10;  @author Geoffrey Mainland&#10;  @date   $Date: 2008/05/31 20:27:07 $&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="QueueC"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
          </type-int>
          <value cst="I:250">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="PrintfP" loc="84:/opt/tinyos-2.1.0/tos/lib/printf/PrintfP.nc" safe="">
      <module/>
    </component>
    <component qname="LedsC" loc="34:/opt/tinyos-2.1.0/tos/system/LedsC.nc">
      <documentation loc="23:/opt/tinyos-2.1.0/tos/system/LedsC.nc">
        <short>&#10;&#10; The basic TinyOS LEDs abstraction.</short>
        <long>&#10;&#10; The basic TinyOS LEDs abstraction.&#10;&#10; @author Phil Buonadonna&#10; @author David Gay&#10; @author Philip Levis&#10; @author Joe Polastre&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="LedsP" loc="33:/opt/tinyos-2.1.0/tos/system/LedsP.nc" safe="">
      <documentation loc="24:/opt/tinyos-2.1.0/tos/system/LedsP.nc">
        <short>&#10; The implementation of the standard 3 LED mote abstraction.</short>
        <long>&#10; The implementation of the standard 3 LED mote abstraction.&#10;&#10; @author Joe Polastre&#10; @author Philip Levis&#10;&#10; @date   March 21, 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="PlatformLedsC" loc="33:/opt/tinyos-2.1.0/tos/platforms/mica/PlatformLedsC.nc">
      <documentation loc="25:/opt/tinyos-2.1.0/tos/platforms/mica/PlatformLedsC.nc">
        <short>&#10; Platform-specific LED interface.</short>
        <long>&#10; Platform-specific LED interface.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="ActiveMessageC" loc="46:/opt/tinyos-2.1.0/tos/platforms/mica2/ActiveMessageC.nc">
      <documentation loc="38:/opt/tinyos-2.1.0/tos/platforms/mica2/ActiveMessageC.nc">
        <short>&#10; The Active Message layer on the mica2 platform.</short>
        <long>&#10; The Active Message layer on the mica2 platform. This is a naming wrapper&#10; around the CC1000 Active Message layer.&#10;&#10; @author Philip Levis&#10; @date June 19 2005&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="CC1000ActiveMessageC" loc="44:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000ActiveMessageC.nc">
      <documentation loc="32:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000ActiveMessageC.nc">
        <short>&#10;&#10; The Active Message layer for the CC1000 radio.</short>
        <long>&#10;&#10; The Active Message layer for the CC1000 radio. This configuration&#10; just layers the AM dispatch (CC1000ActiveMessageM) on top of the&#10; underlying CC1000 radio packet (CC1000CsmaRadioC), which is&#10; inherently an AM packet (acknowledgements based on AM destination&#10; addr and group).&#10; &#10; @author Philip Levis&#10; @date June 19 2005&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="CC1000ActiveMessageP" loc="38:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000ActiveMessageP.nc" safe="">
      <documentation loc="31:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000ActiveMessageP.nc">
        <short>&#10; Implementation component for CC1000ActiveMessageC.</short>
        <long>&#10; Implementation component for CC1000ActiveMessageC.&#10;&#10; @author Philip Levis&#10; @date June 19 2006&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="CC1000CsmaRadioC" loc="52:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <documentation loc="30:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000CsmaRadioC.nc">
        <short>&#10; A low-power-listening CC1000 radio stack.</short>
        <long>&#10; A low-power-listening CC1000 radio stack.&#10;&#10; Radio logic is split between Csma (media-access control, low-power&#10; listening and general control) and SendReceive (packet reception and&#10; transmission). &#10;&#10; CC1000RssiP (RSSI sharing), CC1000SquelchP (noise-floor estimation)&#10; and CC1000ControlP (radio configuration) provide supporting roles.&#10;&#10; This code has some degree of platform-independence, via the HplCC1000,&#10; RssiAdc and HplCC1000Spi interfaces which must be provided by the&#10; platform. However, these interfaces may still reflect some&#10; particularities of the mica2 hardware implementation.&#10;&#10; @author Joe Polastre&#10; @author David Gay&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="CC1000CsmaP" loc="53:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000CsmaP.nc" safe="">
      <documentation loc="37:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000CsmaP.nc">
        <short>&#10; A rewrite of the low-power-listening CC1000 radio stack.</short>
        <long>&#10; A rewrite of the low-power-listening CC1000 radio stack.&#10; This file contains the CSMA and low-power listening logic. Actual&#10; packet transmission and reception is in SendReceive.&#10; &#60;p>&#10; This code has some degree of platform-independence, via the&#10; CC1000Control, RSSIADC and SpiByteFifo interfaces which must be provided&#10; by the platform. However, these interfaces may still reflect some&#10; particularities of the mica2 hardware implementation.&#10;&#10; @author Philip Buonadonna&#10; @author Jaein Jeong&#10; @author Joe Polastre&#10; @author David Gay&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="CC1000SendReceiveP" loc="55:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000SendReceiveP.nc" safe="">
      <documentation loc="36:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000SendReceiveP.nc">
        <short>&#10; A rewrite of the low-power-listening CC1000 radio stack.</short>
        <long>&#10; A rewrite of the low-power-listening CC1000 radio stack.&#10; This file contains the send and receive logic for the CC1000 radio.&#10; It does not do any media-access control. It requests the channel&#10; via the ready-to-send event (rts) and starts transmission on reception&#10; of the clear-to-send command (cts). It listens for packets if the&#10; listen() command is called, and stops listening when off() is called.&#10; &#60;p>&#10; This code has some degree of platform-independence, via the&#10; CC1000Control, RSSIADC and SpiByteFifo interfaces which must be provided&#10; by the platform. However, these interfaces may still reflect some&#10; particularities of the mica2 hardware implementation.&#10;&#10; @author Philip Buonadonna&#10; @author Jaein Jeong&#10; @author Joe Polastre&#10; @author David Gay&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="CC1000RssiP" loc="44:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000RssiP.nc" safe="">
      <documentation loc="30:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000RssiP.nc">
        <short>&#10;   RSSI fun.</short>
        <long>&#10;   RSSI fun. It's used for lots of things, and a request to read it&#10;   for one purpose may have to be discarded if conditions change. For&#10;   example, if we've initiated a noise-floor measure, but start &#10;   receiving a packet, we have to:&#60;ul>&#10;   &#60;li>cancel the noise-floor measure (we don't know if the value will&#10;     reflect the received packet or the previous idle state)&#10;   &#60;li>start an RSSI measurement so that we can report signal strength&#10;     to the application&#10;   &#60;/ul>&#60;p>&#10;   This module hides the complexities of cancellation from the rest of&#10;   the stack.&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="CC1000SquelchP" loc="40:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000SquelchP.nc" safe="">
      <documentation loc="31:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000SquelchP.nc">
        <short>&#10; Clear threshold estimation based on RSSI measurements.</short>
        <long>&#10; Clear threshold estimation based on RSSI measurements.&#10;&#10; @author Philip Buonadonna&#10; @author Jaein Jeong&#10; @author Joe Polastre&#10; @author David Gay&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="CC1000ControlP" loc="41:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000ControlP.nc" safe="">
      <documentation loc="32:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000ControlP.nc">
        <short>&#10; This module provides the CONTROL functionality for the Chipcon1000&#10; series radio.</short>
        <long>&#10; This module provides the CONTROL functionality for the Chipcon1000&#10; series radio.  It exports a custom interface to control CC1000&#10; operation.&#10;&#10; @author Philip Buonadonna&#10; @author Jaein Jeong&#10; @author David Gay&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="HplCC1000C" loc="35:/opt/tinyos-2.1.0/tos/platforms/mica2/chips/cc1000/HplCC1000C.nc">
      <documentation loc="30:/opt/tinyos-2.1.0/tos/platforms/mica2/chips/cc1000/HplCC1000C.nc">
        <short>&#10; HPL for the CC1000 radio, for the mica2 platform.</short>
        <long>&#10; HPL for the CC1000 radio, for the mica2 platform.&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplCC1000C.RssiChannel" loc="21(HplCC1000C.RssiChannel):/opt/tinyos-2.1.0/tos/chips/atm128/adc/AdcReadNowClientC.nc">
      <documentation loc="10:/opt/tinyos-2.1.0/tos/chips/atm128/adc/AdcReadNowClientC.nc">
        <short>&#10; Provide, as per TEP101, Resource-based access to the Atmega128 ADC via a&#10; ReadNow interface.</short>
        <long>&#10; Provide, as per TEP101, Resource-based access to the Atmega128 ADC via a&#10; ReadNow interface.  Users of this component must link it to an&#10; implementation of Atm128AdcConfig which provides the ADC parameters&#10; (channel, etc).&#10; &#10; @author David Gay&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AdcReadNowClientC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="WireAdcP" loc="16:/opt/tinyos-2.1.0/tos/chips/atm128/adc/WireAdcP.nc">
      <documentation loc="10:/opt/tinyos-2.1.0/tos/chips/atm128/adc/WireAdcP.nc">
        <short>&#10; Support component for AdcReadClientC and AdcReadNowClientC.</short>
        <long>&#10; Support component for AdcReadClientC and AdcReadNowClientC.&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Atm128AdcC" loc="42:/opt/tinyos-2.1.0/tos/chips/atm128/adc/Atm128AdcC.nc">
      <documentation loc="35:/opt/tinyos-2.1.0/tos/chips/atm128/adc/Atm128AdcC.nc">
        <short>&#10; HAL for the Atmega128 A/D conversion susbsystem.</short>
        <long>&#10; HAL for the Atmega128 A/D conversion susbsystem.&#10;&#10; @author Hu Siquan &#60;husq@xbow.com>&#10; @author David Gay&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Atm128AdcP" loc="62:/opt/tinyos-2.1.0/tos/chips/atm128/adc/Atm128AdcP.nc" safe="">
      <documentation loc="52:/opt/tinyos-2.1.0/tos/chips/atm128/adc/Atm128AdcP.nc">
        <short>&#10; Internal component of the Atmega128 A/D HAL.</short>
        <long>&#10; Internal component of the Atmega128 A/D HAL.&#10;&#10; @author Jason Hill&#10; @author David Gay&#10; @author Philip Levis&#10; @author Phil Buonadonna&#10; @author Hu Siquan &#60;husq@xbow.com>&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="HplAtm128AdcC" loc="35:/opt/tinyos-2.1.0/tos/chips/atm128/adc/HplAtm128AdcC.nc">
      <documentation loc="27:/opt/tinyos-2.1.0/tos/chips/atm128/adc/HplAtm128AdcC.nc">
        <short>&#10; HPL for the Atmega128 A/D conversion susbsystem.</short>
        <long>&#10; HPL for the Atmega128 A/D conversion susbsystem.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author Hu Siquan &#60;husq@xbow.com>&#10; @author David Gay&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplAtm128AdcP" loc="34:/opt/tinyos-2.1.0/tos/chips/atm128/adc/HplAtm128AdcP.nc" safe="">
      <documentation loc="26:/opt/tinyos-2.1.0/tos/chips/atm128/adc/HplAtm128AdcP.nc">
        <short>&#10; HPL for the Atmega128 A/D conversion susbsystem.</short>
        <long>&#10; HPL for the Atmega128 A/D conversion susbsystem.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author Hu Siquan &#60;husq@xbow.com>&#10; @author David Gay&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="Atm128AdcC.AdcArbiter" loc="79(Atm128AdcC.AdcArbiter):/opt/tinyos-2.1.0/tos/system/RoundRobinArbiterC.nc">
      <documentation loc="59:/opt/tinyos-2.1.0/tos/system/RoundRobinArbiterC.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceDefaultOwner&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceDefaultOwner&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource in&#10; a Round Robin fashion.  An array is used to keep track of which users have &#10; put in requests for the resource.  Upon the release of the resource by one&#10; of these users, the array is checked and the next user (in Round Robin order)&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the resource is granted to the default &#10; user.  If a new request is made, the default user will release the resource, &#10; and it will be granted to the requesting cleint.&#10;&#10; @param &#60;b>resourceName&#60;/b> -- The name of the Resource being shared&#10; &#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="RoundRobinArbiterC"/>
        <arguments>
          <value cst="S:atm128adc.resource">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="char" size="I:1" alignment="I:1"></type-int>
            </type-pointer>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="Atm128AdcC.AdcArbiter.Queue" loc="32(Atm128AdcC.AdcArbiter.Queue):/opt/tinyos-2.1.0/tos/system/RoundRobinResourceQueueC.nc">
      <instance number="0">
        <component-ref qname="RoundRobinResourceQueueC"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Atm128AdcC.AdcArbiter.Arbiter" loc="52(Atm128AdcC.AdcArbiter.Arbiter):/opt/tinyos-2.1.0/tos/system/ArbiterP.nc">
      <documentation loc="30:/opt/tinyos-2.1.0/tos/system/ArbiterP.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ResourceRequested, ArbiterInfo, &#10; and ResourceDefaultOwner interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ResourceRequested, ArbiterInfo, &#10; and ResourceDefaultOwner interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource.&#10; A Queue is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the queue is checked and the next user&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the user of the ResourceDefaultOwner&#10; interface gains access to the resource, and holds onto it until&#10; another user makes a request.&#10;&#10; @param &#60;b>default_owner_id&#60;/b> -- The id of the default owner of this &#10;        resource&#10; &#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10; @author Philip Levis&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="ArbiterP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Atm128AdcC.PM" loc="57(Atm128AdcC.PM):/opt/tinyos-2.1.0/tos/lib/power/AsyncStdControlPowerManagerC.nc">
      <documentation loc="31:/opt/tinyos-2.1.0/tos/lib/power/AsyncStdControlPowerManagerC.nc">
        <short>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the internal implementation of the standard power management&#10; policy for managing the power states of non-virtualized devices.</short>
        <long>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the internal implementation of the standard power management&#10; policy for managing the power states of non-virtualized devices.&#10; Non-virtualized devices are shared using a parameterized Resource&#10; interface, and are powered down according to some policy whenever there&#10; are no more pending requests to that Resource.  The policy implemented&#10; by this component is to power down a device as soon as it becomes free.&#10; Such a policy is useful whenever a device has a negligible wake-up&#10; latency.  There is no cost associated with waiting for the device to&#10; power up, so it can be powered on and off as often as possible.&#60;br>&#60;br>&#10;&#10; Powerdown of the device is done through the &#60;code>AsyncStdControl&#60;/code>&#10; interface, so this component can only be used with those devices that&#10; provide that interface.&#60;br>&#60;br>&#10;&#10; For devices providing either the &#60;code>StdControl&#60;/code> or&#10; &#60;code>SplitControl&#60;/code> interfaces, please use either the&#10; &#60;code>StdControlPowerManagerC&#60;/code> component or the&#10; &#60;code>SplitControlPowerManagerC&#60;/code> component respectively.&#10; &#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AsyncStdControlPowerManagerC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="Atm128AdcC.PM.PowerManager" loc="48(Atm128AdcC.PM.PowerManager):/opt/tinyos-2.1.0/tos/lib/power/AsyncPowerManagerP.nc">
      <documentation loc="31:/opt/tinyos-2.1.0/tos/lib/power/AsyncPowerManagerP.nc">
        <short>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the internal implementation of the standard power management&#10; policy for managing the power states of non-virtualized devices.</short>
        <long>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the internal implementation of the standard power management&#10; policy for managing the power states of non-virtualized devices.&#10; Non-virtualized devices are shared using a parameterized Resource&#10; interface, and are powered down according to some policy whenever there&#10; are no more pending requests to that Resource.  The policy implemented&#10; by this component is to power down a device as soon as it becomes free.&#10; Such a policy is useful whenever a device has a negligible wake-up&#10; latency.  There is no cost associated with waiting for the device to&#10; power up, so it can be powered on and off as often as possible.&#10; &#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AsyncPowerManagerP"/>
      </instance>
      <module/>
    </component>
    <component qname="AdcP" loc="46:/opt/tinyos-2.1.0/tos/chips/atm128/adc/AdcP.nc" safe="">
      <documentation loc="39:/opt/tinyos-2.1.0/tos/chips/atm128/adc/AdcP.nc">
        <short>&#10; Convert ATmega128 HAL A/D interface to the HIL interfaces.</short>
        <long>&#10; Convert ATmega128 HAL A/D interface to the HIL interfaces.&#10; @author David Gay&#10; @author Jan Hauer &#60;hauer@tkn.tu-berlin.de>&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="WireAdcP.ArbitrateRead" loc="23(WireAdcP.ArbitrateRead):/opt/tinyos-2.1.0/tos/system/ArbitratedReadC.nc">
      <documentation loc="10:/opt/tinyos-2.1.0/tos/system/ArbitratedReadC.nc">
        <short>&#10; Implement arbitrated access to a Read interface, based on an&#10; underlying arbitrated Resource interface.</short>
        <long>&#10; Implement arbitrated access to a Read interface, based on an&#10; underlying arbitrated Resource interface.&#10;&#10; Note that this code does not deal with unexpected events: it assumes&#10; that all events it receives are in response to commands that it&#10; made. See tos/chips/atm128/adc for an example of using ArbitratedReadC &#10; in a safe way.&#10;&#10; @param width_t Width of the underlying Read interface.&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="ArbitratedReadC"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x4019ad68"/></typename>
          </type-int>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="RandomC" loc="32:/opt/tinyos-2.1.0/tos/system/RandomC.nc">
      <documentation loc="22:/opt/tinyos-2.1.0/tos/system/RandomC.nc">
        <short>&#10; The standard TinyOS random number generator.</short>
        <long>&#10; The standard TinyOS random number generator. If your system requires a &#10; specific random number generator, it should wire to that component&#10; directly. &#10;&#10; @author  Barbara Hohlt &#10; @author  Phil Levis &#10; @date    March 1 2005&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="RandomMlcgC" loc="34:/opt/tinyos-2.1.0/tos/system/RandomMlcgC.nc" safe="">
      <documentation loc="21:/opt/tinyos-2.1.0/tos/system/RandomMlcgC.nc">
        <short> This code is a fast implementation of the Park-Miller Minimal Standard &#10;  Generator for pseudo-random numbers.</short>
        <long> This code is a fast implementation of the Park-Miller Minimal Standard &#10;  Generator for pseudo-random numbers.  It uses the 32 bit multiplicative &#10;  linear congruential generator, &#10;&#10;&#9;&#9;S' = (A x S) mod (2^31 - 1) &#10;&#10;  for A = 16807.&#10;&#10;&#10; @author Barbara Hohlt &#10; @date   March 1 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="CC1000CsmaRadioC.TimerMilliC" loc="36(CC1000CsmaRadioC.TimerMilliC):/opt/tinyos-2.1.0/tos/system/TimerMilliC.nc">
      <documentation loc="25:/opt/tinyos-2.1.0/tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="TimerMilliC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="TimerMilliP" loc="37:/opt/tinyos-2.1.0/tos/system/TimerMilliP.nc">
      <documentation loc="23:/opt/tinyos-2.1.0/tos/system/TimerMilliP.nc">
        <short>&#10; Components should never wire to this component.</short>
        <long>&#10; Components should never wire to this component. This is the&#10; underlying configuration of virtualized millisecond timers. &#10; It auto-wires wires the timer&#10; implementation (TimerC) to the boot sequence and exports the&#10; various Timer interfaces.&#10;&#10; @author Philip Levis&#10; @author Cory Sharp&#10; @date   May 16 2005&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HilTimerMilliC" loc="33:/opt/tinyos-2.1.0/tos/platforms/mica/HilTimerMilliC.nc">
      <documentation loc="23:/opt/tinyos-2.1.0/tos/platforms/mica/HilTimerMilliC.nc">
        <short>&#10; Millisecond timer for the mica family (see TEP102).</short>
        <long>&#10; Millisecond timer for the mica family (see TEP102). The &#34;millisecond&#34;&#10; timer system is built on hardware timer 0, running at 1024Hz.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="AlarmCounterMilliP" loc="25:/opt/tinyos-2.1.0/tos/platforms/mica/AlarmCounterMilliP.nc">
      <documentation loc="11:/opt/tinyos-2.1.0/tos/platforms/mica/AlarmCounterMilliP.nc">
        <short>&#10; Configure hardware timer 0 for use as the mica family's millisecond&#10; timer.</short>
        <long>&#10; Configure hardware timer 0 for use as the mica family's millisecond&#10; timer.  This component does not follow the TEP102 HAL guidelines as&#10; there is only one compare register for timer 0, which is used to&#10; implement HilTimerMilliC. Hence it isn't useful to expose an&#10; AlarmMilliC or CounterMillIC component.&#10; &#10; @author David Gay &#60;dgay@intel-research.net>&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="AlarmCounterMilliP.Atm128AlarmAsyncC" loc="23(AlarmCounterMilliP.Atm128AlarmAsyncC):/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128AlarmAsyncC.nc">
      <documentation loc="11:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128AlarmAsyncC.nc">
        <short>&#10; Build a 32-bit alarm and counter from the atmega128's 8-bit timer 0&#10; in asynchronous mode.</short>
        <long>&#10; Build a 32-bit alarm and counter from the atmega128's 8-bit timer 0&#10; in asynchronous mode. Attempting to use the generic Atm128AlarmC&#10; component and the generic timer components runs into problems&#10; apparently related to letting timer 0 overflow.&#10; &#10; So, instead, this version (inspired by the 1.x code and a remark from&#10; Martin Turon) directly builds a 32-bit alarm and counter on top of timer 0&#10; and never lets timer 0 overflow.&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Atm128AlarmAsyncC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x403189d0"/>
            <typename><typedef-ref name="TMilli" ref="0x40318b98"/></typename>
          </type-tag>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="AlarmCounterMilliP.Atm128AlarmAsyncC.Atm128AlarmAsyncP" loc="23(AlarmCounterMilliP.Atm128AlarmAsyncC.Atm128AlarmAsyncP):/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128AlarmAsyncP.nc">
      <documentation loc="11:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128AlarmAsyncP.nc">
        <short>&#10; Build a 32-bit alarm and counter from the atmega128's 8-bit timer 0&#10; in asynchronous mode.</short>
        <long>&#10; Build a 32-bit alarm and counter from the atmega128's 8-bit timer 0&#10; in asynchronous mode. Attempting to use the generic Atm128AlarmC&#10; component and the generic timer components runs into problems&#10; apparently related to letting timer 0 overflow.&#10; &#10; So, instead, this version (inspired by the 1.x code and a remark from&#10; Martin Turon) directly builds a 32-bit alarm and counter on top of timer 0&#10; and never lets timer 0 overflow.&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Atm128AlarmAsyncP"/>
        <arguments>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision" scoped="" ref="0x40b2c918"/></type-var>
          <value cst="U:">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128Timer0AsyncC" loc="43:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Timer0AsyncC.nc">
      <documentation loc="33:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Timer0AsyncC.nc">
        <short>&#10; Simple wrapper around the actual timer implementation that automatically&#10; wires it to McuSleepC for low-power calculations..</short>
        <long>&#10; Simple wrapper around the actual timer implementation that automatically&#10; wires it to McuSleepC for low-power calculations..&#10;&#10; @author Philip Levis&#10; @author David Gay&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplAtm128Timer0AsyncP" loc="37:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Timer0AsyncP.nc" safe="">
      <documentation loc="25:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Timer0AsyncP.nc">
        <short>&#10; HPL interface to Atmega128 timer 0 in ASYNC mode.</short>
        <long>&#10; HPL interface to Atmega128 timer 0 in ASYNC mode. This is a specialised&#10; HPL component that assumes that timer 0 is used in ASYNC mode and&#10; includes some workarounds for some of the weirdnesses (delayed overflow&#10; interrupt) of that mode.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="HilTimerMilliC.AlarmToTimerC" loc="35(HilTimerMilliC.AlarmToTimerC):/opt/tinyos-2.1.0/tos/lib/timer/AlarmToTimerC.nc">
      <documentation loc="25:/opt/tinyos-2.1.0/tos/lib/timer/AlarmToTimerC.nc">
        <short>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.</short>
        <long>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the Alarm and&#10; Timer being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AlarmToTimerC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x403189d0"/>
            <typename><typedef-ref name="TMilli" ref="0x40318b98"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HilTimerMilliC.VirtualizeTimerC" loc="35(HilTimerMilliC.VirtualizeTimerC):/opt/tinyos-2.1.0/tos/lib/timer/VirtualizeTimerC.nc">
      <documentation loc="23:/opt/tinyos-2.1.0/tos/lib/timer/VirtualizeTimerC.nc">
        <short>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.</short>
        <long>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of the Timer being &#10;   virtualized.&#10; @param max_timers Number of virtual timers to create.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="VirtualizeTimerC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x403189d0"/>
            <typename><typedef-ref name="TMilli" ref="0x40318b98"/></typename>
          </type-tag>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HilTimerMilliC.CounterToLocalTimeC" loc="35(HilTimerMilliC.CounterToLocalTimeC):/opt/tinyos-2.1.0/tos/lib/timer/CounterToLocalTimeC.nc">
      <documentation loc="25:/opt/tinyos-2.1.0/tos/lib/timer/CounterToLocalTimeC.nc">
        <short>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.</short>
        <long>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the LocalTime and&#10; Counter being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="CounterToLocalTimeC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x403189d0"/>
            <typename><typedef-ref name="TMilli" ref="0x40318b98"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="ActiveMessageAddressC" loc="41:/opt/tinyos-2.1.0/tos/system/ActiveMessageAddressC.nc" safe="">
      <documentation loc="34:/opt/tinyos-2.1.0/tos/system/ActiveMessageAddressC.nc">
        <short>&#10; Component that stores the node's active message address and group ID.</short>
        <long>&#10; Component that stores the node's active message address and group ID.&#10;&#10; @author Philip Levis&#10; @author David Moss&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="BusyWaitMicroC" loc="38:/opt/tinyos-2.1.0/tos/platforms/mica/BusyWaitMicroC.nc" safe="">
      <documentation loc="29:/opt/tinyos-2.1.0/tos/platforms/mica/BusyWaitMicroC.nc">
        <short>&#10; Busy wait component as per TEP102.</short>
        <long>&#10; Busy wait component as per TEP102. Supports waiting for at least some&#10; number of microseconds. This functionality should be used sparingly,&#10; when the overhead of posting a Timer or Alarm is greater than simply&#10; busy waiting.&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="proj1AppC.LclTime" loc="36(proj1AppC.LclTime):/opt/tinyos-2.1.0/tos/system/TimerMilliC.nc">
      <documentation loc="25:/opt/tinyos-2.1.0/tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="TimerMilliC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="proj1AppC.PeriodTimer" loc="36(proj1AppC.PeriodTimer):/opt/tinyos-2.1.0/tos/system/TimerMilliC.nc">
      <documentation loc="25:/opt/tinyos-2.1.0/tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="TimerMilliC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="proj1AppC.QTimer" loc="36(proj1AppC.QTimer):/opt/tinyos-2.1.0/tos/system/TimerMilliC.nc">
      <documentation loc="25:/opt/tinyos-2.1.0/tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <instance number="3">
        <component-ref qname="TimerMilliC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="proj1AppC.PktTimer" loc="36(proj1AppC.PktTimer):/opt/tinyos-2.1.0/tos/system/TimerMilliC.nc">
      <documentation loc="25:/opt/tinyos-2.1.0/tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <instance number="4">
        <component-ref qname="TimerMilliC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="proj1AppC.Sensor" loc="16(proj1AppC.Sensor):/opt/tinyos-2.1.0/tos/platforms/mica2/DemoSensorC.nc">
      <documentation loc="10:/opt/tinyos-2.1.0/tos/platforms/mica2/DemoSensorC.nc">
        <short>&#10; Demo sensor for the mica2 platform.</short>
        <long>&#10; Demo sensor for the mica2 platform.&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="DemoSensorC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="proj1AppC.Sensor.Sensor" loc="29(proj1AppC.Sensor.Sensor):/opt/tinyos-2.1.0/tos/platforms/mica/VoltageC.nc">
      <documentation loc="21:/opt/tinyos-2.1.0/tos/platforms/mica/VoltageC.nc">
        <short>&#10; Battery Voltage.</short>
        <long>&#10; Battery Voltage. The returned value represents the difference&#10; between the battery voltage and V_BG (1.23V). The formula to convert&#10; it to mV is: 1223 * 1024 / value.&#10;&#10; @author Razvan Musaloiu-E.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="VoltageC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="proj1AppC.Sensor.Sensor.AdcReadClientC" loc="21(proj1AppC.Sensor.Sensor.AdcReadClientC):/opt/tinyos-2.1.0/tos/chips/atm128/adc/AdcReadClientC.nc">
      <documentation loc="10:/opt/tinyos-2.1.0/tos/chips/atm128/adc/AdcReadClientC.nc">
        <short>&#10; Provide, as per TEP101, arbitrated access via a Read interface to the&#10; Atmega128 ADC.</short>
        <long>&#10; Provide, as per TEP101, arbitrated access via a Read interface to the&#10; Atmega128 ADC.  Users of this component must link it to an&#10; implementation of Atm128AdcConfig which provides the ADC parameters&#10; (channel, etc).&#10; &#10; @author David Gay&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AdcReadClientC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="VoltageP" loc="28:/opt/tinyos-2.1.0/tos/platforms/mica/VoltageP.nc">
      <documentation loc="21:/opt/tinyos-2.1.0/tos/platforms/mica/VoltageP.nc">
        <short>&#10; Battery Voltage.</short>
        <long>&#10; Battery Voltage. The returned value represents the difference&#10; between the battery voltage and V_BG (1.23V). The formula to convert&#10; it to mV is: 1223 * 1024 / value.&#10;&#10; @author Razvan Musaloiu-E.&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="proj1AppC.AMSenderC" loc="39(proj1AppC.AMSenderC):/opt/tinyos-2.1.0/tos/system/AMSenderC.nc">
      <documentation loc="25:/opt/tinyos-2.1.0/tos/system/AMSenderC.nc">
        <short>&#10; The virtualized active message send abstraction.</short>
        <long>&#10; The virtualized active message send abstraction. Each instantiation&#10; of AMSenderC has its own queue of depth one. Therefore, it does not&#10; have to contend with other AMSenderC instantiations for queue space.&#10; The underlying implementation schedules the packets in these queues&#10; using some form of fair-share queueing.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AMSenderC"/>
        <arguments>
          <value cst="I:16">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="proj1AppC.AMSenderC.AMQueueEntryP" loc="35(proj1AppC.AMSenderC.AMQueueEntryP):/opt/tinyos-2.1.0/tos/system/AMQueueEntryP.nc">
      <documentation loc="25:/opt/tinyos-2.1.0/tos/system/AMQueueEntryP.nc">
        <short>&#10; Internal AM component that fills in needed packet fields for the &#10; AMSend -> Send transformation.</short>
        <long>&#10; Internal AM component that fills in needed packet fields for the &#10; AMSend -> Send transformation.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="AMQueueEntryP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_id_t" ref="0x4039b8b0"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="AMQueueP" loc="34:/opt/tinyos-2.1.0/tos/system/AMQueueP.nc">
      <documentation loc="25:/opt/tinyos-2.1.0/tos/system/AMQueueP.nc">
        <short>&#10; The fair-share send queue for AM radio communication.</short>
        <long>&#10; The fair-share send queue for AM radio communication.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="AMQueueP.AMQueueImplP" loc="37(AMQueueP.AMQueueImplP):/opt/tinyos-2.1.0/tos/system/AMQueueImplP.nc">
      <documentation loc="25:/opt/tinyos-2.1.0/tos/system/AMQueueImplP.nc">
        <short>&#10; An AM send queue that provides a Service Instance pattern for&#10; formatted packets and calls an underlying AMSend in a round-robin&#10; fashion.</short>
        <long>&#10; An AM send queue that provides a Service Instance pattern for&#10; formatted packets and calls an underlying AMSend in a round-robin&#10; fashion. Used to share L2 bandwidth between different communication&#10; clients.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="AMQueueImplP"/>
        <arguments>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="proj1AppC.AMReceiverC" loc="35(proj1AppC.AMReceiverC):/opt/tinyos-2.1.0/tos/system/AMReceiverC.nc">
      <documentation loc="25:/opt/tinyos-2.1.0/tos/system/AMReceiverC.nc">
        <short>&#10; The virtualized AM reception abstraction.</short>
        <long>&#10; The virtualized AM reception abstraction.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AMReceiverC"/>
        <arguments>
          <value cst="I:16">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOPortP" loc="31:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc" abstract="">
      <documentation loc="25:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
        <short>&#10; Generic component to expose a full 8-bit port of GPIO pins.</short>
        <long>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <parameters>
        <constant name="port_addr" ref="0x404d1688" loc="31:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
          <component-ref qname="HplAtm128GeneralIOPortP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
          </type-int>
        </constant>
        <constant name="ddr_addr" ref="0x404d18a0" loc="31:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
          <component-ref qname="HplAtm128GeneralIOPortP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
          </type-int>
        </constant>
        <constant name="pin_addr" ref="0x404d1ab8" loc="31:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
          <component-ref qname="HplAtm128GeneralIOPortP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
          </type-int>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOPinP" loc="32:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc" abstract="" safe="">
      <documentation loc="25:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <parameters>
        <constant name="port_addr" ref="0x404d7ae0" loc="32:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
          <component-ref qname="HplAtm128GeneralIOPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
          </type-int>
        </constant>
        <constant name="ddr_addr" ref="0x404d7d08" loc="33:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
          <component-ref qname="HplAtm128GeneralIOPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
          </type-int>
        </constant>
        <constant name="pin_addr" ref="0x404e2010" loc="34:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
          <component-ref qname="HplAtm128GeneralIOPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
          </type-int>
        </constant>
        <constant name="bit" ref="0x404e2200" loc="35:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
          <component-ref qname="HplAtm128GeneralIOPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOSlowPinP" loc="33:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc" abstract="" safe="">
      <documentation loc="25:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <parameters>
        <constant name="port_addr" ref="0x4052bd58" loc="33:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
          <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
          </type-int>
        </constant>
        <constant name="ddr_addr" ref="0x40528010" loc="34:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
          <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
          </type-int>
        </constant>
        <constant name="pin_addr" ref="0x40528238" loc="35:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
          <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
          </type-int>
        </constant>
        <constant name="bit" ref="0x40528428" loc="36:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
          <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="SerialActiveMessageP" loc="34:/opt/tinyos-2.1.0/tos/lib/serial/SerialActiveMessageP.nc" abstract="">
      <documentation loc="60:/opt/tinyos-2.1.0/tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="SerialDispatcherP" loc="37:/opt/tinyos-2.1.0/tos/lib/serial/SerialDispatcherP.nc" abstract="">
      <documentation loc="60:/opt/tinyos-2.1.0/tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="Atm128UartP" loc="46:/opt/tinyos-2.1.0/tos/chips/atm128/Atm128UartP.nc" abstract="" safe="">
      <documentation loc="32:/opt/tinyos-2.1.0/tos/chips/atm128/Atm128UartP.nc">
        <short>&#10; </short>
        <long>&#10; @author Alec Woo &#60;awoo@archrock.com>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @author Philip Levis &#60;pal@cs.stanford.edu> (maintainer)&#10; @version $Revision: 1.7 $ $Date: 2008/06/23 20:25:15 $&#10;&#10; Modification @ 11/27 (pal): Folded in Alec's reimplementation&#10; from the -devel branch. Fixed bug in RX interrupts, where&#10; they were not enabled on start. Possibly due to alternative&#10; ARC TEP113 implementation that uses UartStream?&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="Atm128TimerInitC" loc="35:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128TimerInitC.nc" abstract="" safe="">
      <documentation loc="25:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128TimerInitC.nc">
        <short>&#10; Initialise an Atmega128 timer to a particular prescaler.</short>
        <long>&#10; Initialise an Atmega128 timer to a particular prescaler. Expected to be&#10; used at boot time.&#10; @param timer_size Integer type of the timer&#10; @param prescaler Desired prescaler value&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;david.e.gay@intel.com>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="timer_size" ref="0x407b4148" loc="35:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128TimerInitC.nc">
          <component-ref qname="Atm128TimerInitC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="timer_size" scoped="" ref="0x407b4148"/></type-var>
        </typedef>
        <constant name="prescaler" ref="0x407b4368" loc="35:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128TimerInitC.nc">
          <component-ref qname="Atm128TimerInitC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="Atm128CounterC" loc="33:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128CounterC.nc" abstract="" safe="">
      <documentation loc="25:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128CounterC.nc">
        <short>&#10; Build a TEP102 Counter from an Atmega128 hardware timer.</short>
        <long>&#10; Build a TEP102 Counter from an Atmega128 hardware timer.&#10; @param frequency_tag The frequency tag for this Counter&#10; @param timer_size The width of this Counter&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="frequency_tag" ref="0x407b9cf8" loc="33:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128CounterC.nc">
          <component-ref qname="Atm128CounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="frequency_tag" scoped="" ref="0x407b9cf8"/></type-var>
        </typedef>
        <typedef name="timer_size" ref="0x407c3168" loc="34:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128CounterC.nc">
          <component-ref qname="Atm128CounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="timer_size" scoped="" ref="0x407c3168"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="TransformCounterC" loc="43:/opt/tinyos-2.1.0/tos/lib/timer/TransformCounterC.nc" abstract="" safe="">
      <documentation loc="23:/opt/tinyos-2.1.0/tos/lib/timer/TransformCounterC.nc">
        <short>&#10; TransformCounterC decreases precision and/or widens an Counter.</short>
        <long>&#10; TransformCounterC decreases precision and/or widens an Counter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param to_precision_tag A type indicating the precision of the transformed&#10;   Counter.&#10; @param to_size_type The type for the width of the transformed Counter.&#10; @param from_precision_tag A type indicating the precision of the original&#10;   Counter.&#10; @param from_size_type The type for the width of the original Counter.&#10; @param bit_shift_right Original time units will be 2 to the power &#10;   &#60;code>bit_shift_right&#60;/code> larger than transformed time units.&#10; @param upper_count_type A type large enough to store the upper bits --&#10;   those needed above from_size_type after its shift right to fill&#10;   to_size_type.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="to_precision_tag" ref="0x407cf158" loc="44:/opt/tinyos-2.1.0/tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="to_precision_tag" scoped="" ref="0x407cf158"/></type-var>
        </typedef>
        <typedef name="to_size_type" ref="0x407cf5b8" loc="45:/opt/tinyos-2.1.0/tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="to_size_type" scoped="" ref="0x407cf5b8"/></type-var>
        </typedef>
        <typedef name="from_precision_tag" ref="0x407cf820" loc="46:/opt/tinyos-2.1.0/tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="from_precision_tag" scoped="" ref="0x407cf820"/></type-var>
        </typedef>
        <typedef name="from_size_type" ref="0x407cfc90" loc="47:/opt/tinyos-2.1.0/tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="from_size_type" scoped="" ref="0x407cfc90"/></type-var>
        </typedef>
        <constant name="bit_shift_right" ref="0x407cfef8" loc="48:/opt/tinyos-2.1.0/tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
          </type-int>
        </constant>
        <typedef name="upper_count_type" ref="0x407ce3a8" loc="49:/opt/tinyos-2.1.0/tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="upper_count_type" scoped="" ref="0x407ce3a8"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="SerialAMSenderC" loc="39:/opt/tinyos-2.1.0/tos/lib/serial/SerialAMSenderC.nc" abstract="">
      <documentation loc="60:/opt/tinyos-2.1.0/tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <parameters>
        <constant name="AMId" ref="0x407e6010" loc="39:/opt/tinyos-2.1.0/tos/lib/serial/SerialAMSenderC.nc">
          <component-ref qname="SerialAMSenderC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_id_t" ref="0x4039b8b0"/></typename>
          </type-int>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="AMQueueEntryP" loc="35:/opt/tinyos-2.1.0/tos/system/AMQueueEntryP.nc" abstract="" safe="">
      <documentation loc="25:/opt/tinyos-2.1.0/tos/system/AMQueueEntryP.nc">
        <short>&#10; Internal AM component that fills in needed packet fields for the &#10; AMSend -> Send transformation.</short>
        <long>&#10; Internal AM component that fills in needed packet fields for the &#10; AMSend -> Send transformation.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10;</long>
      </documentation>
      <parameters>
        <constant name="amId" ref="0x407feae0" loc="35:/opt/tinyos-2.1.0/tos/system/AMQueueEntryP.nc">
          <component-ref qname="AMQueueEntryP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_id_t" ref="0x4039b8b0"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="AMQueueImplP" loc="37:/opt/tinyos-2.1.0/tos/system/AMQueueImplP.nc" abstract="" safe="">
      <documentation loc="25:/opt/tinyos-2.1.0/tos/system/AMQueueImplP.nc">
        <short>&#10; An AM send queue that provides a Service Instance pattern for&#10; formatted packets and calls an underlying AMSend in a round-robin&#10; fashion.</short>
        <long>&#10; An AM send queue that provides a Service Instance pattern for&#10; formatted packets and calls an underlying AMSend in a round-robin&#10; fashion. Used to share L2 bandwidth between different communication&#10; clients.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10;</long>
      </documentation>
      <parameters>
        <constant name="numClients" ref="0x40805340" loc="37:/opt/tinyos-2.1.0/tos/system/AMQueueImplP.nc">
          <component-ref qname="AMQueueImplP"/>
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="QueueC" loc="42:/opt/tinyos-2.1.0/tos/system/QueueC.nc" abstract="">
      <documentation loc="33:/opt/tinyos-2.1.0/tos/system/QueueC.nc">
        <short>&#10;  A general FIFO queue component, whose queue has a bounded size.</short>
        <long>&#10;  A general FIFO queue component, whose queue has a bounded size.&#10;&#10;  @author Philip Levis&#10;  @author Geoffrey Mainland&#10;  @date   $Date: 2008/05/31 20:27:07 $&#10;</long>
      </documentation>
      <parameters>
        <typedef name="queue_t" ref="0x4082a520" loc="42:/opt/tinyos-2.1.0/tos/system/QueueC.nc">
          <component-ref qname="QueueC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="queue_t" scoped="" ref="0x4082a520"/></type-var>
        </typedef>
        <constant name="QUEUE_SIZE" ref="0x4082a748" loc="42:/opt/tinyos-2.1.0/tos/system/QueueC.nc">
          <component-ref qname="QueueC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="AdcReadNowClientC" loc="21:/opt/tinyos-2.1.0/tos/chips/atm128/adc/AdcReadNowClientC.nc" abstract="">
      <documentation loc="10:/opt/tinyos-2.1.0/tos/chips/atm128/adc/AdcReadNowClientC.nc">
        <short>&#10; Provide, as per TEP101, Resource-based access to the Atmega128 ADC via a&#10; ReadNow interface.</short>
        <long>&#10; Provide, as per TEP101, Resource-based access to the Atmega128 ADC via a&#10; ReadNow interface.  Users of this component must link it to an&#10; implementation of Atm128AdcConfig which provides the ADC parameters&#10; (channel, etc).&#10; &#10; @author David Gay&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="RoundRobinArbiterC" loc="79:/opt/tinyos-2.1.0/tos/system/RoundRobinArbiterC.nc" abstract="">
      <documentation loc="59:/opt/tinyos-2.1.0/tos/system/RoundRobinArbiterC.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceDefaultOwner&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceDefaultOwner&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource in&#10; a Round Robin fashion.  An array is used to keep track of which users have &#10; put in requests for the resource.  Upon the release of the resource by one&#10; of these users, the array is checked and the next user (in Round Robin order)&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the resource is granted to the default &#10; user.  If a new request is made, the default user will release the resource, &#10; and it will be granted to the requesting cleint.&#10;&#10; @param &#60;b>resourceName&#60;/b> -- The name of the Resource being shared&#10; &#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10;</long>
      </documentation>
      <parameters>
        <constant name="resourceName" ref="0x40a824f0" loc="79:/opt/tinyos-2.1.0/tos/system/RoundRobinArbiterC.nc">
          <component-ref qname="RoundRobinArbiterC"/>
          <type-pointer size="I:2" alignment="I:1">
            <type-int cname="char" size="I:1" alignment="I:1"></type-int>
          </type-pointer>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="RoundRobinResourceQueueC" loc="32:/opt/tinyos-2.1.0/tos/system/RoundRobinResourceQueueC.nc" abstract="" safe="">
      <parameters>
        <constant name="size" ref="0x40a7fb10" loc="32:/opt/tinyos-2.1.0/tos/system/RoundRobinResourceQueueC.nc">
          <component-ref qname="RoundRobinResourceQueueC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="ArbiterP" loc="52:/opt/tinyos-2.1.0/tos/system/ArbiterP.nc" abstract="" safe="">
      <documentation loc="30:/opt/tinyos-2.1.0/tos/system/ArbiterP.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ResourceRequested, ArbiterInfo, &#10; and ResourceDefaultOwner interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ResourceRequested, ArbiterInfo, &#10; and ResourceDefaultOwner interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource.&#10; A Queue is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the queue is checked and the next user&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the user of the ResourceDefaultOwner&#10; interface gains access to the resource, and holds onto it until&#10; another user makes a request.&#10;&#10; @param &#60;b>default_owner_id&#60;/b> -- The id of the default owner of this &#10;        resource&#10; &#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10; @author Philip Levis&#10;</long>
      </documentation>
      <parameters>
        <constant name="default_owner_id" ref="0x40a8b130" loc="52:/opt/tinyos-2.1.0/tos/system/ArbiterP.nc">
          <component-ref qname="ArbiterP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="AsyncStdControlPowerManagerC" loc="57:/opt/tinyos-2.1.0/tos/lib/power/AsyncStdControlPowerManagerC.nc" abstract="">
      <documentation loc="31:/opt/tinyos-2.1.0/tos/lib/power/AsyncStdControlPowerManagerC.nc">
        <short>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the internal implementation of the standard power management&#10; policy for managing the power states of non-virtualized devices.</short>
        <long>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the internal implementation of the standard power management&#10; policy for managing the power states of non-virtualized devices.&#10; Non-virtualized devices are shared using a parameterized Resource&#10; interface, and are powered down according to some policy whenever there&#10; are no more pending requests to that Resource.  The policy implemented&#10; by this component is to power down a device as soon as it becomes free.&#10; Such a policy is useful whenever a device has a negligible wake-up&#10; latency.  There is no cost associated with waiting for the device to&#10; power up, so it can be powered on and off as often as possible.&#60;br>&#60;br>&#10;&#10; Powerdown of the device is done through the &#60;code>AsyncStdControl&#60;/code>&#10; interface, so this component can only be used with those devices that&#10; provide that interface.&#60;br>&#60;br>&#10;&#10; For devices providing either the &#60;code>StdControl&#60;/code> or&#10; &#60;code>SplitControl&#60;/code> interfaces, please use either the&#10; &#60;code>StdControlPowerManagerC&#60;/code> component or the&#10; &#60;code>SplitControlPowerManagerC&#60;/code> component respectively.&#10; &#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="AsyncPowerManagerP" loc="48:/opt/tinyos-2.1.0/tos/lib/power/AsyncPowerManagerP.nc" abstract="" safe="">
      <documentation loc="31:/opt/tinyos-2.1.0/tos/lib/power/AsyncPowerManagerP.nc">
        <short>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the internal implementation of the standard power management&#10; policy for managing the power states of non-virtualized devices.</short>
        <long>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the internal implementation of the standard power management&#10; policy for managing the power states of non-virtualized devices.&#10; Non-virtualized devices are shared using a parameterized Resource&#10; interface, and are powered down according to some policy whenever there&#10; are no more pending requests to that Resource.  The policy implemented&#10; by this component is to power down a device as soon as it becomes free.&#10; Such a policy is useful whenever a device has a negligible wake-up&#10; latency.  There is no cost associated with waiting for the device to&#10; power up, so it can be powered on and off as often as possible.&#10; &#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="ArbitratedReadC" loc="23:/opt/tinyos-2.1.0/tos/system/ArbitratedReadC.nc" abstract="" safe="">
      <documentation loc="10:/opt/tinyos-2.1.0/tos/system/ArbitratedReadC.nc">
        <short>&#10; Implement arbitrated access to a Read interface, based on an&#10; underlying arbitrated Resource interface.</short>
        <long>&#10; Implement arbitrated access to a Read interface, based on an&#10; underlying arbitrated Resource interface.&#10;&#10; Note that this code does not deal with unexpected events: it assumes&#10; that all events it receives are in response to commands that it&#10; made. See tos/chips/atm128/adc for an example of using ArbitratedReadC &#10; in a safe way.&#10;&#10; @param width_t Width of the underlying Read interface.&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <parameters>
        <typedef name="width_t" ref="0x40ac1938" loc="23:/opt/tinyos-2.1.0/tos/system/ArbitratedReadC.nc">
          <component-ref qname="ArbitratedReadC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="width_t" scoped="" ref="0x40ac1938"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="TimerMilliC" loc="36:/opt/tinyos-2.1.0/tos/system/TimerMilliC.nc" abstract="">
      <documentation loc="25:/opt/tinyos-2.1.0/tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="Atm128AlarmAsyncC" loc="23:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128AlarmAsyncC.nc" abstract="">
      <documentation loc="11:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128AlarmAsyncC.nc">
        <short>&#10; Build a 32-bit alarm and counter from the atmega128's 8-bit timer 0&#10; in asynchronous mode.</short>
        <long>&#10; Build a 32-bit alarm and counter from the atmega128's 8-bit timer 0&#10; in asynchronous mode. Attempting to use the generic Atm128AlarmC&#10; component and the generic timer components runs into problems&#10; apparently related to letting timer 0 overflow.&#10; &#10; So, instead, this version (inspired by the 1.x code and a remark from&#10; Martin Turon) directly builds a 32-bit alarm and counter on top of timer 0&#10; and never lets timer 0 overflow.&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision" ref="0x40b2c918" loc="23:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128AlarmAsyncC.nc">
          <component-ref qname="Atm128AlarmAsyncC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision" scoped="" ref="0x40b2c918"/></type-var>
        </typedef>
        <constant name="divider" ref="0x40b2cad8" loc="23:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128AlarmAsyncC.nc">
          <component-ref qname="Atm128AlarmAsyncC"/>
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="Atm128AlarmAsyncP" loc="23:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128AlarmAsyncP.nc" abstract="" safe="">
      <documentation loc="11:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128AlarmAsyncP.nc">
        <short>&#10; Build a 32-bit alarm and counter from the atmega128's 8-bit timer 0&#10; in asynchronous mode.</short>
        <long>&#10; Build a 32-bit alarm and counter from the atmega128's 8-bit timer 0&#10; in asynchronous mode. Attempting to use the generic Atm128AlarmC&#10; component and the generic timer components runs into problems&#10; apparently related to letting timer 0 overflow.&#10; &#10; So, instead, this version (inspired by the 1.x code and a remark from&#10; Martin Turon) directly builds a 32-bit alarm and counter on top of timer 0&#10; and never lets timer 0 overflow.&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision" ref="0x40b25bf8" loc="23:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128AlarmAsyncP.nc">
          <component-ref qname="Atm128AlarmAsyncP"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision" scoped="" ref="0x40b25bf8"/></type-var>
        </typedef>
        <constant name="divider" ref="0x40b25db8" loc="23:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128AlarmAsyncP.nc">
          <component-ref qname="Atm128AlarmAsyncP"/>
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="AlarmToTimerC" loc="35:/opt/tinyos-2.1.0/tos/lib/timer/AlarmToTimerC.nc" abstract="" safe="">
      <documentation loc="25:/opt/tinyos-2.1.0/tos/lib/timer/AlarmToTimerC.nc">
        <short>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.</short>
        <long>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the Alarm and&#10; Timer being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x40b0d9c8" loc="35:/opt/tinyos-2.1.0/tos/lib/timer/AlarmToTimerC.nc">
          <component-ref qname="AlarmToTimerC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x40b0d9c8"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="VirtualizeTimerC" loc="35:/opt/tinyos-2.1.0/tos/lib/timer/VirtualizeTimerC.nc" abstract="" safe="">
      <documentation loc="23:/opt/tinyos-2.1.0/tos/lib/timer/VirtualizeTimerC.nc">
        <short>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.</short>
        <long>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of the Timer being &#10;   virtualized.&#10; @param max_timers Number of virtual timers to create.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x40bcd010" loc="35:/opt/tinyos-2.1.0/tos/lib/timer/VirtualizeTimerC.nc">
          <component-ref qname="VirtualizeTimerC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x40bcd010"/></type-var>
        </typedef>
        <constant name="max_timers" ref="0x40bcd1f0" loc="35:/opt/tinyos-2.1.0/tos/lib/timer/VirtualizeTimerC.nc">
          <component-ref qname="VirtualizeTimerC"/>
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="CounterToLocalTimeC" loc="35:/opt/tinyos-2.1.0/tos/lib/timer/CounterToLocalTimeC.nc" abstract="" safe="">
      <documentation loc="25:/opt/tinyos-2.1.0/tos/lib/timer/CounterToLocalTimeC.nc">
        <short>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.</short>
        <long>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the LocalTime and&#10; Counter being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x40bf6840" loc="35:/opt/tinyos-2.1.0/tos/lib/timer/CounterToLocalTimeC.nc">
          <component-ref qname="CounterToLocalTimeC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x40bf6840"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="DemoSensorC" loc="16:/opt/tinyos-2.1.0/tos/platforms/mica2/DemoSensorC.nc" abstract="">
      <documentation loc="10:/opt/tinyos-2.1.0/tos/platforms/mica2/DemoSensorC.nc">
        <short>&#10; Demo sensor for the mica2 platform.</short>
        <long>&#10; Demo sensor for the mica2 platform.&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="VoltageC" loc="29:/opt/tinyos-2.1.0/tos/platforms/mica/VoltageC.nc" abstract="">
      <documentation loc="21:/opt/tinyos-2.1.0/tos/platforms/mica/VoltageC.nc">
        <short>&#10; Battery Voltage.</short>
        <long>&#10; Battery Voltage. The returned value represents the difference&#10; between the battery voltage and V_BG (1.23V). The formula to convert&#10; it to mV is: 1223 * 1024 / value.&#10;&#10; @author Razvan Musaloiu-E.&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="AdcReadClientC" loc="21:/opt/tinyos-2.1.0/tos/chips/atm128/adc/AdcReadClientC.nc" abstract="">
      <documentation loc="10:/opt/tinyos-2.1.0/tos/chips/atm128/adc/AdcReadClientC.nc">
        <short>&#10; Provide, as per TEP101, arbitrated access via a Read interface to the&#10; Atmega128 ADC.</short>
        <long>&#10; Provide, as per TEP101, arbitrated access via a Read interface to the&#10; Atmega128 ADC.  Users of this component must link it to an&#10; implementation of Atm128AdcConfig which provides the ADC parameters&#10; (channel, etc).&#10; &#10; @author David Gay&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="AMSenderC" loc="39:/opt/tinyos-2.1.0/tos/system/AMSenderC.nc" abstract="">
      <documentation loc="25:/opt/tinyos-2.1.0/tos/system/AMSenderC.nc">
        <short>&#10; The virtualized active message send abstraction.</short>
        <long>&#10; The virtualized active message send abstraction. Each instantiation&#10; of AMSenderC has its own queue of depth one. Therefore, it does not&#10; have to contend with other AMSenderC instantiations for queue space.&#10; The underlying implementation schedules the packets in these queues&#10; using some form of fair-share queueing.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <parameters>
        <constant name="AMId" ref="0x40c2f2b0" loc="39:/opt/tinyos-2.1.0/tos/system/AMSenderC.nc">
          <component-ref qname="AMSenderC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_id_t" ref="0x4039b8b0"/></typename>
          </type-int>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="AMReceiverC" loc="35:/opt/tinyos-2.1.0/tos/system/AMReceiverC.nc" abstract="">
      <documentation loc="25:/opt/tinyos-2.1.0/tos/system/AMReceiverC.nc">
        <short>&#10; The virtualized AM reception abstraction.</short>
        <long>&#10; The virtualized AM reception abstraction.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <parameters>
        <constant name="amId" ref="0x40c49600" loc="35:/opt/tinyos-2.1.0/tos/system/AMReceiverC.nc">
          <component-ref qname="AMReceiverC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_id_t" ref="0x4039b8b0"/></typename>
          </type-int>
        </constant>
      </parameters>
      <configuration/>
    </component>
  </components>
  <interfaces>
    <interface provided="0" name="Boot" ref="0x403b3068" loc="56:proj1C.nc">
      <component-ref qname="proj1C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Boot" scoped="" ref="0x403b3068"/></type-interface>
      <instance>
        <interfacedef-ref qname="Boot"/>
      </instance>
      <interface-functions>
        <function-ref name="booted" scoped="" ref="0x403b3240"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="LclTime" ref="0x403ce770" loc="62:proj1C.nc">
      <component-ref qname="proj1C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LclTime" scoped="" ref="0x403ce770"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x403189d0"/>
            <typename><typedef-ref name="TMilli" ref="0x40318b98"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x403d7330"/>
        <function-ref name="fired" scoped="" ref="0x403cb520"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x403cbc28"/>
        <function-ref name="isOneShot" scoped="" ref="0x403cb9d0"/>
        <function-ref name="getdt" scoped="" ref="0x403d77e0"/>
        <function-ref name="gett0" scoped="" ref="0x403d7588"/>
        <function-ref name="isRunning" scoped="" ref="0x403cb778"/>
        <function-ref name="startPeriodic" scoped="" ref="0x403ced98"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x403d7010"/>
        <function-ref name="startOneShot" scoped="" ref="0x403cb048"/>
        <function-ref name="stop" scoped="" ref="0x403cb2c8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Packet" ref="0x403b59d0" loc="58:proj1C.nc">
      <component-ref qname="proj1C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0x403b59d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x403b5ba8"/>
        <function-ref name="payloadLength" scoped="" ref="0x403b5c88"/>
        <function-ref name="getPayload" scoped="" ref="0x403b5d68"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x403b5e48"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x403b5f28"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AMSend" ref="0x403cc7d0" loc="60:proj1C.nc">
      <component-ref qname="proj1C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMSend" scoped="" ref="0x403cc7d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x403cc9a8"/>
        <function-ref name="getPayload" scoped="" ref="0x403cca88"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x403ccb68"/>
        <function-ref name="cancel" scoped="" ref="0x403ccc48"/>
        <function-ref name="sendDone" scoped="" ref="0x403ccd28"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RadioControl" ref="0x403b04c0" loc="57:proj1C.nc">
      <component-ref qname="proj1C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioControl" scoped="" ref="0x403b04c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x403b0698"/>
        <function-ref name="stopDone" scoped="" ref="0x403b0778"/>
        <function-ref name="start" scoped="" ref="0x403b0858"/>
        <function-ref name="stop" scoped="" ref="0x403b0938"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Read" ref="0x403df8e0" loc="66:proj1C.nc">
      <component-ref qname="proj1C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Read" scoped="" ref="0x403df8e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Read"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x4019ad68"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x403dff08"/>
        <function-ref name="readDone" scoped="" ref="0x403e1180"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Random" ref="0x403f0548" loc="70:proj1C.nc">
      <component-ref qname="proj1C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Random" scoped="" ref="0x403f0548"/></type-interface>
      <instance>
        <interfacedef-ref qname="Random"/>
      </instance>
      <interface-functions>
        <function-ref name="rand16" scoped="" ref="0x403f0720"/>
        <function-ref name="rand32" scoped="" ref="0x403f0800"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ActiveMessageAddress" ref="0x403e9ae8" loc="68:proj1C.nc">
      <component-ref qname="proj1C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ActiveMessageAddress" scoped="" ref="0x403e9ae8"/></type-interface>
      <instance>
        <interfacedef-ref qname="ActiveMessageAddress"/>
      </instance>
      <interface-functions>
        <function-ref name="amAddress" scoped="" ref="0x403e9d40"/>
        <function-ref name="changed" scoped="" ref="0x403e9e20"/>
        <function-ref name="amGroup" scoped="" ref="0x403e9f00"/>
        <function-ref name="setAddress" scoped="" ref="0x403de010"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Receive" ref="0x403c98e8" loc="61:proj1C.nc">
      <component-ref qname="proj1C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0x403c98e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x403c9ac0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PeriodTimer" ref="0x403d7b88" loc="63:proj1C.nc">
      <component-ref qname="proj1C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PeriodTimer" scoped="" ref="0x403d7b88"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x403189d0"/>
            <typename><typedef-ref name="TMilli" ref="0x40318b98"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x403d56a8"/>
        <function-ref name="fired" scoped="" ref="0x403d6938"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x403d5068"/>
        <function-ref name="isOneShot" scoped="" ref="0x403d6de8"/>
        <function-ref name="getdt" scoped="" ref="0x403d5b58"/>
        <function-ref name="gett0" scoped="" ref="0x403d5900"/>
        <function-ref name="isRunning" scoped="" ref="0x403d6b90"/>
        <function-ref name="startPeriodic" scoped="" ref="0x403d61e0"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x403d5388"/>
        <function-ref name="startOneShot" scoped="" ref="0x403d6460"/>
        <function-ref name="stop" scoped="" ref="0x403d66e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Seed" ref="0x403eb010" loc="69:proj1C.nc">
      <component-ref qname="proj1C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Seed" scoped="" ref="0x403eb010"/></type-interface>
      <instance>
        <interfacedef-ref qname="ParameterInit"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x4019ad68"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x403eb638"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x403e2528" loc="67:proj1C.nc">
      <component-ref qname="proj1C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Leds" scoped="" ref="0x403e2528"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x403e2700"/>
        <function-ref name="led0Toggle" scoped="" ref="0x403e27e0"/>
        <function-ref name="led1On" scoped="" ref="0x403e28c0"/>
        <function-ref name="led1Toggle" scoped="" ref="0x403e29a0"/>
        <function-ref name="led2Toggle" scoped="" ref="0x403e2a80"/>
        <function-ref name="get" scoped="" ref="0x403e2b60"/>
        <function-ref name="led1Off" scoped="" ref="0x403e2c40"/>
        <function-ref name="led2Off" scoped="" ref="0x403e0010"/>
        <function-ref name="set" scoped="" ref="0x403e2d20"/>
        <function-ref name="led0On" scoped="" ref="0x403e2e00"/>
        <function-ref name="led2On" scoped="" ref="0x403e2ee0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="QTimer" ref="0x403d5ed0" loc="64:proj1C.nc">
      <component-ref qname="proj1C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="QTimer" scoped="" ref="0x403d5ed0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x403189d0"/>
            <typename><typedef-ref name="TMilli" ref="0x40318b98"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x403dca18"/>
        <function-ref name="fired" scoped="" ref="0x403d3cb0"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x403dc3d8"/>
        <function-ref name="isOneShot" scoped="" ref="0x403dc180"/>
        <function-ref name="getdt" scoped="" ref="0x403dcec8"/>
        <function-ref name="gett0" scoped="" ref="0x403dcc70"/>
        <function-ref name="isRunning" scoped="" ref="0x403d3f08"/>
        <function-ref name="startPeriodic" scoped="" ref="0x403d3558"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x403dc6f8"/>
        <function-ref name="startOneShot" scoped="" ref="0x403d37d8"/>
        <function-ref name="stop" scoped="" ref="0x403d3a58"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AMPacket" ref="0x403c87b0" loc="59:proj1C.nc">
      <component-ref qname="proj1C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0x403c87b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x403c8988"/>
        <function-ref name="source" scoped="" ref="0x403c8a68"/>
        <function-ref name="address" scoped="" ref="0x403c8b48"/>
        <function-ref name="destination" scoped="" ref="0x403c8c28"/>
        <function-ref name="setSource" scoped="" ref="0x403c8d08"/>
        <function-ref name="setDestination" scoped="" ref="0x403c8de8"/>
        <function-ref name="type" scoped="" ref="0x403c8ec8"/>
        <function-ref name="setType" scoped="" ref="0x403b2010"/>
        <function-ref name="isForMe" scoped="" ref="0x403b20f0"/>
        <function-ref name="setGroup" scoped="" ref="0x403b21d0"/>
        <function-ref name="localGroup" scoped="" ref="0x403b22b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PktTimer" ref="0x403db288" loc="65:proj1C.nc">
      <component-ref qname="proj1C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PktTimer" scoped="" ref="0x403db288"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x403189d0"/>
            <typename><typedef-ref name="TMilli" ref="0x40318b98"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x403d9d90"/>
        <function-ref name="fired" scoped="" ref="0x403d9048"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x403d9750"/>
        <function-ref name="isOneShot" scoped="" ref="0x403d94f8"/>
        <function-ref name="getdt" scoped="" ref="0x403d8268"/>
        <function-ref name="gett0" scoped="" ref="0x403d8010"/>
        <function-ref name="isRunning" scoped="" ref="0x403d92a0"/>
        <function-ref name="startPeriodic" scoped="" ref="0x403db8b0"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x403d9a70"/>
        <function-ref name="startOneShot" scoped="" ref="0x403dbb30"/>
        <function-ref name="stop" scoped="" ref="0x403dbdb0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SoftwareInit" ref="0x40434410" loc="47:/opt/tinyos-2.1.0/tos/lib/printf/MainC.nc">
      <component-ref qname="MainC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SoftwareInit" scoped="" ref="0x40434410"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x404345e8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Boot" ref="0x4035a7c8" loc="46:/opt/tinyos-2.1.0/tos/lib/printf/MainC.nc">
      <component-ref qname="MainC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Boot" scoped="" ref="0x4035a7c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Boot"/>
      </instance>
      <interface-functions>
        <function-ref name="booted" scoped="" ref="0x4035a9a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubInit" ref="0x4043aea0" loc="43:/opt/tinyos-2.1.0/tos/platforms/mica/PlatformC.nc">
      <component-ref qname="PlatformC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubInit" scoped="" ref="0x4043aea0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x4043d0c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x40434e08" loc="37:/opt/tinyos-2.1.0/tos/platforms/mica/PlatformC.nc">
      <component-ref qname="PlatformC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x40434e08"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x4043e010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Atm128Calibrate" ref="0x4043a740" loc="41:/opt/tinyos-2.1.0/tos/platforms/mica/PlatformC.nc">
      <component-ref qname="PlatformC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128Calibrate" scoped="" ref="0x4043a740"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128Calibrate"/>
      </instance>
      <interface-functions>
        <function-ref name="baudrateRegister" scoped="" ref="0x4043a918"/>
        <function-ref name="cyclesPerJiffy" scoped="" ref="0x4043a9f8"/>
        <function-ref name="calibrateMicro" scoped="" ref="0x4043aad8"/>
        <function-ref name="actualMicro" scoped="" ref="0x4043abb8"/>
        <function-ref name="adcPrescaler" scoped="" ref="0x4043ac98"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="MoteInit" ref="0x4043dd48" loc="36:/opt/tinyos-2.1.0/tos/platforms/mica/PlatformP.nc">
      <component-ref qname="PlatformP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="MoteInit" scoped="" ref="0x4043dd48"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x4043df20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x4043d968" loc="35:/opt/tinyos-2.1.0/tos/platforms/mica/PlatformP.nc">
      <component-ref qname="PlatformP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x4043d968"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x4043db40"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="MeasureClock" ref="0x40444168" loc="37:/opt/tinyos-2.1.0/tos/platforms/mica/PlatformP.nc">
      <component-ref qname="PlatformP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="MeasureClock" scoped="" ref="0x40444168"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x40444340"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubInit" ref="0x4043c790" loc="18:/opt/tinyos-2.1.0/tos/platforms/mica2/MotePlatformC.nc">
      <component-ref qname="MotePlatformC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubInit" scoped="" ref="0x4043c790"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x4043c968"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PlatformInit" ref="0x4043c3c0" loc="17:/opt/tinyos-2.1.0/tos/platforms/mica2/MotePlatformC.nc">
      <component-ref qname="MotePlatformC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PlatformInit" scoped="" ref="0x4043c3c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x4043c598"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubInit" ref="0x404484a8" loc="19:/opt/tinyos-2.1.0/tos/platforms/mica2/MotePlatformP.nc">
      <component-ref qname="MotePlatformP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubInit" scoped="" ref="0x404484a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x40448680"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SerialIdPin" ref="0x404509e8" loc="18:/opt/tinyos-2.1.0/tos/platforms/mica2/MotePlatformP.nc">
      <component-ref qname="MotePlatformP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SerialIdPin" scoped="" ref="0x404509e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40450bc0"/>
        <function-ref name="isInput" scoped="" ref="0x40450ca0"/>
        <function-ref name="toggle" scoped="" ref="0x40450d80"/>
        <function-ref name="isOutput" scoped="" ref="0x40450e60"/>
        <function-ref name="get" scoped="" ref="0x40448010"/>
        <function-ref name="makeOutput" scoped="" ref="0x404480f0"/>
        <function-ref name="set" scoped="" ref="0x404481d0"/>
        <function-ref name="clr" scoped="" ref="0x404482b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PlatformInit" ref="0x40449338" loc="17:/opt/tinyos-2.1.0/tos/platforms/mica2/MotePlatformP.nc">
      <component-ref qname="MotePlatformP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PlatformInit" scoped="" ref="0x40449338"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x40449510"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PlatformInit" ref="0x4044b488" loc="37:/opt/tinyos-2.1.0/tos/platforms/mica2/chips/cc1000/HplCC1000InitP.nc">
      <component-ref qname="HplCC1000InitP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PlatformInit" scoped="" ref="0x4044b488"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x4044b660"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PCLK" ref="0x40480820" loc="51:/opt/tinyos-2.1.0/tos/platforms/mica2/chips/cc1000/HplCC1000P.nc">
      <component-ref qname="HplCC1000P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PCLK" scoped="" ref="0x40480820"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x404809f8"/>
        <function-ref name="isInput" scoped="" ref="0x40480ad8"/>
        <function-ref name="toggle" scoped="" ref="0x40480bb8"/>
        <function-ref name="isOutput" scoped="" ref="0x40480c98"/>
        <function-ref name="get" scoped="" ref="0x40480d78"/>
        <function-ref name="makeOutput" scoped="" ref="0x40480e58"/>
        <function-ref name="set" scoped="" ref="0x40487010"/>
        <function-ref name="clr" scoped="" ref="0x404870f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CHP_OUT" ref="0x40481428" loc="49:/opt/tinyos-2.1.0/tos/platforms/mica2/chips/cc1000/HplCC1000P.nc">
      <component-ref qname="HplCC1000P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CHP_OUT" scoped="" ref="0x40481428"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40481600"/>
        <function-ref name="isInput" scoped="" ref="0x404816e0"/>
        <function-ref name="toggle" scoped="" ref="0x404817c0"/>
        <function-ref name="isOutput" scoped="" ref="0x404818a0"/>
        <function-ref name="get" scoped="" ref="0x40481980"/>
        <function-ref name="makeOutput" scoped="" ref="0x40481a60"/>
        <function-ref name="set" scoped="" ref="0x40481b40"/>
        <function-ref name="clr" scoped="" ref="0x40481c20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RssiConfig" ref="0x4047cde8" loc="45:/opt/tinyos-2.1.0/tos/platforms/mica2/chips/cc1000/HplCC1000P.nc">
      <component-ref qname="HplCC1000P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RssiConfig" scoped="" ref="0x4047cde8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128AdcConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="getRefVoltage" scoped="" ref="0x40481010"/>
        <function-ref name="getChannel" scoped="" ref="0x404810f0"/>
        <function-ref name="getPrescaler" scoped="" ref="0x404811d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PALE" ref="0x40481e10" loc="50:/opt/tinyos-2.1.0/tos/platforms/mica2/chips/cc1000/HplCC1000P.nc">
      <component-ref qname="HplCC1000P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PALE" scoped="" ref="0x40481e10"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40480010"/>
        <function-ref name="isInput" scoped="" ref="0x404800f0"/>
        <function-ref name="toggle" scoped="" ref="0x404801d0"/>
        <function-ref name="isOutput" scoped="" ref="0x404802b0"/>
        <function-ref name="get" scoped="" ref="0x40480390"/>
        <function-ref name="makeOutput" scoped="" ref="0x40480470"/>
        <function-ref name="set" scoped="" ref="0x40480550"/>
        <function-ref name="clr" scoped="" ref="0x40480630"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PlatformInit" ref="0x404765f8" loc="43:/opt/tinyos-2.1.0/tos/platforms/mica2/chips/cc1000/HplCC1000P.nc">
      <component-ref qname="HplCC1000P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PlatformInit" scoped="" ref="0x404765f8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x404767d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PDATA" ref="0x404872e8" loc="52:/opt/tinyos-2.1.0/tos/platforms/mica2/chips/cc1000/HplCC1000P.nc">
      <component-ref qname="HplCC1000P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PDATA" scoped="" ref="0x404872e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x404874c0"/>
        <function-ref name="isInput" scoped="" ref="0x404875a0"/>
        <function-ref name="toggle" scoped="" ref="0x40487680"/>
        <function-ref name="isOutput" scoped="" ref="0x40487760"/>
        <function-ref name="get" scoped="" ref="0x40487840"/>
        <function-ref name="makeOutput" scoped="" ref="0x40487920"/>
        <function-ref name="set" scoped="" ref="0x40487a00"/>
        <function-ref name="clr" scoped="" ref="0x40487ae0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplCC1000" ref="0x4047d400" loc="44:/opt/tinyos-2.1.0/tos/platforms/mica2/chips/cc1000/HplCC1000P.nc">
      <component-ref qname="HplCC1000P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplCC1000" scoped="" ref="0x4047d400"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplCC1000"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x4047d5d8"/>
        <function-ref name="read" scoped="" ref="0x4047d6b8"/>
        <function-ref name="write" scoped="" ref="0x4047d798"/>
        <function-ref name="getLOCK" scoped="" ref="0x4047d878"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplCC1000Spi" ref="0x40499918" loc="42:/opt/tinyos-2.1.0/tos/platforms/mica2/chips/cc1000/HplCC1000SpiP.nc">
      <component-ref qname="HplCC1000SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplCC1000Spi" scoped="" ref="0x40499918"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplCC1000Spi"/>
      </instance>
      <interface-functions>
        <function-ref name="isBufBusy" scoped="" ref="0x40499af0"/>
        <function-ref name="initSlave" scoped="" ref="0x40499bd0"/>
        <function-ref name="disableIntr" scoped="" ref="0x40499cb0"/>
        <function-ref name="writeByte" scoped="" ref="0x40499d90"/>
        <function-ref name="enableIntr" scoped="" ref="0x40499e70"/>
        <function-ref name="txMode" scoped="" ref="0x4048f010"/>
        <function-ref name="readByte" scoped="" ref="0x4048f0f0"/>
        <function-ref name="rxMode" scoped="" ref="0x4048f1d0"/>
        <function-ref name="dataReady" scoped="" ref="0x4048f2b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SpiSck" ref="0x4048f4f0" loc="45:/opt/tinyos-2.1.0/tos/platforms/mica2/chips/cc1000/HplCC1000SpiP.nc">
      <component-ref qname="HplCC1000SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SpiSck" scoped="" ref="0x4048f4f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4048f6c8"/>
        <function-ref name="isInput" scoped="" ref="0x4048f7a8"/>
        <function-ref name="toggle" scoped="" ref="0x4048f888"/>
        <function-ref name="isOutput" scoped="" ref="0x4048f968"/>
        <function-ref name="get" scoped="" ref="0x4048fa48"/>
        <function-ref name="makeOutput" scoped="" ref="0x4048fb28"/>
        <function-ref name="set" scoped="" ref="0x4048fc08"/>
        <function-ref name="clr" scoped="" ref="0x4048fce8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PlatformInit" ref="0x4044c588" loc="41:/opt/tinyos-2.1.0/tos/platforms/mica2/chips/cc1000/HplCC1000SpiP.nc">
      <component-ref qname="HplCC1000SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PlatformInit" scoped="" ref="0x4044c588"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x4044c760"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SpiMiso" ref="0x4048fef0" loc="46:/opt/tinyos-2.1.0/tos/platforms/mica2/chips/cc1000/HplCC1000SpiP.nc">
      <component-ref qname="HplCC1000SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SpiMiso" scoped="" ref="0x4048fef0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4049c0e0"/>
        <function-ref name="isInput" scoped="" ref="0x4049c1c0"/>
        <function-ref name="toggle" scoped="" ref="0x4049c2a0"/>
        <function-ref name="isOutput" scoped="" ref="0x4049c380"/>
        <function-ref name="get" scoped="" ref="0x4049c460"/>
        <function-ref name="makeOutput" scoped="" ref="0x4049c540"/>
        <function-ref name="set" scoped="" ref="0x4049c620"/>
        <function-ref name="clr" scoped="" ref="0x4049c700"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SpiMosi" ref="0x4049c908" loc="47:/opt/tinyos-2.1.0/tos/platforms/mica2/chips/cc1000/HplCC1000SpiP.nc">
      <component-ref qname="HplCC1000SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SpiMosi" scoped="" ref="0x4049c908"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4049cae0"/>
        <function-ref name="isInput" scoped="" ref="0x4049cbc0"/>
        <function-ref name="toggle" scoped="" ref="0x4049cca0"/>
        <function-ref name="isOutput" scoped="" ref="0x4049cd80"/>
        <function-ref name="get" scoped="" ref="0x4049ce60"/>
        <function-ref name="makeOutput" scoped="" ref="0x40497010"/>
        <function-ref name="set" scoped="" ref="0x404970f0"/>
        <function-ref name="clr" scoped="" ref="0x404971d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="OC1C" ref="0x404973c0" loc="48:/opt/tinyos-2.1.0/tos/platforms/mica2/chips/cc1000/HplCC1000SpiP.nc">
      <component-ref qname="HplCC1000SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="OC1C" scoped="" ref="0x404973c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40497598"/>
        <function-ref name="isInput" scoped="" ref="0x40497678"/>
        <function-ref name="toggle" scoped="" ref="0x40497758"/>
        <function-ref name="isOutput" scoped="" ref="0x40497838"/>
        <function-ref name="get" scoped="" ref="0x40497918"/>
        <function-ref name="makeOutput" scoped="" ref="0x404979f8"/>
        <function-ref name="set" scoped="" ref="0x40497ad8"/>
        <function-ref name="clr" scoped="" ref="0x40497bb8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortG0" ref="0x404c9ce8" loc="91:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortG0" scoped="" ref="0x404c9ce8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x404c80e0"/>
        <function-ref name="isInput" scoped="" ref="0x404c81c0"/>
        <function-ref name="toggle" scoped="" ref="0x404c82a0"/>
        <function-ref name="isOutput" scoped="" ref="0x404c8380"/>
        <function-ref name="get" scoped="" ref="0x404c8460"/>
        <function-ref name="makeOutput" scoped="" ref="0x404c8540"/>
        <function-ref name="set" scoped="" ref="0x404c8620"/>
        <function-ref name="clr" scoped="" ref="0x404c8700"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD1" ref="0x404bb2f0" loc="65:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD1" scoped="" ref="0x404bb2f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x404bb4c8"/>
        <function-ref name="isInput" scoped="" ref="0x404bb5a8"/>
        <function-ref name="toggle" scoped="" ref="0x404bb688"/>
        <function-ref name="isOutput" scoped="" ref="0x404bb768"/>
        <function-ref name="get" scoped="" ref="0x404bb848"/>
        <function-ref name="makeOutput" scoped="" ref="0x404bb928"/>
        <function-ref name="set" scoped="" ref="0x404bba08"/>
        <function-ref name="clr" scoped="" ref="0x404bbae8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE3" ref="0x404c38e0" loc="76:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE3" scoped="" ref="0x404c38e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x404c3ab8"/>
        <function-ref name="isInput" scoped="" ref="0x404c3b98"/>
        <function-ref name="toggle" scoped="" ref="0x404c3c78"/>
        <function-ref name="isOutput" scoped="" ref="0x404c3d58"/>
        <function-ref name="get" scoped="" ref="0x404c3e38"/>
        <function-ref name="makeOutput" scoped="" ref="0x404c3f18"/>
        <function-ref name="set" scoped="" ref="0x404c2010"/>
        <function-ref name="clr" scoped="" ref="0x404c20f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF3" ref="0x404cca98" loc="85:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF3" scoped="" ref="0x404cca98"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x404ccc70"/>
        <function-ref name="isInput" scoped="" ref="0x404ccd50"/>
        <function-ref name="toggle" scoped="" ref="0x404cce30"/>
        <function-ref name="isOutput" scoped="" ref="0x404ccf10"/>
        <function-ref name="get" scoped="" ref="0x404cb010"/>
        <function-ref name="makeOutput" scoped="" ref="0x404cb0f0"/>
        <function-ref name="set" scoped="" ref="0x404cb1d0"/>
        <function-ref name="clr" scoped="" ref="0x404cb2b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA6" ref="0x404adea8" loc="43:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA6" scoped="" ref="0x404adea8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x404ac0c0"/>
        <function-ref name="isInput" scoped="" ref="0x404ac1a0"/>
        <function-ref name="toggle" scoped="" ref="0x404ac280"/>
        <function-ref name="isOutput" scoped="" ref="0x404ac360"/>
        <function-ref name="get" scoped="" ref="0x404ac440"/>
        <function-ref name="makeOutput" scoped="" ref="0x404ac520"/>
        <function-ref name="set" scoped="" ref="0x404ac600"/>
        <function-ref name="clr" scoped="" ref="0x404ac6e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF1" ref="0x404cd670" loc="83:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF1" scoped="" ref="0x404cd670"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x404cd848"/>
        <function-ref name="isInput" scoped="" ref="0x404cd928"/>
        <function-ref name="toggle" scoped="" ref="0x404cda08"/>
        <function-ref name="isOutput" scoped="" ref="0x404cdae8"/>
        <function-ref name="get" scoped="" ref="0x404cdbc8"/>
        <function-ref name="makeOutput" scoped="" ref="0x404cdca8"/>
        <function-ref name="set" scoped="" ref="0x404cdd88"/>
        <function-ref name="clr" scoped="" ref="0x404cde68"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB0" ref="0x404ab2f0" loc="46:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB0" scoped="" ref="0x404ab2f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x404ab4c8"/>
        <function-ref name="isInput" scoped="" ref="0x404ab5a8"/>
        <function-ref name="toggle" scoped="" ref="0x404ab688"/>
        <function-ref name="isOutput" scoped="" ref="0x404ab768"/>
        <function-ref name="get" scoped="" ref="0x404ab848"/>
        <function-ref name="makeOutput" scoped="" ref="0x404ab928"/>
        <function-ref name="set" scoped="" ref="0x404aba08"/>
        <function-ref name="clr" scoped="" ref="0x404abae8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC2" ref="0x404b2a98" loc="57:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC2" scoped="" ref="0x404b2a98"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x404b2c70"/>
        <function-ref name="isInput" scoped="" ref="0x404b2d50"/>
        <function-ref name="toggle" scoped="" ref="0x404b2e30"/>
        <function-ref name="isOutput" scoped="" ref="0x404b2f10"/>
        <function-ref name="get" scoped="" ref="0x404bf010"/>
        <function-ref name="makeOutput" scoped="" ref="0x404bf0f0"/>
        <function-ref name="set" scoped="" ref="0x404bf1d0"/>
        <function-ref name="clr" scoped="" ref="0x404bf2b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD4" ref="0x404b9210" loc="68:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD4" scoped="" ref="0x404b9210"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x404b93e8"/>
        <function-ref name="isInput" scoped="" ref="0x404b94c8"/>
        <function-ref name="toggle" scoped="" ref="0x404b95a8"/>
        <function-ref name="isOutput" scoped="" ref="0x404b9688"/>
        <function-ref name="get" scoped="" ref="0x404b9768"/>
        <function-ref name="makeOutput" scoped="" ref="0x404b9848"/>
        <function-ref name="set" scoped="" ref="0x404b9928"/>
        <function-ref name="clr" scoped="" ref="0x404b9a08"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE6" ref="0x404c1750" loc="79:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE6" scoped="" ref="0x404c1750"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x404c1928"/>
        <function-ref name="isInput" scoped="" ref="0x404c1a08"/>
        <function-ref name="toggle" scoped="" ref="0x404c1ae8"/>
        <function-ref name="isOutput" scoped="" ref="0x404c1bc8"/>
        <function-ref name="get" scoped="" ref="0x404c1ca8"/>
        <function-ref name="makeOutput" scoped="" ref="0x404c1d88"/>
        <function-ref name="set" scoped="" ref="0x404c1e68"/>
        <function-ref name="clr" scoped="" ref="0x404c0010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA1" ref="0x404b0b18" loc="38:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA1" scoped="" ref="0x404b0b18"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x404b0cf0"/>
        <function-ref name="isInput" scoped="" ref="0x404b0dd0"/>
        <function-ref name="toggle" scoped="" ref="0x404b0eb0"/>
        <function-ref name="isOutput" scoped="" ref="0x404af010"/>
        <function-ref name="get" scoped="" ref="0x404af0f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x404af1d0"/>
        <function-ref name="set" scoped="" ref="0x404af2b0"/>
        <function-ref name="clr" scoped="" ref="0x404af390"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB3" ref="0x404b7210" loc="49:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB3" scoped="" ref="0x404b7210"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x404b73e8"/>
        <function-ref name="isInput" scoped="" ref="0x404b74c8"/>
        <function-ref name="toggle" scoped="" ref="0x404b75a8"/>
        <function-ref name="isOutput" scoped="" ref="0x404b7688"/>
        <function-ref name="get" scoped="" ref="0x404b7768"/>
        <function-ref name="makeOutput" scoped="" ref="0x404b7848"/>
        <function-ref name="set" scoped="" ref="0x404b7928"/>
        <function-ref name="clr" scoped="" ref="0x404b7a08"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC5" ref="0x404be8e0" loc="60:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC5" scoped="" ref="0x404be8e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x404beab8"/>
        <function-ref name="isInput" scoped="" ref="0x404beb98"/>
        <function-ref name="toggle" scoped="" ref="0x404bec78"/>
        <function-ref name="isOutput" scoped="" ref="0x404bed58"/>
        <function-ref name="get" scoped="" ref="0x404bee38"/>
        <function-ref name="makeOutput" scoped="" ref="0x404bef18"/>
        <function-ref name="set" scoped="" ref="0x404bd010"/>
        <function-ref name="clr" scoped="" ref="0x404bd0f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD7" ref="0x404c50a0" loc="71:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD7" scoped="" ref="0x404c50a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x404c5278"/>
        <function-ref name="isInput" scoped="" ref="0x404c5358"/>
        <function-ref name="toggle" scoped="" ref="0x404c5438"/>
        <function-ref name="isOutput" scoped="" ref="0x404c5518"/>
        <function-ref name="get" scoped="" ref="0x404c55f8"/>
        <function-ref name="makeOutput" scoped="" ref="0x404c56d8"/>
        <function-ref name="set" scoped="" ref="0x404c57b8"/>
        <function-ref name="clr" scoped="" ref="0x404c5898"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF6" ref="0x404ca8e0" loc="88:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF6" scoped="" ref="0x404ca8e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x404caab8"/>
        <function-ref name="isInput" scoped="" ref="0x404cab98"/>
        <function-ref name="toggle" scoped="" ref="0x404cac78"/>
        <function-ref name="isOutput" scoped="" ref="0x404cad58"/>
        <function-ref name="get" scoped="" ref="0x404cae38"/>
        <function-ref name="makeOutput" scoped="" ref="0x404caf18"/>
        <function-ref name="set" scoped="" ref="0x404c9010"/>
        <function-ref name="clr" scoped="" ref="0x404c90f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortG3" ref="0x404c7dc8" loc="94:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortG3" scoped="" ref="0x404c7dc8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x404d4010"/>
        <function-ref name="isInput" scoped="" ref="0x404d40f0"/>
        <function-ref name="toggle" scoped="" ref="0x404d41d0"/>
        <function-ref name="isOutput" scoped="" ref="0x404d42b0"/>
        <function-ref name="get" scoped="" ref="0x404d4390"/>
        <function-ref name="makeOutput" scoped="" ref="0x404d4470"/>
        <function-ref name="set" scoped="" ref="0x404d4550"/>
        <function-ref name="clr" scoped="" ref="0x404d4630"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE1" ref="0x404c44b0" loc="74:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE1" scoped="" ref="0x404c44b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x404c4688"/>
        <function-ref name="isInput" scoped="" ref="0x404c4768"/>
        <function-ref name="toggle" scoped="" ref="0x404c4848"/>
        <function-ref name="isOutput" scoped="" ref="0x404c4928"/>
        <function-ref name="get" scoped="" ref="0x404c4a08"/>
        <function-ref name="makeOutput" scoped="" ref="0x404c4ae8"/>
        <function-ref name="set" scoped="" ref="0x404c4bc8"/>
        <function-ref name="clr" scoped="" ref="0x404c4ca8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA4" ref="0x404aea08" loc="41:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA4" scoped="" ref="0x404aea08"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x404aebe0"/>
        <function-ref name="isInput" scoped="" ref="0x404aecc0"/>
        <function-ref name="toggle" scoped="" ref="0x404aeda0"/>
        <function-ref name="isOutput" scoped="" ref="0x404aee80"/>
        <function-ref name="get" scoped="" ref="0x404ad010"/>
        <function-ref name="makeOutput" scoped="" ref="0x404ad0f0"/>
        <function-ref name="set" scoped="" ref="0x404ad1d0"/>
        <function-ref name="clr" scoped="" ref="0x404ad2b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB6" ref="0x404b5210" loc="52:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB6" scoped="" ref="0x404b5210"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x404b53e8"/>
        <function-ref name="isInput" scoped="" ref="0x404b54c8"/>
        <function-ref name="toggle" scoped="" ref="0x404b55a8"/>
        <function-ref name="isOutput" scoped="" ref="0x404b5688"/>
        <function-ref name="get" scoped="" ref="0x404b5768"/>
        <function-ref name="makeOutput" scoped="" ref="0x404b5848"/>
        <function-ref name="set" scoped="" ref="0x404b5928"/>
        <function-ref name="clr" scoped="" ref="0x404b5a08"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortG1" ref="0x404c8900" loc="92:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortG1" scoped="" ref="0x404c8900"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x404c8ad8"/>
        <function-ref name="isInput" scoped="" ref="0x404c8bb8"/>
        <function-ref name="toggle" scoped="" ref="0x404c8c98"/>
        <function-ref name="isOutput" scoped="" ref="0x404c8d78"/>
        <function-ref name="get" scoped="" ref="0x404c8e58"/>
        <function-ref name="makeOutput" scoped="" ref="0x404c7010"/>
        <function-ref name="set" scoped="" ref="0x404c70f0"/>
        <function-ref name="clr" scoped="" ref="0x404c71d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC0" ref="0x404b4670" loc="55:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC0" scoped="" ref="0x404b4670"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x404b4848"/>
        <function-ref name="isInput" scoped="" ref="0x404b4928"/>
        <function-ref name="toggle" scoped="" ref="0x404b4a08"/>
        <function-ref name="isOutput" scoped="" ref="0x404b4ae8"/>
        <function-ref name="get" scoped="" ref="0x404b4bc8"/>
        <function-ref name="makeOutput" scoped="" ref="0x404b4ca8"/>
        <function-ref name="set" scoped="" ref="0x404b4d88"/>
        <function-ref name="clr" scoped="" ref="0x404b4e68"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD2" ref="0x404bbce8" loc="66:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD2" scoped="" ref="0x404bbce8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x404bbec0"/>
        <function-ref name="isInput" scoped="" ref="0x404ba010"/>
        <function-ref name="toggle" scoped="" ref="0x404ba0f0"/>
        <function-ref name="isOutput" scoped="" ref="0x404ba1d0"/>
        <function-ref name="get" scoped="" ref="0x404ba2b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x404ba390"/>
        <function-ref name="set" scoped="" ref="0x404ba470"/>
        <function-ref name="clr" scoped="" ref="0x404ba550"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE4" ref="0x404c22f0" loc="77:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE4" scoped="" ref="0x404c22f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x404c24c8"/>
        <function-ref name="isInput" scoped="" ref="0x404c25a8"/>
        <function-ref name="toggle" scoped="" ref="0x404c2688"/>
        <function-ref name="isOutput" scoped="" ref="0x404c2768"/>
        <function-ref name="get" scoped="" ref="0x404c2848"/>
        <function-ref name="makeOutput" scoped="" ref="0x404c2928"/>
        <function-ref name="set" scoped="" ref="0x404c2a08"/>
        <function-ref name="clr" scoped="" ref="0x404c2ae8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF4" ref="0x404cb4b0" loc="86:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF4" scoped="" ref="0x404cb4b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x404cb688"/>
        <function-ref name="isInput" scoped="" ref="0x404cb768"/>
        <function-ref name="toggle" scoped="" ref="0x404cb848"/>
        <function-ref name="isOutput" scoped="" ref="0x404cb928"/>
        <function-ref name="get" scoped="" ref="0x404cba08"/>
        <function-ref name="makeOutput" scoped="" ref="0x404cbae8"/>
        <function-ref name="set" scoped="" ref="0x404cbbc8"/>
        <function-ref name="clr" scoped="" ref="0x404cbca8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA7" ref="0x404ac8e0" loc="44:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA7" scoped="" ref="0x404ac8e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x404acab8"/>
        <function-ref name="isInput" scoped="" ref="0x404acb98"/>
        <function-ref name="toggle" scoped="" ref="0x404acc78"/>
        <function-ref name="isOutput" scoped="" ref="0x404acd58"/>
        <function-ref name="get" scoped="" ref="0x404ace38"/>
        <function-ref name="makeOutput" scoped="" ref="0x404acf18"/>
        <function-ref name="set" scoped="" ref="0x404ab010"/>
        <function-ref name="clr" scoped="" ref="0x404ab0f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB1" ref="0x404abce8" loc="47:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB1" scoped="" ref="0x404abce8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x404abec0"/>
        <function-ref name="isInput" scoped="" ref="0x404b8010"/>
        <function-ref name="toggle" scoped="" ref="0x404b80f0"/>
        <function-ref name="isOutput" scoped="" ref="0x404b81d0"/>
        <function-ref name="get" scoped="" ref="0x404b82b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x404b8390"/>
        <function-ref name="set" scoped="" ref="0x404b8470"/>
        <function-ref name="clr" scoped="" ref="0x404b8550"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC3" ref="0x404bf4b0" loc="58:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC3" scoped="" ref="0x404bf4b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x404bf688"/>
        <function-ref name="isInput" scoped="" ref="0x404bf768"/>
        <function-ref name="toggle" scoped="" ref="0x404bf848"/>
        <function-ref name="isOutput" scoped="" ref="0x404bf928"/>
        <function-ref name="get" scoped="" ref="0x404bfa08"/>
        <function-ref name="makeOutput" scoped="" ref="0x404bfae8"/>
        <function-ref name="set" scoped="" ref="0x404bfbc8"/>
        <function-ref name="clr" scoped="" ref="0x404bfca8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD5" ref="0x404b9c08" loc="69:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD5" scoped="" ref="0x404b9c08"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x404b9de0"/>
        <function-ref name="isInput" scoped="" ref="0x404b9ec0"/>
        <function-ref name="toggle" scoped="" ref="0x404c6010"/>
        <function-ref name="isOutput" scoped="" ref="0x404c60f0"/>
        <function-ref name="get" scoped="" ref="0x404c61d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x404c62b0"/>
        <function-ref name="set" scoped="" ref="0x404c6390"/>
        <function-ref name="clr" scoped="" ref="0x404c6470"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE7" ref="0x404c0210" loc="80:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE7" scoped="" ref="0x404c0210"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x404c03e8"/>
        <function-ref name="isInput" scoped="" ref="0x404c04c8"/>
        <function-ref name="toggle" scoped="" ref="0x404c05a8"/>
        <function-ref name="isOutput" scoped="" ref="0x404c0688"/>
        <function-ref name="get" scoped="" ref="0x404c0768"/>
        <function-ref name="makeOutput" scoped="" ref="0x404c0848"/>
        <function-ref name="set" scoped="" ref="0x404c0928"/>
        <function-ref name="clr" scoped="" ref="0x404c0a08"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA2" ref="0x404af590" loc="39:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA2" scoped="" ref="0x404af590"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x404af768"/>
        <function-ref name="isInput" scoped="" ref="0x404af848"/>
        <function-ref name="toggle" scoped="" ref="0x404af928"/>
        <function-ref name="isOutput" scoped="" ref="0x404afa08"/>
        <function-ref name="get" scoped="" ref="0x404afae8"/>
        <function-ref name="makeOutput" scoped="" ref="0x404afbc8"/>
        <function-ref name="set" scoped="" ref="0x404afca8"/>
        <function-ref name="clr" scoped="" ref="0x404afd88"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB4" ref="0x404b7c08" loc="50:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB4" scoped="" ref="0x404b7c08"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x404b7e60"/>
        <function-ref name="isInput" scoped="" ref="0x404b6010"/>
        <function-ref name="toggle" scoped="" ref="0x404b60f0"/>
        <function-ref name="isOutput" scoped="" ref="0x404b61d0"/>
        <function-ref name="get" scoped="" ref="0x404b62b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x404b6390"/>
        <function-ref name="set" scoped="" ref="0x404b6470"/>
        <function-ref name="clr" scoped="" ref="0x404b6550"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC6" ref="0x404bd2f0" loc="61:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC6" scoped="" ref="0x404bd2f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x404bd4c8"/>
        <function-ref name="isInput" scoped="" ref="0x404bd5a8"/>
        <function-ref name="toggle" scoped="" ref="0x404bd688"/>
        <function-ref name="isOutput" scoped="" ref="0x404bd768"/>
        <function-ref name="get" scoped="" ref="0x404bd848"/>
        <function-ref name="makeOutput" scoped="" ref="0x404bd928"/>
        <function-ref name="set" scoped="" ref="0x404bda08"/>
        <function-ref name="clr" scoped="" ref="0x404bdae8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF7" ref="0x404c92f0" loc="89:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF7" scoped="" ref="0x404c92f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x404c94c8"/>
        <function-ref name="isInput" scoped="" ref="0x404c95a8"/>
        <function-ref name="toggle" scoped="" ref="0x404c9688"/>
        <function-ref name="isOutput" scoped="" ref="0x404c9768"/>
        <function-ref name="get" scoped="" ref="0x404c9848"/>
        <function-ref name="makeOutput" scoped="" ref="0x404c9928"/>
        <function-ref name="set" scoped="" ref="0x404c9a08"/>
        <function-ref name="clr" scoped="" ref="0x404c9ae8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD0" ref="0x404bc750" loc="64:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD0" scoped="" ref="0x404bc750"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x404bca28"/>
        <function-ref name="isInput" scoped="" ref="0x404bcb08"/>
        <function-ref name="toggle" scoped="" ref="0x404bcbe8"/>
        <function-ref name="isOutput" scoped="" ref="0x404bccc8"/>
        <function-ref name="get" scoped="" ref="0x404bcda8"/>
        <function-ref name="makeOutput" scoped="" ref="0x404bce88"/>
        <function-ref name="set" scoped="" ref="0x404bb010"/>
        <function-ref name="clr" scoped="" ref="0x404bb0f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE2" ref="0x404c4ea8" loc="75:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE2" scoped="" ref="0x404c4ea8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x404c30c0"/>
        <function-ref name="isInput" scoped="" ref="0x404c31a0"/>
        <function-ref name="toggle" scoped="" ref="0x404c3280"/>
        <function-ref name="isOutput" scoped="" ref="0x404c3360"/>
        <function-ref name="get" scoped="" ref="0x404c3440"/>
        <function-ref name="makeOutput" scoped="" ref="0x404c3520"/>
        <function-ref name="set" scoped="" ref="0x404c3600"/>
        <function-ref name="clr" scoped="" ref="0x404c36e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF2" ref="0x404cc0a0" loc="84:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF2" scoped="" ref="0x404cc0a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x404cc278"/>
        <function-ref name="isInput" scoped="" ref="0x404cc358"/>
        <function-ref name="toggle" scoped="" ref="0x404cc438"/>
        <function-ref name="isOutput" scoped="" ref="0x404cc518"/>
        <function-ref name="get" scoped="" ref="0x404cc5f8"/>
        <function-ref name="makeOutput" scoped="" ref="0x404cc6d8"/>
        <function-ref name="set" scoped="" ref="0x404cc7b8"/>
        <function-ref name="clr" scoped="" ref="0x404cc898"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortG4" ref="0x404d4830" loc="95:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortG4" scoped="" ref="0x404d4830"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x404d4a08"/>
        <function-ref name="isInput" scoped="" ref="0x404d4ae8"/>
        <function-ref name="toggle" scoped="" ref="0x404d4bc8"/>
        <function-ref name="isOutput" scoped="" ref="0x404d4ca8"/>
        <function-ref name="get" scoped="" ref="0x404d4d88"/>
        <function-ref name="makeOutput" scoped="" ref="0x404d4e68"/>
        <function-ref name="set" scoped="" ref="0x404d3010"/>
        <function-ref name="clr" scoped="" ref="0x404d30f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA5" ref="0x404ad4b0" loc="42:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA5" scoped="" ref="0x404ad4b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x404ad688"/>
        <function-ref name="isInput" scoped="" ref="0x404ad768"/>
        <function-ref name="toggle" scoped="" ref="0x404ad848"/>
        <function-ref name="isOutput" scoped="" ref="0x404ad928"/>
        <function-ref name="get" scoped="" ref="0x404ada08"/>
        <function-ref name="makeOutput" scoped="" ref="0x404adae8"/>
        <function-ref name="set" scoped="" ref="0x404adbc8"/>
        <function-ref name="clr" scoped="" ref="0x404adca8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB7" ref="0x404b5c08" loc="53:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB7" scoped="" ref="0x404b5c08"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x404b5de0"/>
        <function-ref name="isInput" scoped="" ref="0x404b5ec0"/>
        <function-ref name="toggle" scoped="" ref="0x404b4010"/>
        <function-ref name="isOutput" scoped="" ref="0x404b40f0"/>
        <function-ref name="get" scoped="" ref="0x404b41d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x404b42b0"/>
        <function-ref name="set" scoped="" ref="0x404b4390"/>
        <function-ref name="clr" scoped="" ref="0x404b4470"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF0" ref="0x404c0c08" loc="82:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF0" scoped="" ref="0x404c0c08"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x404c0de0"/>
        <function-ref name="isInput" scoped="" ref="0x404c0ec0"/>
        <function-ref name="toggle" scoped="" ref="0x404cd010"/>
        <function-ref name="isOutput" scoped="" ref="0x404cd0f0"/>
        <function-ref name="get" scoped="" ref="0x404cd1d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x404cd2b0"/>
        <function-ref name="set" scoped="" ref="0x404cd390"/>
        <function-ref name="clr" scoped="" ref="0x404cd470"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC1" ref="0x404b20a0" loc="56:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC1" scoped="" ref="0x404b20a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x404b2278"/>
        <function-ref name="isInput" scoped="" ref="0x404b2358"/>
        <function-ref name="toggle" scoped="" ref="0x404b2438"/>
        <function-ref name="isOutput" scoped="" ref="0x404b2518"/>
        <function-ref name="get" scoped="" ref="0x404b25f8"/>
        <function-ref name="makeOutput" scoped="" ref="0x404b26d8"/>
        <function-ref name="set" scoped="" ref="0x404b27b8"/>
        <function-ref name="clr" scoped="" ref="0x404b2898"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD3" ref="0x404ba750" loc="67:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD3" scoped="" ref="0x404ba750"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x404ba928"/>
        <function-ref name="isInput" scoped="" ref="0x404baa08"/>
        <function-ref name="toggle" scoped="" ref="0x404baae8"/>
        <function-ref name="isOutput" scoped="" ref="0x404babc8"/>
        <function-ref name="get" scoped="" ref="0x404baca8"/>
        <function-ref name="makeOutput" scoped="" ref="0x404bad88"/>
        <function-ref name="set" scoped="" ref="0x404bae68"/>
        <function-ref name="clr" scoped="" ref="0x404b9010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE5" ref="0x404c2ce8" loc="78:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE5" scoped="" ref="0x404c2ce8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x404c2ec0"/>
        <function-ref name="isInput" scoped="" ref="0x404c1010"/>
        <function-ref name="toggle" scoped="" ref="0x404c10f0"/>
        <function-ref name="isOutput" scoped="" ref="0x404c11d0"/>
        <function-ref name="get" scoped="" ref="0x404c12b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x404c1390"/>
        <function-ref name="set" scoped="" ref="0x404c1470"/>
        <function-ref name="clr" scoped="" ref="0x404c1550"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF5" ref="0x404cbea8" loc="87:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF5" scoped="" ref="0x404cbea8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x404ca0c0"/>
        <function-ref name="isInput" scoped="" ref="0x404ca1a0"/>
        <function-ref name="toggle" scoped="" ref="0x404ca280"/>
        <function-ref name="isOutput" scoped="" ref="0x404ca360"/>
        <function-ref name="get" scoped="" ref="0x404ca440"/>
        <function-ref name="makeOutput" scoped="" ref="0x404ca520"/>
        <function-ref name="set" scoped="" ref="0x404ca600"/>
        <function-ref name="clr" scoped="" ref="0x404ca6e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA0" ref="0x404b0120" loc="37:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA0" scoped="" ref="0x404b0120"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x404b02f8"/>
        <function-ref name="isInput" scoped="" ref="0x404b03d8"/>
        <function-ref name="toggle" scoped="" ref="0x404b04b8"/>
        <function-ref name="isOutput" scoped="" ref="0x404b0598"/>
        <function-ref name="get" scoped="" ref="0x404b0678"/>
        <function-ref name="makeOutput" scoped="" ref="0x404b0758"/>
        <function-ref name="set" scoped="" ref="0x404b0838"/>
        <function-ref name="clr" scoped="" ref="0x404b0918"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB2" ref="0x404b8750" loc="48:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB2" scoped="" ref="0x404b8750"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x404b8928"/>
        <function-ref name="isInput" scoped="" ref="0x404b8a08"/>
        <function-ref name="toggle" scoped="" ref="0x404b8ae8"/>
        <function-ref name="isOutput" scoped="" ref="0x404b8bc8"/>
        <function-ref name="get" scoped="" ref="0x404b8ca8"/>
        <function-ref name="makeOutput" scoped="" ref="0x404b8d88"/>
        <function-ref name="set" scoped="" ref="0x404b8e68"/>
        <function-ref name="clr" scoped="" ref="0x404b7010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC4" ref="0x404bfea8" loc="59:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC4" scoped="" ref="0x404bfea8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x404be0c0"/>
        <function-ref name="isInput" scoped="" ref="0x404be1a0"/>
        <function-ref name="toggle" scoped="" ref="0x404be280"/>
        <function-ref name="isOutput" scoped="" ref="0x404be360"/>
        <function-ref name="get" scoped="" ref="0x404be440"/>
        <function-ref name="makeOutput" scoped="" ref="0x404be520"/>
        <function-ref name="set" scoped="" ref="0x404be600"/>
        <function-ref name="clr" scoped="" ref="0x404be6e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD6" ref="0x404c6670" loc="70:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD6" scoped="" ref="0x404c6670"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x404c6848"/>
        <function-ref name="isInput" scoped="" ref="0x404c6928"/>
        <function-ref name="toggle" scoped="" ref="0x404c6a08"/>
        <function-ref name="isOutput" scoped="" ref="0x404c6ae8"/>
        <function-ref name="get" scoped="" ref="0x404c6bc8"/>
        <function-ref name="makeOutput" scoped="" ref="0x404c6ca8"/>
        <function-ref name="set" scoped="" ref="0x404c6d88"/>
        <function-ref name="clr" scoped="" ref="0x404c6e68"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortG2" ref="0x404c73d0" loc="93:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortG2" scoped="" ref="0x404c73d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x404c75a8"/>
        <function-ref name="isInput" scoped="" ref="0x404c7688"/>
        <function-ref name="toggle" scoped="" ref="0x404c7768"/>
        <function-ref name="isOutput" scoped="" ref="0x404c7848"/>
        <function-ref name="get" scoped="" ref="0x404c7928"/>
        <function-ref name="makeOutput" scoped="" ref="0x404c7a08"/>
        <function-ref name="set" scoped="" ref="0x404c7ae8"/>
        <function-ref name="clr" scoped="" ref="0x404c7bc8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE0" ref="0x404c5a98" loc="73:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE0" scoped="" ref="0x404c5a98"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x404c5c70"/>
        <function-ref name="isInput" scoped="" ref="0x404c5d50"/>
        <function-ref name="toggle" scoped="" ref="0x404c5e30"/>
        <function-ref name="isOutput" scoped="" ref="0x404c5f10"/>
        <function-ref name="get" scoped="" ref="0x404c4010"/>
        <function-ref name="makeOutput" scoped="" ref="0x404c40f0"/>
        <function-ref name="set" scoped="" ref="0x404c41d0"/>
        <function-ref name="clr" scoped="" ref="0x404c42b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC7" ref="0x404bdce8" loc="62:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC7" scoped="" ref="0x404bdce8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x404bdec0"/>
        <function-ref name="isInput" scoped="" ref="0x404bc010"/>
        <function-ref name="toggle" scoped="" ref="0x404bc0f0"/>
        <function-ref name="isOutput" scoped="" ref="0x404bc1d0"/>
        <function-ref name="get" scoped="" ref="0x404bc2b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x404bc390"/>
        <function-ref name="set" scoped="" ref="0x404bc470"/>
        <function-ref name="clr" scoped="" ref="0x404bc550"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA3" ref="0x404ae010" loc="40:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA3" scoped="" ref="0x404ae010"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x404ae1e8"/>
        <function-ref name="isInput" scoped="" ref="0x404ae2c8"/>
        <function-ref name="toggle" scoped="" ref="0x404ae3a8"/>
        <function-ref name="isOutput" scoped="" ref="0x404ae488"/>
        <function-ref name="get" scoped="" ref="0x404ae568"/>
        <function-ref name="makeOutput" scoped="" ref="0x404ae648"/>
        <function-ref name="set" scoped="" ref="0x404ae728"/>
        <function-ref name="clr" scoped="" ref="0x404ae808"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB5" ref="0x404b6750" loc="51:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB5" scoped="" ref="0x404b6750"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x404b6928"/>
        <function-ref name="isInput" scoped="" ref="0x404b6a08"/>
        <function-ref name="toggle" scoped="" ref="0x404b6ae8"/>
        <function-ref name="isOutput" scoped="" ref="0x404b6bc8"/>
        <function-ref name="get" scoped="" ref="0x404b6ca8"/>
        <function-ref name="makeOutput" scoped="" ref="0x404b6d88"/>
        <function-ref name="set" scoped="" ref="0x404b6e68"/>
        <function-ref name="clr" scoped="" ref="0x404b5010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin2" ref="0x404f1e48" loc="37:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin2" scoped="" ref="0x404f1e48"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x404fd050"/>
        <function-ref name="isInput" scoped="" ref="0x404fd130"/>
        <function-ref name="toggle" scoped="" ref="0x404fd210"/>
        <function-ref name="isOutput" scoped="" ref="0x404fd2f0"/>
        <function-ref name="get" scoped="" ref="0x404fd3d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x404fd4b0"/>
        <function-ref name="set" scoped="" ref="0x404fd590"/>
        <function-ref name="clr" scoped="" ref="0x404fd670"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin5" ref="0x404fcac8" loc="40:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin5" scoped="" ref="0x404fcac8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x404fcca0"/>
        <function-ref name="isInput" scoped="" ref="0x404fcd80"/>
        <function-ref name="toggle" scoped="" ref="0x404fce60"/>
        <function-ref name="isOutput" scoped="" ref="0x404fb010"/>
        <function-ref name="get" scoped="" ref="0x404fb0f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x404fb1d0"/>
        <function-ref name="set" scoped="" ref="0x404fb2b0"/>
        <function-ref name="clr" scoped="" ref="0x404fb390"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin0" ref="0x404f2b18" loc="35:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin0" scoped="" ref="0x404f2b18"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x404f2cf0"/>
        <function-ref name="isInput" scoped="" ref="0x404f2dd0"/>
        <function-ref name="toggle" scoped="" ref="0x404f2eb0"/>
        <function-ref name="isOutput" scoped="" ref="0x404f1010"/>
        <function-ref name="get" scoped="" ref="0x404f10f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x404f11d0"/>
        <function-ref name="set" scoped="" ref="0x404f12b0"/>
        <function-ref name="clr" scoped="" ref="0x404f1390"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin3" ref="0x404fd7d0" loc="38:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin3" scoped="" ref="0x404fd7d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x404fd9a8"/>
        <function-ref name="isInput" scoped="" ref="0x404fda88"/>
        <function-ref name="toggle" scoped="" ref="0x404fdb68"/>
        <function-ref name="isOutput" scoped="" ref="0x404fdc48"/>
        <function-ref name="get" scoped="" ref="0x404fdd28"/>
        <function-ref name="makeOutput" scoped="" ref="0x404fde08"/>
        <function-ref name="set" scoped="" ref="0x404fdee8"/>
        <function-ref name="clr" scoped="" ref="0x404fc010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin6" ref="0x404fb4f0" loc="41:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin6" scoped="" ref="0x404fb4f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x404fb6c8"/>
        <function-ref name="isInput" scoped="" ref="0x404fb7a8"/>
        <function-ref name="toggle" scoped="" ref="0x404fb888"/>
        <function-ref name="isOutput" scoped="" ref="0x404fb968"/>
        <function-ref name="get" scoped="" ref="0x404fba48"/>
        <function-ref name="makeOutput" scoped="" ref="0x404fbb28"/>
        <function-ref name="set" scoped="" ref="0x404fbc08"/>
        <function-ref name="clr" scoped="" ref="0x404fbce8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin1" ref="0x404f14f0" loc="36:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin1" scoped="" ref="0x404f14f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x404f16c8"/>
        <function-ref name="isInput" scoped="" ref="0x404f17a8"/>
        <function-ref name="toggle" scoped="" ref="0x404f1888"/>
        <function-ref name="isOutput" scoped="" ref="0x404f1968"/>
        <function-ref name="get" scoped="" ref="0x404f1a48"/>
        <function-ref name="makeOutput" scoped="" ref="0x404f1b28"/>
        <function-ref name="set" scoped="" ref="0x404f1c08"/>
        <function-ref name="clr" scoped="" ref="0x404f1ce8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin4" ref="0x404fc170" loc="39:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin4" scoped="" ref="0x404fc170"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x404fc348"/>
        <function-ref name="isInput" scoped="" ref="0x404fc428"/>
        <function-ref name="toggle" scoped="" ref="0x404fc508"/>
        <function-ref name="isOutput" scoped="" ref="0x404fc5e8"/>
        <function-ref name="get" scoped="" ref="0x404fc6c8"/>
        <function-ref name="makeOutput" scoped="" ref="0x404fc7a8"/>
        <function-ref name="set" scoped="" ref="0x404fc888"/>
        <function-ref name="clr" scoped="" ref="0x404fc968"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin7" ref="0x404fbe48" loc="42:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin7" scoped="" ref="0x404fbe48"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x404fa050"/>
        <function-ref name="isInput" scoped="" ref="0x404fa130"/>
        <function-ref name="toggle" scoped="" ref="0x404fa210"/>
        <function-ref name="isOutput" scoped="" ref="0x404fa2f0"/>
        <function-ref name="get" scoped="" ref="0x404fa3d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x404fa4b0"/>
        <function-ref name="set" scoped="" ref="0x404fa590"/>
        <function-ref name="clr" scoped="" ref="0x404fa670"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x40c81cd0" loc="37:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA.Bit0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x40c81cd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40c81ea8"/>
        <function-ref name="isInput" scoped="" ref="0x40c7f010"/>
        <function-ref name="toggle" scoped="" ref="0x40c7f0f0"/>
        <function-ref name="isOutput" scoped="" ref="0x40c7f1d0"/>
        <function-ref name="get" scoped="" ref="0x40c7f2b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x40c7f390"/>
        <function-ref name="set" scoped="" ref="0x40c7f470"/>
        <function-ref name="clr" scoped="" ref="0x40c7f550"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x40c7e718" loc="37:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA.Bit1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x40c7e718"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40c7e8f0"/>
        <function-ref name="isInput" scoped="" ref="0x40c7e9d0"/>
        <function-ref name="toggle" scoped="" ref="0x40c7eab0"/>
        <function-ref name="isOutput" scoped="" ref="0x40c7eb90"/>
        <function-ref name="get" scoped="" ref="0x40c7ec70"/>
        <function-ref name="makeOutput" scoped="" ref="0x40c7ed50"/>
        <function-ref name="set" scoped="" ref="0x40c7ee30"/>
        <function-ref name="clr" scoped="" ref="0x40c7ef10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x40c7c0f8" loc="37:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA.Bit2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x40c7c0f8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40c7c2d0"/>
        <function-ref name="isInput" scoped="" ref="0x40c7c3b0"/>
        <function-ref name="toggle" scoped="" ref="0x40c7c490"/>
        <function-ref name="isOutput" scoped="" ref="0x40c7c570"/>
        <function-ref name="get" scoped="" ref="0x40c7c650"/>
        <function-ref name="makeOutput" scoped="" ref="0x40c7c730"/>
        <function-ref name="set" scoped="" ref="0x40c7c810"/>
        <function-ref name="clr" scoped="" ref="0x40c7c8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x40c7bac8" loc="37:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA.Bit3"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x40c7bac8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40c7bca0"/>
        <function-ref name="isInput" scoped="" ref="0x40c7bd80"/>
        <function-ref name="toggle" scoped="" ref="0x40c7be60"/>
        <function-ref name="isOutput" scoped="" ref="0x40c7a010"/>
        <function-ref name="get" scoped="" ref="0x40c7a0f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x40c7a1d0"/>
        <function-ref name="set" scoped="" ref="0x40c7a2b0"/>
        <function-ref name="clr" scoped="" ref="0x40c7a390"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x40c79570" loc="37:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA.Bit4"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x40c79570"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40c79748"/>
        <function-ref name="isInput" scoped="" ref="0x40c79828"/>
        <function-ref name="toggle" scoped="" ref="0x40c79908"/>
        <function-ref name="isOutput" scoped="" ref="0x40c799e8"/>
        <function-ref name="get" scoped="" ref="0x40c79ac8"/>
        <function-ref name="makeOutput" scoped="" ref="0x40c79ba8"/>
        <function-ref name="set" scoped="" ref="0x40c79c88"/>
        <function-ref name="clr" scoped="" ref="0x40c79d68"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x40c77010" loc="37:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA.Bit5"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x40c77010"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40c771e8"/>
        <function-ref name="isInput" scoped="" ref="0x40c772c8"/>
        <function-ref name="toggle" scoped="" ref="0x40c773a8"/>
        <function-ref name="isOutput" scoped="" ref="0x40c77488"/>
        <function-ref name="get" scoped="" ref="0x40c77568"/>
        <function-ref name="makeOutput" scoped="" ref="0x40c77648"/>
        <function-ref name="set" scoped="" ref="0x40c77728"/>
        <function-ref name="clr" scoped="" ref="0x40c77808"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x40c769e8" loc="37:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA.Bit6"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x40c769e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40c76bc0"/>
        <function-ref name="isInput" scoped="" ref="0x40c76ca0"/>
        <function-ref name="toggle" scoped="" ref="0x40c76d80"/>
        <function-ref name="isOutput" scoped="" ref="0x40c76e60"/>
        <function-ref name="get" scoped="" ref="0x40c75010"/>
        <function-ref name="makeOutput" scoped="" ref="0x40c750f0"/>
        <function-ref name="set" scoped="" ref="0x40c751d0"/>
        <function-ref name="clr" scoped="" ref="0x40c752b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x40c74538" loc="37:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA.Bit7"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x40c74538"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40c74710"/>
        <function-ref name="isInput" scoped="" ref="0x40c747f0"/>
        <function-ref name="toggle" scoped="" ref="0x40c748d0"/>
        <function-ref name="isOutput" scoped="" ref="0x40c749b0"/>
        <function-ref name="get" scoped="" ref="0x40c74a90"/>
        <function-ref name="makeOutput" scoped="" ref="0x40c74b70"/>
        <function-ref name="set" scoped="" ref="0x40c74c50"/>
        <function-ref name="clr" scoped="" ref="0x40c74d30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin2" ref="0x405046b0" loc="37:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin2" scoped="" ref="0x405046b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40504888"/>
        <function-ref name="isInput" scoped="" ref="0x40504968"/>
        <function-ref name="toggle" scoped="" ref="0x40504a48"/>
        <function-ref name="isOutput" scoped="" ref="0x40504b28"/>
        <function-ref name="get" scoped="" ref="0x40504c08"/>
        <function-ref name="makeOutput" scoped="" ref="0x40504ce8"/>
        <function-ref name="set" scoped="" ref="0x40504dc8"/>
        <function-ref name="clr" scoped="" ref="0x40504ea8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin5" ref="0x40502330" loc="40:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin5" scoped="" ref="0x40502330"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40502508"/>
        <function-ref name="isInput" scoped="" ref="0x405025e8"/>
        <function-ref name="toggle" scoped="" ref="0x405026c8"/>
        <function-ref name="isOutput" scoped="" ref="0x405027a8"/>
        <function-ref name="get" scoped="" ref="0x40502888"/>
        <function-ref name="makeOutput" scoped="" ref="0x40502968"/>
        <function-ref name="set" scoped="" ref="0x40502a48"/>
        <function-ref name="clr" scoped="" ref="0x40502b28"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin0" ref="0x405053d8" loc="35:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin0" scoped="" ref="0x405053d8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x405055b0"/>
        <function-ref name="isInput" scoped="" ref="0x40505690"/>
        <function-ref name="toggle" scoped="" ref="0x40505770"/>
        <function-ref name="isOutput" scoped="" ref="0x40505850"/>
        <function-ref name="get" scoped="" ref="0x40505930"/>
        <function-ref name="makeOutput" scoped="" ref="0x40505a10"/>
        <function-ref name="set" scoped="" ref="0x40505af0"/>
        <function-ref name="clr" scoped="" ref="0x40505bd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin3" ref="0x40503030" loc="38:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin3" scoped="" ref="0x40503030"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40503208"/>
        <function-ref name="isInput" scoped="" ref="0x405032e8"/>
        <function-ref name="toggle" scoped="" ref="0x405033c8"/>
        <function-ref name="isOutput" scoped="" ref="0x405034a8"/>
        <function-ref name="get" scoped="" ref="0x40503588"/>
        <function-ref name="makeOutput" scoped="" ref="0x40503668"/>
        <function-ref name="set" scoped="" ref="0x40503748"/>
        <function-ref name="clr" scoped="" ref="0x40503828"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin6" ref="0x40502c88" loc="41:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin6" scoped="" ref="0x40502c88"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40502e60"/>
        <function-ref name="isInput" scoped="" ref="0x40500010"/>
        <function-ref name="toggle" scoped="" ref="0x405000f0"/>
        <function-ref name="isOutput" scoped="" ref="0x405001d0"/>
        <function-ref name="get" scoped="" ref="0x405002b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x40500390"/>
        <function-ref name="set" scoped="" ref="0x40500470"/>
        <function-ref name="clr" scoped="" ref="0x40500550"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin1" ref="0x40505d30" loc="36:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin1" scoped="" ref="0x40505d30"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40505f08"/>
        <function-ref name="isInput" scoped="" ref="0x40504010"/>
        <function-ref name="toggle" scoped="" ref="0x405040f0"/>
        <function-ref name="isOutput" scoped="" ref="0x405041d0"/>
        <function-ref name="get" scoped="" ref="0x405042b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x40504390"/>
        <function-ref name="set" scoped="" ref="0x40504470"/>
        <function-ref name="clr" scoped="" ref="0x40504550"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin4" ref="0x40503988" loc="39:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin4" scoped="" ref="0x40503988"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40503b60"/>
        <function-ref name="isInput" scoped="" ref="0x40503c40"/>
        <function-ref name="toggle" scoped="" ref="0x40503d20"/>
        <function-ref name="isOutput" scoped="" ref="0x40503e00"/>
        <function-ref name="get" scoped="" ref="0x40503ee0"/>
        <function-ref name="makeOutput" scoped="" ref="0x40502010"/>
        <function-ref name="set" scoped="" ref="0x405020f0"/>
        <function-ref name="clr" scoped="" ref="0x405021d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin7" ref="0x405006b0" loc="42:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin7" scoped="" ref="0x405006b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40500888"/>
        <function-ref name="isInput" scoped="" ref="0x40500968"/>
        <function-ref name="toggle" scoped="" ref="0x40500a48"/>
        <function-ref name="isOutput" scoped="" ref="0x40500b28"/>
        <function-ref name="get" scoped="" ref="0x40500c08"/>
        <function-ref name="makeOutput" scoped="" ref="0x40500ce8"/>
        <function-ref name="set" scoped="" ref="0x40500dc8"/>
        <function-ref name="clr" scoped="" ref="0x40500ea8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x40ca3938" loc="37:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB.Bit0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x40ca3938"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40ca3b10"/>
        <function-ref name="isInput" scoped="" ref="0x40ca3bf0"/>
        <function-ref name="toggle" scoped="" ref="0x40ca3cd0"/>
        <function-ref name="isOutput" scoped="" ref="0x40ca3db0"/>
        <function-ref name="get" scoped="" ref="0x40ca3e90"/>
        <function-ref name="makeOutput" scoped="" ref="0x40ca1010"/>
        <function-ref name="set" scoped="" ref="0x40ca10f0"/>
        <function-ref name="clr" scoped="" ref="0x40ca11d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x40ca03b0" loc="37:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB.Bit1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x40ca03b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40ca0588"/>
        <function-ref name="isInput" scoped="" ref="0x40ca0668"/>
        <function-ref name="toggle" scoped="" ref="0x40ca0748"/>
        <function-ref name="isOutput" scoped="" ref="0x40ca0828"/>
        <function-ref name="get" scoped="" ref="0x40ca0908"/>
        <function-ref name="makeOutput" scoped="" ref="0x40ca09e8"/>
        <function-ref name="set" scoped="" ref="0x40ca0ac8"/>
        <function-ref name="clr" scoped="" ref="0x40ca0ba8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x40ccdd70" loc="37:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB.Bit2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x40ccdd70"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40ccc010"/>
        <function-ref name="isInput" scoped="" ref="0x40ccc0f0"/>
        <function-ref name="toggle" scoped="" ref="0x40ccc1d0"/>
        <function-ref name="isOutput" scoped="" ref="0x40ccc2b0"/>
        <function-ref name="get" scoped="" ref="0x40ccc390"/>
        <function-ref name="makeOutput" scoped="" ref="0x40ccc470"/>
        <function-ref name="set" scoped="" ref="0x40ccc550"/>
        <function-ref name="clr" scoped="" ref="0x40ccc630"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x40ccb7f8" loc="37:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB.Bit3"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x40ccb7f8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40ccb9d0"/>
        <function-ref name="isInput" scoped="" ref="0x40ccbab0"/>
        <function-ref name="toggle" scoped="" ref="0x40ccbb90"/>
        <function-ref name="isOutput" scoped="" ref="0x40ccbc70"/>
        <function-ref name="get" scoped="" ref="0x40ccbd50"/>
        <function-ref name="makeOutput" scoped="" ref="0x40ccbe30"/>
        <function-ref name="set" scoped="" ref="0x40ccbf10"/>
        <function-ref name="clr" scoped="" ref="0x40cca010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x40cc9228" loc="37:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB.Bit4"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x40cc9228"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40cc9400"/>
        <function-ref name="isInput" scoped="" ref="0x40cc94e0"/>
        <function-ref name="toggle" scoped="" ref="0x40cc95c0"/>
        <function-ref name="isOutput" scoped="" ref="0x40cc96a0"/>
        <function-ref name="get" scoped="" ref="0x40cc9780"/>
        <function-ref name="makeOutput" scoped="" ref="0x40cc9860"/>
        <function-ref name="set" scoped="" ref="0x40cc9940"/>
        <function-ref name="clr" scoped="" ref="0x40cc9a20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x40cc8c08" loc="37:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB.Bit5"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x40cc8c08"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40cc8de0"/>
        <function-ref name="isInput" scoped="" ref="0x40cc8ec0"/>
        <function-ref name="toggle" scoped="" ref="0x40cc7010"/>
        <function-ref name="isOutput" scoped="" ref="0x40cc70f0"/>
        <function-ref name="get" scoped="" ref="0x40cc71d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x40cc72b0"/>
        <function-ref name="set" scoped="" ref="0x40cc7390"/>
        <function-ref name="clr" scoped="" ref="0x40cc7470"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x40cc66c0" loc="37:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB.Bit6"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x40cc66c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40cc6898"/>
        <function-ref name="isInput" scoped="" ref="0x40cc6978"/>
        <function-ref name="toggle" scoped="" ref="0x40cc6a58"/>
        <function-ref name="isOutput" scoped="" ref="0x40cc6b38"/>
        <function-ref name="get" scoped="" ref="0x40cc6c18"/>
        <function-ref name="makeOutput" scoped="" ref="0x40cc6cf8"/>
        <function-ref name="set" scoped="" ref="0x40cc6dd8"/>
        <function-ref name="clr" scoped="" ref="0x40cc6eb8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x40cc40b0" loc="37:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB.Bit7"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x40cc40b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40cc4288"/>
        <function-ref name="isInput" scoped="" ref="0x40cc4368"/>
        <function-ref name="toggle" scoped="" ref="0x40cc4448"/>
        <function-ref name="isOutput" scoped="" ref="0x40cc4528"/>
        <function-ref name="get" scoped="" ref="0x40cc4608"/>
        <function-ref name="makeOutput" scoped="" ref="0x40cc46e8"/>
        <function-ref name="set" scoped="" ref="0x40cc47c8"/>
        <function-ref name="clr" scoped="" ref="0x40cc48a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin2" ref="0x4050a170" loc="37:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin2" scoped="" ref="0x4050a170"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4050a348"/>
        <function-ref name="isInput" scoped="" ref="0x4050a428"/>
        <function-ref name="toggle" scoped="" ref="0x4050a508"/>
        <function-ref name="isOutput" scoped="" ref="0x4050a5e8"/>
        <function-ref name="get" scoped="" ref="0x4050a6c8"/>
        <function-ref name="makeOutput" scoped="" ref="0x4050a7a8"/>
        <function-ref name="set" scoped="" ref="0x4050a888"/>
        <function-ref name="clr" scoped="" ref="0x4050a968"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin5" ref="0x40509e48" loc="40:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin5" scoped="" ref="0x40509e48"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40508050"/>
        <function-ref name="isInput" scoped="" ref="0x40508130"/>
        <function-ref name="toggle" scoped="" ref="0x40508210"/>
        <function-ref name="isOutput" scoped="" ref="0x405082f0"/>
        <function-ref name="get" scoped="" ref="0x405083d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x405084b0"/>
        <function-ref name="set" scoped="" ref="0x40508590"/>
        <function-ref name="clr" scoped="" ref="0x40508670"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin0" ref="0x4050cdc8" loc="35:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin0" scoped="" ref="0x4050cdc8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4050b010"/>
        <function-ref name="isInput" scoped="" ref="0x4050b0f0"/>
        <function-ref name="toggle" scoped="" ref="0x4050b1d0"/>
        <function-ref name="isOutput" scoped="" ref="0x4050b2b0"/>
        <function-ref name="get" scoped="" ref="0x4050b390"/>
        <function-ref name="makeOutput" scoped="" ref="0x4050b470"/>
        <function-ref name="set" scoped="" ref="0x4050b550"/>
        <function-ref name="clr" scoped="" ref="0x4050b630"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin3" ref="0x4050aac8" loc="38:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin3" scoped="" ref="0x4050aac8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4050aca0"/>
        <function-ref name="isInput" scoped="" ref="0x4050ad80"/>
        <function-ref name="toggle" scoped="" ref="0x4050ae60"/>
        <function-ref name="isOutput" scoped="" ref="0x40509010"/>
        <function-ref name="get" scoped="" ref="0x405090f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x405091d0"/>
        <function-ref name="set" scoped="" ref="0x405092b0"/>
        <function-ref name="clr" scoped="" ref="0x40509390"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin6" ref="0x405087d0" loc="41:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin6" scoped="" ref="0x405087d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x405089a8"/>
        <function-ref name="isInput" scoped="" ref="0x40508a88"/>
        <function-ref name="toggle" scoped="" ref="0x40508b68"/>
        <function-ref name="isOutput" scoped="" ref="0x40508c48"/>
        <function-ref name="get" scoped="" ref="0x40508d28"/>
        <function-ref name="makeOutput" scoped="" ref="0x40508e08"/>
        <function-ref name="set" scoped="" ref="0x40508ee8"/>
        <function-ref name="clr" scoped="" ref="0x40507010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin1" ref="0x4050b790" loc="36:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin1" scoped="" ref="0x4050b790"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4050b968"/>
        <function-ref name="isInput" scoped="" ref="0x4050ba48"/>
        <function-ref name="toggle" scoped="" ref="0x4050bb28"/>
        <function-ref name="isOutput" scoped="" ref="0x4050bc08"/>
        <function-ref name="get" scoped="" ref="0x4050bce8"/>
        <function-ref name="makeOutput" scoped="" ref="0x4050bdc8"/>
        <function-ref name="set" scoped="" ref="0x4050bea8"/>
        <function-ref name="clr" scoped="" ref="0x4050a010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin4" ref="0x405094f0" loc="39:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin4" scoped="" ref="0x405094f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x405096c8"/>
        <function-ref name="isInput" scoped="" ref="0x405097a8"/>
        <function-ref name="toggle" scoped="" ref="0x40509888"/>
        <function-ref name="isOutput" scoped="" ref="0x40509968"/>
        <function-ref name="get" scoped="" ref="0x40509a48"/>
        <function-ref name="makeOutput" scoped="" ref="0x40509b28"/>
        <function-ref name="set" scoped="" ref="0x40509c08"/>
        <function-ref name="clr" scoped="" ref="0x40509ce8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin7" ref="0x40507170" loc="42:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin7" scoped="" ref="0x40507170"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40507348"/>
        <function-ref name="isInput" scoped="" ref="0x40507428"/>
        <function-ref name="toggle" scoped="" ref="0x40507508"/>
        <function-ref name="isOutput" scoped="" ref="0x405075e8"/>
        <function-ref name="get" scoped="" ref="0x405076c8"/>
        <function-ref name="makeOutput" scoped="" ref="0x405077a8"/>
        <function-ref name="set" scoped="" ref="0x40507888"/>
        <function-ref name="clr" scoped="" ref="0x40507968"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x40cf4538" loc="37:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC.Bit0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x40cf4538"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40cf4710"/>
        <function-ref name="isInput" scoped="" ref="0x40cf47f0"/>
        <function-ref name="toggle" scoped="" ref="0x40cf48d0"/>
        <function-ref name="isOutput" scoped="" ref="0x40cf49b0"/>
        <function-ref name="get" scoped="" ref="0x40cf4a90"/>
        <function-ref name="makeOutput" scoped="" ref="0x40cf4b70"/>
        <function-ref name="set" scoped="" ref="0x40cf4c50"/>
        <function-ref name="clr" scoped="" ref="0x40cf4d30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x40cf2010" loc="37:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC.Bit1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x40cf2010"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40cf21e8"/>
        <function-ref name="isInput" scoped="" ref="0x40cf22c8"/>
        <function-ref name="toggle" scoped="" ref="0x40cf23a8"/>
        <function-ref name="isOutput" scoped="" ref="0x40cf2488"/>
        <function-ref name="get" scoped="" ref="0x40cf2568"/>
        <function-ref name="makeOutput" scoped="" ref="0x40cf2648"/>
        <function-ref name="set" scoped="" ref="0x40cf2728"/>
        <function-ref name="clr" scoped="" ref="0x40cf2808"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x40cf19e8" loc="37:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC.Bit2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x40cf19e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40cf1bc0"/>
        <function-ref name="isInput" scoped="" ref="0x40cf1ca0"/>
        <function-ref name="toggle" scoped="" ref="0x40cf1d80"/>
        <function-ref name="isOutput" scoped="" ref="0x40cf1e60"/>
        <function-ref name="get" scoped="" ref="0x40cf0010"/>
        <function-ref name="makeOutput" scoped="" ref="0x40cf00f0"/>
        <function-ref name="set" scoped="" ref="0x40cf01d0"/>
        <function-ref name="clr" scoped="" ref="0x40cf02b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x40cef538" loc="37:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC.Bit3"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x40cef538"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40cef710"/>
        <function-ref name="isInput" scoped="" ref="0x40cef7f0"/>
        <function-ref name="toggle" scoped="" ref="0x40cef8d0"/>
        <function-ref name="isOutput" scoped="" ref="0x40cef9b0"/>
        <function-ref name="get" scoped="" ref="0x40cefa90"/>
        <function-ref name="makeOutput" scoped="" ref="0x40cefb70"/>
        <function-ref name="set" scoped="" ref="0x40cefc50"/>
        <function-ref name="clr" scoped="" ref="0x40cefd30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x40ced010" loc="37:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC.Bit4"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x40ced010"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40ced1e8"/>
        <function-ref name="isInput" scoped="" ref="0x40ced2c8"/>
        <function-ref name="toggle" scoped="" ref="0x40ced3a8"/>
        <function-ref name="isOutput" scoped="" ref="0x40ced488"/>
        <function-ref name="get" scoped="" ref="0x40ced568"/>
        <function-ref name="makeOutput" scoped="" ref="0x40ced648"/>
        <function-ref name="set" scoped="" ref="0x40ced728"/>
        <function-ref name="clr" scoped="" ref="0x40ced808"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x40cec9e8" loc="37:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC.Bit5"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x40cec9e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40cecbc0"/>
        <function-ref name="isInput" scoped="" ref="0x40cecca0"/>
        <function-ref name="toggle" scoped="" ref="0x40cecd80"/>
        <function-ref name="isOutput" scoped="" ref="0x40cece60"/>
        <function-ref name="get" scoped="" ref="0x40ceb010"/>
        <function-ref name="makeOutput" scoped="" ref="0x40ceb0f0"/>
        <function-ref name="set" scoped="" ref="0x40ceb1d0"/>
        <function-ref name="clr" scoped="" ref="0x40ceb2b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x40cea538" loc="37:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC.Bit6"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x40cea538"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40cea710"/>
        <function-ref name="isInput" scoped="" ref="0x40cea7f0"/>
        <function-ref name="toggle" scoped="" ref="0x40cea8d0"/>
        <function-ref name="isOutput" scoped="" ref="0x40cea9b0"/>
        <function-ref name="get" scoped="" ref="0x40ceaa90"/>
        <function-ref name="makeOutput" scoped="" ref="0x40ceab70"/>
        <function-ref name="set" scoped="" ref="0x40ceac50"/>
        <function-ref name="clr" scoped="" ref="0x40cead30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x40ce8010" loc="37:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC.Bit7"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x40ce8010"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40ce81e8"/>
        <function-ref name="isInput" scoped="" ref="0x40ce82c8"/>
        <function-ref name="toggle" scoped="" ref="0x40ce83a8"/>
        <function-ref name="isOutput" scoped="" ref="0x40ce8488"/>
        <function-ref name="get" scoped="" ref="0x40ce8568"/>
        <function-ref name="makeOutput" scoped="" ref="0x40ce8648"/>
        <function-ref name="set" scoped="" ref="0x40ce8728"/>
        <function-ref name="clr" scoped="" ref="0x40ce8808"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin2" ref="0x405129e8" loc="37:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin2" scoped="" ref="0x405129e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40512bc0"/>
        <function-ref name="isInput" scoped="" ref="0x40512ca0"/>
        <function-ref name="toggle" scoped="" ref="0x40512d80"/>
        <function-ref name="isOutput" scoped="" ref="0x40512e60"/>
        <function-ref name="get" scoped="" ref="0x40511010"/>
        <function-ref name="makeOutput" scoped="" ref="0x405110f0"/>
        <function-ref name="set" scoped="" ref="0x405111d0"/>
        <function-ref name="clr" scoped="" ref="0x405112b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin5" ref="0x40510790" loc="40:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin5" scoped="" ref="0x40510790"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40510968"/>
        <function-ref name="isInput" scoped="" ref="0x40510a48"/>
        <function-ref name="toggle" scoped="" ref="0x40510b28"/>
        <function-ref name="isOutput" scoped="" ref="0x40510c08"/>
        <function-ref name="get" scoped="" ref="0x40510ce8"/>
        <function-ref name="makeOutput" scoped="" ref="0x40510dc8"/>
        <function-ref name="set" scoped="" ref="0x40510ea8"/>
        <function-ref name="clr" scoped="" ref="0x4050f010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin0" ref="0x405136f8" loc="35:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin0" scoped="" ref="0x405136f8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x405138d0"/>
        <function-ref name="isInput" scoped="" ref="0x405139b0"/>
        <function-ref name="toggle" scoped="" ref="0x40513a90"/>
        <function-ref name="isOutput" scoped="" ref="0x40513b70"/>
        <function-ref name="get" scoped="" ref="0x40513c50"/>
        <function-ref name="makeOutput" scoped="" ref="0x40513d30"/>
        <function-ref name="set" scoped="" ref="0x40513e10"/>
        <function-ref name="clr" scoped="" ref="0x40513ef0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin3" ref="0x40511410" loc="38:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin3" scoped="" ref="0x40511410"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x405115e8"/>
        <function-ref name="isInput" scoped="" ref="0x405116c8"/>
        <function-ref name="toggle" scoped="" ref="0x405117a8"/>
        <function-ref name="isOutput" scoped="" ref="0x40511888"/>
        <function-ref name="get" scoped="" ref="0x40511968"/>
        <function-ref name="makeOutput" scoped="" ref="0x40511a48"/>
        <function-ref name="set" scoped="" ref="0x40511b28"/>
        <function-ref name="clr" scoped="" ref="0x40511c08"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin6" ref="0x4050f170" loc="41:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin6" scoped="" ref="0x4050f170"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4050f348"/>
        <function-ref name="isInput" scoped="" ref="0x4050f428"/>
        <function-ref name="toggle" scoped="" ref="0x4050f508"/>
        <function-ref name="isOutput" scoped="" ref="0x4050f5e8"/>
        <function-ref name="get" scoped="" ref="0x4050f6c8"/>
        <function-ref name="makeOutput" scoped="" ref="0x4050f7a8"/>
        <function-ref name="set" scoped="" ref="0x4050f888"/>
        <function-ref name="clr" scoped="" ref="0x4050f968"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin1" ref="0x40512090" loc="36:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin1" scoped="" ref="0x40512090"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40512268"/>
        <function-ref name="isInput" scoped="" ref="0x40512348"/>
        <function-ref name="toggle" scoped="" ref="0x40512428"/>
        <function-ref name="isOutput" scoped="" ref="0x40512508"/>
        <function-ref name="get" scoped="" ref="0x405125e8"/>
        <function-ref name="makeOutput" scoped="" ref="0x405126c8"/>
        <function-ref name="set" scoped="" ref="0x405127a8"/>
        <function-ref name="clr" scoped="" ref="0x40512888"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin4" ref="0x40511d68" loc="39:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin4" scoped="" ref="0x40511d68"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40510010"/>
        <function-ref name="isInput" scoped="" ref="0x405100f0"/>
        <function-ref name="toggle" scoped="" ref="0x405101d0"/>
        <function-ref name="isOutput" scoped="" ref="0x405102b0"/>
        <function-ref name="get" scoped="" ref="0x40510390"/>
        <function-ref name="makeOutput" scoped="" ref="0x40510470"/>
        <function-ref name="set" scoped="" ref="0x40510550"/>
        <function-ref name="clr" scoped="" ref="0x40510630"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin7" ref="0x4050fac8" loc="42:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin7" scoped="" ref="0x4050fac8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4050fca0"/>
        <function-ref name="isInput" scoped="" ref="0x4050fd80"/>
        <function-ref name="toggle" scoped="" ref="0x4050fe60"/>
        <function-ref name="isOutput" scoped="" ref="0x4050e010"/>
        <function-ref name="get" scoped="" ref="0x4050e0f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x4050e1d0"/>
        <function-ref name="set" scoped="" ref="0x4050e2b0"/>
        <function-ref name="clr" scoped="" ref="0x4050e390"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x40d19c20" loc="37:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD.Bit0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x40d19c20"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40d19df8"/>
        <function-ref name="isInput" scoped="" ref="0x40d19ed8"/>
        <function-ref name="toggle" scoped="" ref="0x40d17010"/>
        <function-ref name="isOutput" scoped="" ref="0x40d170f0"/>
        <function-ref name="get" scoped="" ref="0x40d171d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x40d172b0"/>
        <function-ref name="set" scoped="" ref="0x40d17390"/>
        <function-ref name="clr" scoped="" ref="0x40d17470"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x40d166c0" loc="37:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD.Bit1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x40d166c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40d16898"/>
        <function-ref name="isInput" scoped="" ref="0x40d16978"/>
        <function-ref name="toggle" scoped="" ref="0x40d16a58"/>
        <function-ref name="isOutput" scoped="" ref="0x40d16b38"/>
        <function-ref name="get" scoped="" ref="0x40d16c18"/>
        <function-ref name="makeOutput" scoped="" ref="0x40d16cf8"/>
        <function-ref name="set" scoped="" ref="0x40d16dd8"/>
        <function-ref name="clr" scoped="" ref="0x40d16eb8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x40d140b0" loc="37:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD.Bit2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x40d140b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40d14288"/>
        <function-ref name="isInput" scoped="" ref="0x40d14368"/>
        <function-ref name="toggle" scoped="" ref="0x40d14448"/>
        <function-ref name="isOutput" scoped="" ref="0x40d14528"/>
        <function-ref name="get" scoped="" ref="0x40d14608"/>
        <function-ref name="makeOutput" scoped="" ref="0x40d146e8"/>
        <function-ref name="set" scoped="" ref="0x40d147c8"/>
        <function-ref name="clr" scoped="" ref="0x40d148a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x40d13a88" loc="37:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD.Bit3"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x40d13a88"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40d13c60"/>
        <function-ref name="isInput" scoped="" ref="0x40d13d40"/>
        <function-ref name="toggle" scoped="" ref="0x40d13e20"/>
        <function-ref name="isOutput" scoped="" ref="0x40d13f00"/>
        <function-ref name="get" scoped="" ref="0x40d42010"/>
        <function-ref name="makeOutput" scoped="" ref="0x40d420f0"/>
        <function-ref name="set" scoped="" ref="0x40d421d0"/>
        <function-ref name="clr" scoped="" ref="0x40d422b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x40d41538" loc="37:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD.Bit4"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x40d41538"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40d41710"/>
        <function-ref name="isInput" scoped="" ref="0x40d417f0"/>
        <function-ref name="toggle" scoped="" ref="0x40d418d0"/>
        <function-ref name="isOutput" scoped="" ref="0x40d419b0"/>
        <function-ref name="get" scoped="" ref="0x40d41a90"/>
        <function-ref name="makeOutput" scoped="" ref="0x40d41b70"/>
        <function-ref name="set" scoped="" ref="0x40d41c50"/>
        <function-ref name="clr" scoped="" ref="0x40d41d30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x40d3f010" loc="37:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD.Bit5"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x40d3f010"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40d3f1e8"/>
        <function-ref name="isInput" scoped="" ref="0x40d3f2c8"/>
        <function-ref name="toggle" scoped="" ref="0x40d3f3a8"/>
        <function-ref name="isOutput" scoped="" ref="0x40d3f488"/>
        <function-ref name="get" scoped="" ref="0x40d3f568"/>
        <function-ref name="makeOutput" scoped="" ref="0x40d3f648"/>
        <function-ref name="set" scoped="" ref="0x40d3f728"/>
        <function-ref name="clr" scoped="" ref="0x40d3f808"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x40d3e9e8" loc="37:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD.Bit6"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x40d3e9e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40d3ebc0"/>
        <function-ref name="isInput" scoped="" ref="0x40d3eca0"/>
        <function-ref name="toggle" scoped="" ref="0x40d3ed80"/>
        <function-ref name="isOutput" scoped="" ref="0x40d3ee60"/>
        <function-ref name="get" scoped="" ref="0x40d3d010"/>
        <function-ref name="makeOutput" scoped="" ref="0x40d3d0f0"/>
        <function-ref name="set" scoped="" ref="0x40d3d1d0"/>
        <function-ref name="clr" scoped="" ref="0x40d3d2b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x40d3c538" loc="37:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD.Bit7"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x40d3c538"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40d3c710"/>
        <function-ref name="isInput" scoped="" ref="0x40d3c7f0"/>
        <function-ref name="toggle" scoped="" ref="0x40d3c8d0"/>
        <function-ref name="isOutput" scoped="" ref="0x40d3c9b0"/>
        <function-ref name="get" scoped="" ref="0x40d3ca90"/>
        <function-ref name="makeOutput" scoped="" ref="0x40d3cb70"/>
        <function-ref name="set" scoped="" ref="0x40d3cc50"/>
        <function-ref name="clr" scoped="" ref="0x40d3cd30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin2" ref="0x4051a410" loc="37:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin2" scoped="" ref="0x4051a410"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4051a5e8"/>
        <function-ref name="isInput" scoped="" ref="0x4051a6c8"/>
        <function-ref name="toggle" scoped="" ref="0x4051a7a8"/>
        <function-ref name="isOutput" scoped="" ref="0x4051a888"/>
        <function-ref name="get" scoped="" ref="0x4051a968"/>
        <function-ref name="makeOutput" scoped="" ref="0x4051aa48"/>
        <function-ref name="set" scoped="" ref="0x4051ab28"/>
        <function-ref name="clr" scoped="" ref="0x4051ac08"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin5" ref="0x40517170" loc="40:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin5" scoped="" ref="0x40517170"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40517348"/>
        <function-ref name="isInput" scoped="" ref="0x40517428"/>
        <function-ref name="toggle" scoped="" ref="0x40517508"/>
        <function-ref name="isOutput" scoped="" ref="0x405175e8"/>
        <function-ref name="get" scoped="" ref="0x405176c8"/>
        <function-ref name="makeOutput" scoped="" ref="0x405177a8"/>
        <function-ref name="set" scoped="" ref="0x40517888"/>
        <function-ref name="clr" scoped="" ref="0x40517968"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin0" ref="0x4051b128" loc="35:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin0" scoped="" ref="0x4051b128"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4051b300"/>
        <function-ref name="isInput" scoped="" ref="0x4051b3e0"/>
        <function-ref name="toggle" scoped="" ref="0x4051b4c0"/>
        <function-ref name="isOutput" scoped="" ref="0x4051b5a0"/>
        <function-ref name="get" scoped="" ref="0x4051b680"/>
        <function-ref name="makeOutput" scoped="" ref="0x4051b760"/>
        <function-ref name="set" scoped="" ref="0x4051b840"/>
        <function-ref name="clr" scoped="" ref="0x4051b920"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin3" ref="0x4051ad68" loc="38:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin3" scoped="" ref="0x4051ad68"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40518010"/>
        <function-ref name="isInput" scoped="" ref="0x405180f0"/>
        <function-ref name="toggle" scoped="" ref="0x405181d0"/>
        <function-ref name="isOutput" scoped="" ref="0x405182b0"/>
        <function-ref name="get" scoped="" ref="0x40518390"/>
        <function-ref name="makeOutput" scoped="" ref="0x40518470"/>
        <function-ref name="set" scoped="" ref="0x40518550"/>
        <function-ref name="clr" scoped="" ref="0x40518630"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin6" ref="0x40517ac8" loc="41:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin6" scoped="" ref="0x40517ac8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40517ca0"/>
        <function-ref name="isInput" scoped="" ref="0x40517d80"/>
        <function-ref name="toggle" scoped="" ref="0x40517e60"/>
        <function-ref name="isOutput" scoped="" ref="0x40516010"/>
        <function-ref name="get" scoped="" ref="0x405160f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x405161d0"/>
        <function-ref name="set" scoped="" ref="0x405162b0"/>
        <function-ref name="clr" scoped="" ref="0x40516390"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin1" ref="0x4051ba80" loc="36:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin1" scoped="" ref="0x4051ba80"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4051bc58"/>
        <function-ref name="isInput" scoped="" ref="0x4051bd38"/>
        <function-ref name="toggle" scoped="" ref="0x4051be18"/>
        <function-ref name="isOutput" scoped="" ref="0x4051bef8"/>
        <function-ref name="get" scoped="" ref="0x4051a010"/>
        <function-ref name="makeOutput" scoped="" ref="0x4051a0f0"/>
        <function-ref name="set" scoped="" ref="0x4051a1d0"/>
        <function-ref name="clr" scoped="" ref="0x4051a2b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin4" ref="0x40518790" loc="39:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin4" scoped="" ref="0x40518790"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40518968"/>
        <function-ref name="isInput" scoped="" ref="0x40518a48"/>
        <function-ref name="toggle" scoped="" ref="0x40518b28"/>
        <function-ref name="isOutput" scoped="" ref="0x40518c08"/>
        <function-ref name="get" scoped="" ref="0x40518ce8"/>
        <function-ref name="makeOutput" scoped="" ref="0x40518dc8"/>
        <function-ref name="set" scoped="" ref="0x40518ea8"/>
        <function-ref name="clr" scoped="" ref="0x40517010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin7" ref="0x405164f0" loc="42:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin7" scoped="" ref="0x405164f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x405166c8"/>
        <function-ref name="isInput" scoped="" ref="0x405167a8"/>
        <function-ref name="toggle" scoped="" ref="0x40516888"/>
        <function-ref name="isOutput" scoped="" ref="0x40516968"/>
        <function-ref name="get" scoped="" ref="0x40516a48"/>
        <function-ref name="makeOutput" scoped="" ref="0x40516b28"/>
        <function-ref name="set" scoped="" ref="0x40516c08"/>
        <function-ref name="clr" scoped="" ref="0x40516ce8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x40d70938" loc="37:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE.Bit0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x40d70938"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40d70b10"/>
        <function-ref name="isInput" scoped="" ref="0x40d70bf0"/>
        <function-ref name="toggle" scoped="" ref="0x40d70cd0"/>
        <function-ref name="isOutput" scoped="" ref="0x40d70db0"/>
        <function-ref name="get" scoped="" ref="0x40d70e90"/>
        <function-ref name="makeOutput" scoped="" ref="0x40d6f010"/>
        <function-ref name="set" scoped="" ref="0x40d6f0f0"/>
        <function-ref name="clr" scoped="" ref="0x40d6f1d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x40d6e3b0" loc="37:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE.Bit1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x40d6e3b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40d6e588"/>
        <function-ref name="isInput" scoped="" ref="0x40d6e668"/>
        <function-ref name="toggle" scoped="" ref="0x40d6e748"/>
        <function-ref name="isOutput" scoped="" ref="0x40d6e828"/>
        <function-ref name="get" scoped="" ref="0x40d6e908"/>
        <function-ref name="makeOutput" scoped="" ref="0x40d6e9e8"/>
        <function-ref name="set" scoped="" ref="0x40d6eac8"/>
        <function-ref name="clr" scoped="" ref="0x40d6eba8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x40d6dd70" loc="37:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE.Bit2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x40d6dd70"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40d6c010"/>
        <function-ref name="isInput" scoped="" ref="0x40d6c0f0"/>
        <function-ref name="toggle" scoped="" ref="0x40d6c1d0"/>
        <function-ref name="isOutput" scoped="" ref="0x40d6c2b0"/>
        <function-ref name="get" scoped="" ref="0x40d6c390"/>
        <function-ref name="makeOutput" scoped="" ref="0x40d6c470"/>
        <function-ref name="set" scoped="" ref="0x40d6c550"/>
        <function-ref name="clr" scoped="" ref="0x40d6c630"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x40d6b7f8" loc="37:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE.Bit3"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x40d6b7f8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40d6b9d0"/>
        <function-ref name="isInput" scoped="" ref="0x40d6bab0"/>
        <function-ref name="toggle" scoped="" ref="0x40d6bb90"/>
        <function-ref name="isOutput" scoped="" ref="0x40d6bc70"/>
        <function-ref name="get" scoped="" ref="0x40d6bd50"/>
        <function-ref name="makeOutput" scoped="" ref="0x40d6be30"/>
        <function-ref name="set" scoped="" ref="0x40d6bf10"/>
        <function-ref name="clr" scoped="" ref="0x40d6a010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x40d69228" loc="37:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE.Bit4"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x40d69228"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40d69400"/>
        <function-ref name="isInput" scoped="" ref="0x40d694e0"/>
        <function-ref name="toggle" scoped="" ref="0x40d695c0"/>
        <function-ref name="isOutput" scoped="" ref="0x40d696a0"/>
        <function-ref name="get" scoped="" ref="0x40d69780"/>
        <function-ref name="makeOutput" scoped="" ref="0x40d69860"/>
        <function-ref name="set" scoped="" ref="0x40d69940"/>
        <function-ref name="clr" scoped="" ref="0x40d69a20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x40d68c08" loc="37:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE.Bit5"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x40d68c08"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40d68de0"/>
        <function-ref name="isInput" scoped="" ref="0x40d68ec0"/>
        <function-ref name="toggle" scoped="" ref="0x40d67010"/>
        <function-ref name="isOutput" scoped="" ref="0x40d670f0"/>
        <function-ref name="get" scoped="" ref="0x40d671d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x40d672b0"/>
        <function-ref name="set" scoped="" ref="0x40d67390"/>
        <function-ref name="clr" scoped="" ref="0x40d67470"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x40d666c0" loc="37:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE.Bit6"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x40d666c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40d66898"/>
        <function-ref name="isInput" scoped="" ref="0x40d66978"/>
        <function-ref name="toggle" scoped="" ref="0x40d66a58"/>
        <function-ref name="isOutput" scoped="" ref="0x40d66b38"/>
        <function-ref name="get" scoped="" ref="0x40d66c18"/>
        <function-ref name="makeOutput" scoped="" ref="0x40d66cf8"/>
        <function-ref name="set" scoped="" ref="0x40d66dd8"/>
        <function-ref name="clr" scoped="" ref="0x40d66eb8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x40d640b0" loc="37:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE.Bit7"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x40d640b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40d64288"/>
        <function-ref name="isInput" scoped="" ref="0x40d64368"/>
        <function-ref name="toggle" scoped="" ref="0x40d64448"/>
        <function-ref name="isOutput" scoped="" ref="0x40d64528"/>
        <function-ref name="get" scoped="" ref="0x40d64608"/>
        <function-ref name="makeOutput" scoped="" ref="0x40d646e8"/>
        <function-ref name="set" scoped="" ref="0x40d647c8"/>
        <function-ref name="clr" scoped="" ref="0x40d648a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin2" ref="0x40522c88" loc="37:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin2" scoped="" ref="0x40522c88"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40522e60"/>
        <function-ref name="isInput" scoped="" ref="0x40521010"/>
        <function-ref name="toggle" scoped="" ref="0x405210f0"/>
        <function-ref name="isOutput" scoped="" ref="0x405211d0"/>
        <function-ref name="get" scoped="" ref="0x405212b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x40521390"/>
        <function-ref name="set" scoped="" ref="0x40521470"/>
        <function-ref name="clr" scoped="" ref="0x40521550"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin5" ref="0x40520988" loc="40:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin5" scoped="" ref="0x40520988"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40520b60"/>
        <function-ref name="isInput" scoped="" ref="0x40520c40"/>
        <function-ref name="toggle" scoped="" ref="0x40520d20"/>
        <function-ref name="isOutput" scoped="" ref="0x40520e00"/>
        <function-ref name="get" scoped="" ref="0x40520ee0"/>
        <function-ref name="makeOutput" scoped="" ref="0x4051f010"/>
        <function-ref name="set" scoped="" ref="0x4051f0f0"/>
        <function-ref name="clr" scoped="" ref="0x4051f1d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin0" ref="0x405239c0" loc="35:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin0" scoped="" ref="0x405239c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40523b98"/>
        <function-ref name="isInput" scoped="" ref="0x40523c78"/>
        <function-ref name="toggle" scoped="" ref="0x40523d58"/>
        <function-ref name="isOutput" scoped="" ref="0x40523e38"/>
        <function-ref name="get" scoped="" ref="0x40523f18"/>
        <function-ref name="makeOutput" scoped="" ref="0x40522010"/>
        <function-ref name="set" scoped="" ref="0x405220f0"/>
        <function-ref name="clr" scoped="" ref="0x405221d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin3" ref="0x405216b0" loc="38:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin3" scoped="" ref="0x405216b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40521888"/>
        <function-ref name="isInput" scoped="" ref="0x40521968"/>
        <function-ref name="toggle" scoped="" ref="0x40521a48"/>
        <function-ref name="isOutput" scoped="" ref="0x40521b28"/>
        <function-ref name="get" scoped="" ref="0x40521c08"/>
        <function-ref name="makeOutput" scoped="" ref="0x40521ce8"/>
        <function-ref name="set" scoped="" ref="0x40521dc8"/>
        <function-ref name="clr" scoped="" ref="0x40521ea8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin6" ref="0x4051f330" loc="41:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin6" scoped="" ref="0x4051f330"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4051f508"/>
        <function-ref name="isInput" scoped="" ref="0x4051f5e8"/>
        <function-ref name="toggle" scoped="" ref="0x4051f6c8"/>
        <function-ref name="isOutput" scoped="" ref="0x4051f7a8"/>
        <function-ref name="get" scoped="" ref="0x4051f888"/>
        <function-ref name="makeOutput" scoped="" ref="0x4051f968"/>
        <function-ref name="set" scoped="" ref="0x4051fa48"/>
        <function-ref name="clr" scoped="" ref="0x4051fb28"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin1" ref="0x40522330" loc="36:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin1" scoped="" ref="0x40522330"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40522508"/>
        <function-ref name="isInput" scoped="" ref="0x405225e8"/>
        <function-ref name="toggle" scoped="" ref="0x405226c8"/>
        <function-ref name="isOutput" scoped="" ref="0x405227a8"/>
        <function-ref name="get" scoped="" ref="0x40522888"/>
        <function-ref name="makeOutput" scoped="" ref="0x40522968"/>
        <function-ref name="set" scoped="" ref="0x40522a48"/>
        <function-ref name="clr" scoped="" ref="0x40522b28"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin4" ref="0x40520030" loc="39:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin4" scoped="" ref="0x40520030"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40520208"/>
        <function-ref name="isInput" scoped="" ref="0x405202e8"/>
        <function-ref name="toggle" scoped="" ref="0x405203c8"/>
        <function-ref name="isOutput" scoped="" ref="0x405204a8"/>
        <function-ref name="get" scoped="" ref="0x40520588"/>
        <function-ref name="makeOutput" scoped="" ref="0x40520668"/>
        <function-ref name="set" scoped="" ref="0x40520748"/>
        <function-ref name="clr" scoped="" ref="0x40520828"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin7" ref="0x4051fc88" loc="42:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin7" scoped="" ref="0x4051fc88"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4051fe60"/>
        <function-ref name="isInput" scoped="" ref="0x4052d010"/>
        <function-ref name="toggle" scoped="" ref="0x4052d0f0"/>
        <function-ref name="isOutput" scoped="" ref="0x4052d1d0"/>
        <function-ref name="get" scoped="" ref="0x4052d2b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x4052d390"/>
        <function-ref name="set" scoped="" ref="0x4052d470"/>
        <function-ref name="clr" scoped="" ref="0x4052d550"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x40d98538" loc="37:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF.Bit0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x40d98538"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40d98710"/>
        <function-ref name="isInput" scoped="" ref="0x40d987f0"/>
        <function-ref name="toggle" scoped="" ref="0x40d988d0"/>
        <function-ref name="isOutput" scoped="" ref="0x40d989b0"/>
        <function-ref name="get" scoped="" ref="0x40d98a90"/>
        <function-ref name="makeOutput" scoped="" ref="0x40d98b70"/>
        <function-ref name="set" scoped="" ref="0x40d98c50"/>
        <function-ref name="clr" scoped="" ref="0x40d98d30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x40d96010" loc="37:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF.Bit1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x40d96010"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40d961e8"/>
        <function-ref name="isInput" scoped="" ref="0x40d962c8"/>
        <function-ref name="toggle" scoped="" ref="0x40d963a8"/>
        <function-ref name="isOutput" scoped="" ref="0x40d96488"/>
        <function-ref name="get" scoped="" ref="0x40d96568"/>
        <function-ref name="makeOutput" scoped="" ref="0x40d96648"/>
        <function-ref name="set" scoped="" ref="0x40d96728"/>
        <function-ref name="clr" scoped="" ref="0x40d96808"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x40d959e8" loc="37:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF.Bit2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x40d959e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40d95bc0"/>
        <function-ref name="isInput" scoped="" ref="0x40d95ca0"/>
        <function-ref name="toggle" scoped="" ref="0x40d95d80"/>
        <function-ref name="isOutput" scoped="" ref="0x40d95e60"/>
        <function-ref name="get" scoped="" ref="0x40d94010"/>
        <function-ref name="makeOutput" scoped="" ref="0x40d940f0"/>
        <function-ref name="set" scoped="" ref="0x40d941d0"/>
        <function-ref name="clr" scoped="" ref="0x40d942b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x40d93538" loc="37:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF.Bit3"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x40d93538"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40d93710"/>
        <function-ref name="isInput" scoped="" ref="0x40d937f0"/>
        <function-ref name="toggle" scoped="" ref="0x40d938d0"/>
        <function-ref name="isOutput" scoped="" ref="0x40d939b0"/>
        <function-ref name="get" scoped="" ref="0x40d93a90"/>
        <function-ref name="makeOutput" scoped="" ref="0x40d93b70"/>
        <function-ref name="set" scoped="" ref="0x40d93c50"/>
        <function-ref name="clr" scoped="" ref="0x40d93d30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x40d91010" loc="37:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF.Bit4"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x40d91010"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40d911e8"/>
        <function-ref name="isInput" scoped="" ref="0x40d912c8"/>
        <function-ref name="toggle" scoped="" ref="0x40d913a8"/>
        <function-ref name="isOutput" scoped="" ref="0x40d91488"/>
        <function-ref name="get" scoped="" ref="0x40d91568"/>
        <function-ref name="makeOutput" scoped="" ref="0x40d91648"/>
        <function-ref name="set" scoped="" ref="0x40d91728"/>
        <function-ref name="clr" scoped="" ref="0x40d91808"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x40d909e8" loc="37:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF.Bit5"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x40d909e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40d90bc0"/>
        <function-ref name="isInput" scoped="" ref="0x40d90ca0"/>
        <function-ref name="toggle" scoped="" ref="0x40d90d80"/>
        <function-ref name="isOutput" scoped="" ref="0x40d90e60"/>
        <function-ref name="get" scoped="" ref="0x40d8f010"/>
        <function-ref name="makeOutput" scoped="" ref="0x40d8f0f0"/>
        <function-ref name="set" scoped="" ref="0x40d8f1d0"/>
        <function-ref name="clr" scoped="" ref="0x40d8f2b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x40d8e538" loc="37:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF.Bit6"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x40d8e538"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40d8e710"/>
        <function-ref name="isInput" scoped="" ref="0x40d8e7f0"/>
        <function-ref name="toggle" scoped="" ref="0x40d8e8d0"/>
        <function-ref name="isOutput" scoped="" ref="0x40d8e9b0"/>
        <function-ref name="get" scoped="" ref="0x40d8ea90"/>
        <function-ref name="makeOutput" scoped="" ref="0x40d8eb70"/>
        <function-ref name="set" scoped="" ref="0x40d8ec50"/>
        <function-ref name="clr" scoped="" ref="0x40d8ed30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x40d8c010" loc="37:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF.Bit7"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x40d8c010"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40d8c1e8"/>
        <function-ref name="isInput" scoped="" ref="0x40d8c2c8"/>
        <function-ref name="toggle" scoped="" ref="0x40d8c3a8"/>
        <function-ref name="isOutput" scoped="" ref="0x40d8c488"/>
        <function-ref name="get" scoped="" ref="0x40d8c568"/>
        <function-ref name="makeOutput" scoped="" ref="0x40d8c648"/>
        <function-ref name="set" scoped="" ref="0x40d8c728"/>
        <function-ref name="clr" scoped="" ref="0x40d8c808"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x4052aca0" loc="38:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.F0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x4052aca0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4052ae78"/>
        <function-ref name="isInput" scoped="" ref="0x40529010"/>
        <function-ref name="toggle" scoped="" ref="0x405290f0"/>
        <function-ref name="isOutput" scoped="" ref="0x405291d0"/>
        <function-ref name="get" scoped="" ref="0x405292b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x40529390"/>
        <function-ref name="set" scoped="" ref="0x40529470"/>
        <function-ref name="clr" scoped="" ref="0x40529550"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x4053b3b0" loc="38:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.F1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x4053b3b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4053b588"/>
        <function-ref name="isInput" scoped="" ref="0x4053b668"/>
        <function-ref name="toggle" scoped="" ref="0x4053b748"/>
        <function-ref name="isOutput" scoped="" ref="0x4053b828"/>
        <function-ref name="get" scoped="" ref="0x4053b908"/>
        <function-ref name="makeOutput" scoped="" ref="0x4053b9e8"/>
        <function-ref name="set" scoped="" ref="0x4053bac8"/>
        <function-ref name="clr" scoped="" ref="0x4053bba8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x40539978" loc="38:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.F2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x40539978"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40539b50"/>
        <function-ref name="isInput" scoped="" ref="0x40539c30"/>
        <function-ref name="toggle" scoped="" ref="0x40539d10"/>
        <function-ref name="isOutput" scoped="" ref="0x40539df0"/>
        <function-ref name="get" scoped="" ref="0x40539ed0"/>
        <function-ref name="makeOutput" scoped="" ref="0x40538010"/>
        <function-ref name="set" scoped="" ref="0x405380f0"/>
        <function-ref name="clr" scoped="" ref="0x405381d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x40545010" loc="38:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.F3"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x40545010"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x405451e8"/>
        <function-ref name="isInput" scoped="" ref="0x405452c8"/>
        <function-ref name="toggle" scoped="" ref="0x405453a8"/>
        <function-ref name="isOutput" scoped="" ref="0x40545488"/>
        <function-ref name="get" scoped="" ref="0x40545568"/>
        <function-ref name="makeOutput" scoped="" ref="0x40545648"/>
        <function-ref name="set" scoped="" ref="0x40545728"/>
        <function-ref name="clr" scoped="" ref="0x40545808"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x405435e8" loc="38:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.F4"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x405435e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x405437c0"/>
        <function-ref name="isInput" scoped="" ref="0x405438a0"/>
        <function-ref name="toggle" scoped="" ref="0x40543980"/>
        <function-ref name="isOutput" scoped="" ref="0x40543a60"/>
        <function-ref name="get" scoped="" ref="0x40543b40"/>
        <function-ref name="makeOutput" scoped="" ref="0x40543c20"/>
        <function-ref name="set" scoped="" ref="0x40543d00"/>
        <function-ref name="clr" scoped="" ref="0x40543de0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x40540cb8" loc="38:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.F5"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x40540cb8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40540e90"/>
        <function-ref name="isInput" scoped="" ref="0x4053f010"/>
        <function-ref name="toggle" scoped="" ref="0x4053f0f0"/>
        <function-ref name="isOutput" scoped="" ref="0x4053f1d0"/>
        <function-ref name="get" scoped="" ref="0x4053f2b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x4053f390"/>
        <function-ref name="set" scoped="" ref="0x4053f470"/>
        <function-ref name="clr" scoped="" ref="0x4053f550"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x4054d3b0" loc="38:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.F6"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x4054d3b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4054d588"/>
        <function-ref name="isInput" scoped="" ref="0x4054d668"/>
        <function-ref name="toggle" scoped="" ref="0x4054d748"/>
        <function-ref name="isOutput" scoped="" ref="0x4054d828"/>
        <function-ref name="get" scoped="" ref="0x4054d908"/>
        <function-ref name="makeOutput" scoped="" ref="0x4054d9e8"/>
        <function-ref name="set" scoped="" ref="0x4054dac8"/>
        <function-ref name="clr" scoped="" ref="0x4054dba8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x4054b978" loc="38:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.F7"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x4054b978"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4054bb50"/>
        <function-ref name="isInput" scoped="" ref="0x4054bc30"/>
        <function-ref name="toggle" scoped="" ref="0x4054bd10"/>
        <function-ref name="isOutput" scoped="" ref="0x4054bdf0"/>
        <function-ref name="get" scoped="" ref="0x4054bed0"/>
        <function-ref name="makeOutput" scoped="" ref="0x4054a010"/>
        <function-ref name="set" scoped="" ref="0x4054a0f0"/>
        <function-ref name="clr" scoped="" ref="0x4054a1d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x40548ee0" loc="38:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.G0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x40548ee0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x405470e0"/>
        <function-ref name="isInput" scoped="" ref="0x405471c0"/>
        <function-ref name="toggle" scoped="" ref="0x405472a0"/>
        <function-ref name="isOutput" scoped="" ref="0x40547380"/>
        <function-ref name="get" scoped="" ref="0x40547460"/>
        <function-ref name="makeOutput" scoped="" ref="0x40547540"/>
        <function-ref name="set" scoped="" ref="0x40547620"/>
        <function-ref name="clr" scoped="" ref="0x40547700"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x405553e8" loc="38:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.G1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x405553e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x405555c0"/>
        <function-ref name="isInput" scoped="" ref="0x405556a0"/>
        <function-ref name="toggle" scoped="" ref="0x40555780"/>
        <function-ref name="isOutput" scoped="" ref="0x40555860"/>
        <function-ref name="get" scoped="" ref="0x40555940"/>
        <function-ref name="makeOutput" scoped="" ref="0x40555a20"/>
        <function-ref name="set" scoped="" ref="0x40555b00"/>
        <function-ref name="clr" scoped="" ref="0x40555be0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x405538f0" loc="38:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.G2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x405538f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40553ac8"/>
        <function-ref name="isInput" scoped="" ref="0x40553ba8"/>
        <function-ref name="toggle" scoped="" ref="0x40553c88"/>
        <function-ref name="isOutput" scoped="" ref="0x40553d68"/>
        <function-ref name="get" scoped="" ref="0x40553e48"/>
        <function-ref name="makeOutput" scoped="" ref="0x40553f28"/>
        <function-ref name="set" scoped="" ref="0x40551018"/>
        <function-ref name="clr" scoped="" ref="0x405510f8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x40550dd8" loc="38:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.G3"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x40550dd8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4054f010"/>
        <function-ref name="isInput" scoped="" ref="0x4054f0f0"/>
        <function-ref name="toggle" scoped="" ref="0x4054f1d0"/>
        <function-ref name="isOutput" scoped="" ref="0x4054f2b0"/>
        <function-ref name="get" scoped="" ref="0x4054f390"/>
        <function-ref name="makeOutput" scoped="" ref="0x4054f470"/>
        <function-ref name="set" scoped="" ref="0x4054f550"/>
        <function-ref name="clr" scoped="" ref="0x4054f630"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x4055d3b0" loc="38:/opt/tinyos-2.1.0/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.G4"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x4055d3b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4055d588"/>
        <function-ref name="isInput" scoped="" ref="0x4055d668"/>
        <function-ref name="toggle" scoped="" ref="0x4055d748"/>
        <function-ref name="isOutput" scoped="" ref="0x4055d828"/>
        <function-ref name="get" scoped="" ref="0x4055d908"/>
        <function-ref name="makeOutput" scoped="" ref="0x4055d9e8"/>
        <function-ref name="set" scoped="" ref="0x4055dac8"/>
        <function-ref name="clr" scoped="" ref="0x4055dba8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x405744d8" loc="27:/opt/tinyos-2.1.0/tos/platforms/mica/MeasureClockC.nc">
      <component-ref qname="MeasureClockC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x405744d8"/></type-interface>
      <attribute-value>
        <attribute-ref name="exactlyonce" ref="0x402c8ce0"/>
        <value-structured>
          <type-tag size="I:0" alignment="I:1"><attribute-ref name="exactlyonce" ref="0x402c8ce0"/></type-tag>
        </value-structured>
      </attribute-value>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x405746b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Atm128Calibrate" ref="0x40574888" loc="28:/opt/tinyos-2.1.0/tos/platforms/mica/MeasureClockC.nc">
      <component-ref qname="MeasureClockC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128Calibrate" scoped="" ref="0x40574888"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128Calibrate"/>
      </instance>
      <interface-functions>
        <function-ref name="baudrateRegister" scoped="" ref="0x40574a60"/>
        <function-ref name="cyclesPerJiffy" scoped="" ref="0x40574b40"/>
        <function-ref name="calibrateMicro" scoped="" ref="0x40574c20"/>
        <function-ref name="actualMicro" scoped="" ref="0x40574d00"/>
        <function-ref name="adcPrescaler" scoped="" ref="0x40574de0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SoftwareInit" ref="0x40592010" loc="49:/opt/tinyos-2.1.0/tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SoftwareInit" scoped="" ref="0x40592010"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x405921e8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Boot" ref="0x40577240" loc="46:/opt/tinyos-2.1.0/tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Boot" scoped="" ref="0x40577240"/></type-interface>
      <instance>
        <interfacedef-ref qname="Boot"/>
      </instance>
      <interface-functions>
        <function-ref name="booted" scoped="" ref="0x40577418"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PlatformInit" ref="0x40577ba0" loc="48:/opt/tinyos-2.1.0/tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PlatformInit" scoped="" ref="0x40577ba0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x40577d78"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Scheduler" ref="0x405775d8" loc="47:/opt/tinyos-2.1.0/tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Scheduler" scoped="" ref="0x405775d8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Scheduler"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x405777b0"/>
        <function-ref name="taskLoop" scoped="" ref="0x40577890"/>
        <function-ref name="runNextTask" scoped="" ref="0x40577970"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TaskBasic" ref="0x402d6bc0" loc="37:/opt/tinyos-2.1.0/tos/system/TinySchedulerC.nc">
      <component-ref qname="TinySchedulerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TaskBasic" scoped="" ref="0x402d6bc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x402d6d98"/>
        <function-ref name="runTask" scoped="" ref="0x402d6e78"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Scheduler" ref="0x402cf408" loc="36:/opt/tinyos-2.1.0/tos/system/TinySchedulerC.nc">
      <component-ref qname="TinySchedulerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Scheduler" scoped="" ref="0x402cf408"/></type-interface>
      <instance>
        <interfacedef-ref qname="Scheduler"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x402cf5e0"/>
        <function-ref name="taskLoop" scoped="" ref="0x402cf6c0"/>
        <function-ref name="runNextTask" scoped="" ref="0x402cf7a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TaskBasic" ref="0x4033cf18" loc="45:/opt/tinyos-2.1.0/tos/system/SchedulerBasicP.nc">
      <component-ref qname="SchedulerBasicP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TaskBasic" scoped="" ref="0x4033cf18"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x4033b108"/>
        <function-ref name="runTask" scoped="" ref="0x4033b1e8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="McuSleep" ref="0x4033bb90" loc="46:/opt/tinyos-2.1.0/tos/system/SchedulerBasicP.nc">
      <component-ref qname="SchedulerBasicP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="McuSleep" scoped="" ref="0x4033bb90"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuSleep"/>
      </instance>
      <interface-functions>
        <function-ref name="sleep" scoped="" ref="0x4033bd68"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Scheduler" ref="0x4033c6e0" loc="44:/opt/tinyos-2.1.0/tos/system/SchedulerBasicP.nc">
      <component-ref qname="SchedulerBasicP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Scheduler" scoped="" ref="0x4033c6e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Scheduler"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x4033c8b8"/>
        <function-ref name="taskLoop" scoped="" ref="0x4033c998"/>
        <function-ref name="runNextTask" scoped="" ref="0x4033ca78"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="McuPowerOverride" ref="0x4034e218" loc="46:/opt/tinyos-2.1.0/tos/chips/atm128/McuSleepC.nc">
      <component-ref qname="McuSleepC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="McuPowerOverride" scoped="" ref="0x4034e218"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerOverride"/>
      </instance>
      <interface-functions>
        <function-ref name="lowestState" scoped="" ref="0x4034e3f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="McuSleep" ref="0x4034a438" loc="42:/opt/tinyos-2.1.0/tos/chips/atm128/McuSleepC.nc">
      <component-ref qname="McuSleepC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="McuSleep" scoped="" ref="0x4034a438"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuSleep"/>
      </instance>
      <interface-functions>
        <function-ref name="sleep" scoped="" ref="0x4034a610"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="McuPowerState" ref="0x4034f148" loc="43:/opt/tinyos-2.1.0/tos/chips/atm128/McuSleepC.nc">
      <component-ref qname="McuSleepC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="McuPowerState" scoped="" ref="0x4034f148"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerState"/>
      </instance>
      <interface-functions>
        <function-ref name="update" scoped="" ref="0x4034f320"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Boot" ref="0x40436b48" loc="47:/opt/tinyos-2.1.0/tos/lib/printf/PrintfC.nc">
      <component-ref qname="PrintfC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Boot" scoped="" ref="0x40436b48"/></type-interface>
      <instance>
        <interfacedef-ref qname="Boot"/>
      </instance>
      <interface-functions>
        <function-ref name="booted" scoped="" ref="0x40436d20"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="MainBoot" ref="0x4058c1d0" loc="49:/opt/tinyos-2.1.0/tos/lib/printf/PrintfC.nc">
      <component-ref qname="PrintfC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="MainBoot" scoped="" ref="0x4058c1d0"/></type-interface>
      <attribute-value>
        <attribute-ref name="exactlyonce" ref="0x402c8ce0"/>
        <value-structured>
          <type-tag size="I:0" alignment="I:1"><attribute-ref name="exactlyonce" ref="0x402c8ce0"/></type-tag>
        </value-structured>
      </attribute-value>
      <instance>
        <interfacedef-ref qname="Boot"/>
      </instance>
      <interface-functions>
        <function-ref name="booted" scoped="" ref="0x4058c3a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x4058cba0" loc="35:/opt/tinyos-2.1.0/tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SplitControl" scoped="" ref="0x4058cba0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x4058cd78"/>
        <function-ref name="stopDone" scoped="" ref="0x4058ce58"/>
        <function-ref name="start" scoped="" ref="0x4059b010"/>
        <function-ref name="stop" scoped="" ref="0x4059b0f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x4059b550" loc="36:/opt/tinyos-2.1.0/tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMSend" scoped="" ref="0x4059b550"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x4039b8b0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x4059b728"/>
        <function-ref name="getPayload" scoped="" ref="0x4059b808"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x4059b8e8"/>
        <function-ref name="cancel" scoped="" ref="0x4059b9c8"/>
        <function-ref name="sendDone" scoped="" ref="0x4059baa8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x4059a288" loc="38:/opt/tinyos-2.1.0/tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0x4059a288"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x4059a460"/>
        <function-ref name="payloadLength" scoped="" ref="0x4059a540"/>
        <function-ref name="getPayload" scoped="" ref="0x4059a620"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x4059a700"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x4059a7e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x4059bf10" loc="37:/opt/tinyos-2.1.0/tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0x4059bf10"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x4039b8b0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x4059a108"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x40598060" loc="42:/opt/tinyos-2.1.0/tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Leds" scoped="" ref="0x40598060"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x40598238"/>
        <function-ref name="led0Toggle" scoped="" ref="0x40598318"/>
        <function-ref name="led1On" scoped="" ref="0x405983f8"/>
        <function-ref name="led1Toggle" scoped="" ref="0x405984d8"/>
        <function-ref name="led2Toggle" scoped="" ref="0x405985b8"/>
        <function-ref name="get" scoped="" ref="0x40598698"/>
        <function-ref name="led1Off" scoped="" ref="0x40598778"/>
        <function-ref name="led2Off" scoped="" ref="0x40598af8"/>
        <function-ref name="set" scoped="" ref="0x40598858"/>
        <function-ref name="led0On" scoped="" ref="0x40598938"/>
        <function-ref name="led2On" scoped="" ref="0x40598a18"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketAcknowledgements" ref="0x40594b10" loc="40:/opt/tinyos-2.1.0/tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketAcknowledgements" scoped="" ref="0x40594b10"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x40594ce8"/>
        <function-ref name="noAck" scoped="" ref="0x40594dc8"/>
        <function-ref name="wasAcked" scoped="" ref="0x40594ea8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x4059a978" loc="39:/opt/tinyos-2.1.0/tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0x4059a978"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x4059ab50"/>
        <function-ref name="source" scoped="" ref="0x4059ac30"/>
        <function-ref name="address" scoped="" ref="0x4059ad10"/>
        <function-ref name="destination" scoped="" ref="0x4059adf0"/>
        <function-ref name="setSource" scoped="" ref="0x4059aed0"/>
        <function-ref name="setDestination" scoped="" ref="0x40599010"/>
        <function-ref name="type" scoped="" ref="0x405990f0"/>
        <function-ref name="setType" scoped="" ref="0x405991d0"/>
        <function-ref name="isForMe" scoped="" ref="0x405992b0"/>
        <function-ref name="setGroup" scoped="" ref="0x40599390"/>
        <function-ref name="localGroup" scoped="" ref="0x40599470"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0x405caed0" loc="43:/opt/tinyos-2.1.0/tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubSend" scoped="" ref="0x405caed0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x405da0c0"/>
        <function-ref name="getPayload" scoped="" ref="0x405da1a0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x405da280"/>
        <function-ref name="cancel" scoped="" ref="0x405da360"/>
        <function-ref name="sendDone" scoped="" ref="0x405da440"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0x405da5a0" loc="44:/opt/tinyos-2.1.0/tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubReceive" scoped="" ref="0x405da5a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x405da778"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x405a5c58" loc="36:/opt/tinyos-2.1.0/tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMSend" scoped="" ref="0x405a5c58"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x4039b8b0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x405a5e40"/>
        <function-ref name="getPayload" scoped="" ref="0x405a5f20"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x405a4018"/>
        <function-ref name="cancel" scoped="" ref="0x405a40f8"/>
        <function-ref name="sendDone" scoped="" ref="0x405a41d8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x405ca310" loc="39:/opt/tinyos-2.1.0/tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0x405ca310"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x405ca4e8"/>
        <function-ref name="payloadLength" scoped="" ref="0x405ca5c8"/>
        <function-ref name="getPayload" scoped="" ref="0x405ca6a8"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x405ca788"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x405ca868"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x405a43b0" loc="37:/opt/tinyos-2.1.0/tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0x405a43b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x4039b8b0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x405a4598"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketAcknowledgements" ref="0x405ca9a8" loc="40:/opt/tinyos-2.1.0/tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketAcknowledgements" scoped="" ref="0x405ca9a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x405cab80"/>
        <function-ref name="noAck" scoped="" ref="0x405cac60"/>
        <function-ref name="wasAcked" scoped="" ref="0x405cad40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x405a46d8" loc="38:/opt/tinyos-2.1.0/tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0x405a46d8"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x405a48b0"/>
        <function-ref name="source" scoped="" ref="0x405a4990"/>
        <function-ref name="address" scoped="" ref="0x405a4a70"/>
        <function-ref name="destination" scoped="" ref="0x405a4b50"/>
        <function-ref name="setSource" scoped="" ref="0x405a4c30"/>
        <function-ref name="setDestination" scoped="" ref="0x405a4d10"/>
        <function-ref name="type" scoped="" ref="0x405a4df0"/>
        <function-ref name="setType" scoped="" ref="0x405a4ed0"/>
        <function-ref name="isForMe" scoped="" ref="0x405ca010"/>
        <function-ref name="setGroup" scoped="" ref="0x405ca0f0"/>
        <function-ref name="localGroup" scoped="" ref="0x405ca1d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x405d9d10" loc="39:/opt/tinyos-2.1.0/tos/lib/serial/SerialDispatcherC.nc">
      <component-ref qname="SerialDispatcherC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SplitControl" scoped="" ref="0x405d9d10"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x405d9ee8"/>
        <function-ref name="stopDone" scoped="" ref="0x405d5010"/>
        <function-ref name="start" scoped="" ref="0x405d50f0"/>
        <function-ref name="stop" scoped="" ref="0x405d51d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x405d5c20" loc="41:/opt/tinyos-2.1.0/tos/lib/serial/SerialDispatcherC.nc">
      <component-ref qname="SerialDispatcherC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Send" scoped="" ref="0x405d5c20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uart_id_t" ref="0x403974d8"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x405d5df8"/>
        <function-ref name="getPayload" scoped="" ref="0x405d5ed8"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x405d4010"/>
        <function-ref name="cancel" scoped="" ref="0x405d40f0"/>
        <function-ref name="sendDone" scoped="" ref="0x405d41d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x405d9978" loc="38:/opt/tinyos-2.1.0/tos/lib/serial/SerialDispatcherC.nc">
      <component-ref qname="SerialDispatcherC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x405d9978"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x405d9b50"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x405d5618" loc="40:/opt/tinyos-2.1.0/tos/lib/serial/SerialDispatcherC.nc">
      <component-ref qname="SerialDispatcherC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0x405d5618"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uart_id_t" ref="0x403974d8"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x405d57f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x405e2a10" loc="45:/opt/tinyos-2.1.0/tos/lib/serial/SerialDispatcherC.nc">
      <component-ref qname="SerialDispatcherC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Leds" scoped="" ref="0x405e2a10"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x405e2be8"/>
        <function-ref name="led0Toggle" scoped="" ref="0x405e2cc8"/>
        <function-ref name="led1On" scoped="" ref="0x405e2da8"/>
        <function-ref name="led1Toggle" scoped="" ref="0x405e2e88"/>
        <function-ref name="led2Toggle" scoped="" ref="0x405d3010"/>
        <function-ref name="get" scoped="" ref="0x405d30f0"/>
        <function-ref name="led1Off" scoped="" ref="0x405d31d0"/>
        <function-ref name="led2Off" scoped="" ref="0x405d3550"/>
        <function-ref name="set" scoped="" ref="0x405d32b0"/>
        <function-ref name="led0On" scoped="" ref="0x405d3390"/>
        <function-ref name="led2On" scoped="" ref="0x405d3470"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SerialPacketInfo" ref="0x405e2508" loc="44:/opt/tinyos-2.1.0/tos/lib/serial/SerialDispatcherC.nc">
      <component-ref qname="SerialDispatcherC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SerialPacketInfo" scoped="" ref="0x405e2508"/></type-interface>
      <instance>
        <interfacedef-ref qname="SerialPacketInfo"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uart_id_t" ref="0x403974d8"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="upperLength" scoped="" ref="0x405e26e0"/>
        <function-ref name="offset" scoped="" ref="0x405e27c0"/>
        <function-ref name="dataLinkLength" scoped="" ref="0x405e28a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x405f4010" loc="64:/opt/tinyos-2.1.0/tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SplitControl" scoped="" ref="0x405f4010"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x405f41e8"/>
        <function-ref name="stopDone" scoped="" ref="0x405f42c8"/>
        <function-ref name="start" scoped="" ref="0x405f43a8"/>
        <function-ref name="stop" scoped="" ref="0x405f4488"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="stopDoneTask" ref="0x4062cd90" loc="326:/opt/tinyos-2.1.0/tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="stopDoneTask" scoped="" ref="0x4062cd90"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x4062b010"/>
        <function-ref name="runTask" scoped="" ref="0x4062b0f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SerialControl" ref="0x405f82d8" loc="72:/opt/tinyos-2.1.0/tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SerialControl" scoped="" ref="0x405f82d8"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x405f84b0"/>
        <function-ref name="stop" scoped="" ref="0x405f8590"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RunTx" ref="0x4060f788" loc="189:/opt/tinyos-2.1.0/tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RunTx" scoped="" ref="0x4060f788"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x4060f960"/>
        <function-ref name="runTask" scoped="" ref="0x4060fa40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x405f5bb8" loc="63:/opt/tinyos-2.1.0/tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x405f5bb8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x405f5d90"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SerialFlush" ref="0x405f72f0" loc="73:/opt/tinyos-2.1.0/tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SerialFlush" scoped="" ref="0x405f72f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SerialFlush"/>
      </instance>
      <interface-functions>
        <function-ref name="flushDone" scoped="" ref="0x405f74c8"/>
        <function-ref name="flush" scoped="" ref="0x405f75a8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="startDoneTask" ref="0x4062ebd0" loc="320:/opt/tinyos-2.1.0/tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="startDoneTask" scoped="" ref="0x4062ebd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x4062eda8"/>
        <function-ref name="runTask" scoped="" ref="0x4062ee88"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SerialFrameComm" ref="0x405fcca0" loc="70:/opt/tinyos-2.1.0/tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SerialFrameComm" scoped="" ref="0x405fcca0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SerialFrameComm"/>
      </instance>
      <interface-functions>
        <function-ref name="putDelimiter" scoped="" ref="0x405fce78"/>
        <function-ref name="resetSend" scoped="" ref="0x405f2010"/>
        <function-ref name="dataReceived" scoped="" ref="0x405f20f0"/>
        <function-ref name="resetReceive" scoped="" ref="0x405f21d0"/>
        <function-ref name="putData" scoped="" ref="0x405f22b0"/>
        <function-ref name="putDone" scoped="" ref="0x405f2390"/>
        <function-ref name="delimiterReceived" scoped="" ref="0x405f2470"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x405f25e0" loc="71:/opt/tinyos-2.1.0/tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Leds" scoped="" ref="0x405f25e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x405f27b8"/>
        <function-ref name="led0Toggle" scoped="" ref="0x405f2898"/>
        <function-ref name="led1On" scoped="" ref="0x405f2978"/>
        <function-ref name="led1Toggle" scoped="" ref="0x405f2a58"/>
        <function-ref name="led2Toggle" scoped="" ref="0x405f2b38"/>
        <function-ref name="get" scoped="" ref="0x405f2c18"/>
        <function-ref name="led1Off" scoped="" ref="0x405f2cf8"/>
        <function-ref name="led2Off" scoped="" ref="0x405fe0f0"/>
        <function-ref name="set" scoped="" ref="0x405f2dd8"/>
        <function-ref name="led0On" scoped="" ref="0x405f2eb8"/>
        <function-ref name="led2On" scoped="" ref="0x405fe010"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="defaultSerialFlushTask" ref="0x4062aa70" loc="335:/opt/tinyos-2.1.0/tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="defaultSerialFlushTask" scoped="" ref="0x4062aa70"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x4062ac48"/>
        <function-ref name="runTask" scoped="" ref="0x4062ad28"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SendBytePacket" ref="0x405f0758" loc="65:/opt/tinyos-2.1.0/tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SendBytePacket" scoped="" ref="0x405f0758"/></type-interface>
      <instance>
        <interfacedef-ref qname="SendBytePacket"/>
      </instance>
      <interface-functions>
        <function-ref name="completeSend" scoped="" ref="0x405f0930"/>
        <function-ref name="nextByte" scoped="" ref="0x405f0a10"/>
        <function-ref name="startSend" scoped="" ref="0x405f0af0"/>
        <function-ref name="sendCompleted" scoped="" ref="0x405f0bd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ReceiveBytePacket" ref="0x405ff948" loc="66:/opt/tinyos-2.1.0/tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ReceiveBytePacket" scoped="" ref="0x405ff948"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReceiveBytePacket"/>
      </instance>
      <interface-functions>
        <function-ref name="startPacket" scoped="" ref="0x405ffb20"/>
        <function-ref name="byteReceived" scoped="" ref="0x405ffc00"/>
        <function-ref name="endPacket" scoped="" ref="0x405ffce0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="receiveTask" ref="0x40699970" loc="264:/opt/tinyos-2.1.0/tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="receiveTask" scoped="" ref="0x40699970"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x40699b48"/>
        <function-ref name="runTask" scoped="" ref="0x40699c28"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x4069b4f8" loc="40:/opt/tinyos-2.1.0/tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Send" scoped="" ref="0x4069b4f8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uart_id_t" ref="0x403974d8"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x4069b6e0"/>
        <function-ref name="getPayload" scoped="" ref="0x4069b7c0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x4069b8a0"/>
        <function-ref name="cancel" scoped="" ref="0x4069b980"/>
        <function-ref name="sendDone" scoped="" ref="0x4069ba60"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="signalSendDone" ref="0x40699da8" loc="147:/opt/tinyos-2.1.0/tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="signalSendDone" scoped="" ref="0x40699da8"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x40698010"/>
        <function-ref name="runTask" scoped="" ref="0x406980f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x4069b138" loc="39:/opt/tinyos-2.1.0/tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0x4069b138"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uart_id_t" ref="0x403974d8"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x4069b320"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PacketInfo" ref="0x4069bc88" loc="43:/opt/tinyos-2.1.0/tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketInfo" scoped="" ref="0x4069bc88"/></type-interface>
      <instance>
        <interfacedef-ref qname="SerialPacketInfo"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uart_id_t" ref="0x403974d8"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="upperLength" scoped="" ref="0x4069be70"/>
        <function-ref name="offset" scoped="" ref="0x4069a010"/>
        <function-ref name="dataLinkLength" scoped="" ref="0x4069a0f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x4069acc0" loc="46:/opt/tinyos-2.1.0/tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Leds" scoped="" ref="0x4069acc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x4069ae98"/>
        <function-ref name="led0Toggle" scoped="" ref="0x40699010"/>
        <function-ref name="led1On" scoped="" ref="0x406990f0"/>
        <function-ref name="led1Toggle" scoped="" ref="0x406991d0"/>
        <function-ref name="led2Toggle" scoped="" ref="0x406992b0"/>
        <function-ref name="get" scoped="" ref="0x40699390"/>
        <function-ref name="led1Off" scoped="" ref="0x40699470"/>
        <function-ref name="led2On" scoped="" ref="0x406997f0"/>
        <function-ref name="set" scoped="" ref="0x40699630"/>
        <function-ref name="led2Off" scoped="" ref="0x40699550"/>
        <function-ref name="led0On" scoped="" ref="0x40699710"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SendBytePacket" ref="0x4069a708" loc="45:/opt/tinyos-2.1.0/tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SendBytePacket" scoped="" ref="0x4069a708"/></type-interface>
      <instance>
        <interfacedef-ref qname="SendBytePacket"/>
      </instance>
      <interface-functions>
        <function-ref name="completeSend" scoped="" ref="0x4069a8e0"/>
        <function-ref name="nextByte" scoped="" ref="0x4069a9c0"/>
        <function-ref name="startSend" scoped="" ref="0x4069aaa0"/>
        <function-ref name="sendCompleted" scoped="" ref="0x4069ab80"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ReceiveBytePacket" ref="0x4069a230" loc="44:/opt/tinyos-2.1.0/tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ReceiveBytePacket" scoped="" ref="0x4069a230"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReceiveBytePacket"/>
      </instance>
      <interface-functions>
        <function-ref name="startPacket" scoped="" ref="0x4069a408"/>
        <function-ref name="byteReceived" scoped="" ref="0x4069a4e8"/>
        <function-ref name="endPacket" scoped="" ref="0x4069a5c8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UartStream" ref="0x406a3630" loc="38:/opt/tinyos-2.1.0/tos/lib/serial/HdlcTranslateC.nc">
      <component-ref qname="HdlcTranslateC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="UartStream" scoped="" ref="0x406a3630"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartStream"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x406a3808"/>
        <function-ref name="receivedByte" scoped="" ref="0x406a38e8"/>
        <function-ref name="receive" scoped="" ref="0x406a39c8"/>
        <function-ref name="enableReceiveInterrupt" scoped="" ref="0x406a3aa8"/>
        <function-ref name="receiveDone" scoped="" ref="0x406a3b88"/>
        <function-ref name="disableReceiveInterrupt" scoped="" ref="0x406a3c68"/>
        <function-ref name="sendDone" scoped="" ref="0x406a3d48"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SerialFrameComm" ref="0x406ab238" loc="36:/opt/tinyos-2.1.0/tos/lib/serial/HdlcTranslateC.nc">
      <component-ref qname="HdlcTranslateC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SerialFrameComm" scoped="" ref="0x406ab238"/></type-interface>
      <instance>
        <interfacedef-ref qname="SerialFrameComm"/>
      </instance>
      <interface-functions>
        <function-ref name="putDelimiter" scoped="" ref="0x406ab410"/>
        <function-ref name="resetSend" scoped="" ref="0x406ab4f0"/>
        <function-ref name="dataReceived" scoped="" ref="0x406ab5d0"/>
        <function-ref name="resetReceive" scoped="" ref="0x406ab6b0"/>
        <function-ref name="putData" scoped="" ref="0x406ab790"/>
        <function-ref name="putDone" scoped="" ref="0x406ab870"/>
        <function-ref name="delimiterReceived" scoped="" ref="0x406ab950"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x406a3eb8" loc="39:/opt/tinyos-2.1.0/tos/lib/serial/HdlcTranslateC.nc">
      <component-ref qname="HdlcTranslateC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Leds" scoped="" ref="0x406a3eb8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x406a90c0"/>
        <function-ref name="led0Toggle" scoped="" ref="0x406a91a0"/>
        <function-ref name="led1On" scoped="" ref="0x406a9280"/>
        <function-ref name="led1Toggle" scoped="" ref="0x406a9360"/>
        <function-ref name="led2Toggle" scoped="" ref="0x406a9440"/>
        <function-ref name="get" scoped="" ref="0x406a9520"/>
        <function-ref name="led1Off" scoped="" ref="0x406a9600"/>
        <function-ref name="led2Off" scoped="" ref="0x406a9980"/>
        <function-ref name="set" scoped="" ref="0x406a96e0"/>
        <function-ref name="led0On" scoped="" ref="0x406a97c0"/>
        <function-ref name="led2On" scoped="" ref="0x406a98a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartByte" ref="0x406bde20" loc="42:/opt/tinyos-2.1.0/tos/platforms/mica/PlatformSerialC.nc">
      <component-ref qname="PlatformSerialC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="UartByte" scoped="" ref="0x406bde20"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartByte"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x406bf010"/>
        <function-ref name="receive" scoped="" ref="0x406bf0f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartStream" ref="0x406c0010" loc="41:/opt/tinyos-2.1.0/tos/platforms/mica/PlatformSerialC.nc">
      <component-ref qname="PlatformSerialC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="UartStream" scoped="" ref="0x406c0010"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartStream"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x406c01e8"/>
        <function-ref name="receivedByte" scoped="" ref="0x406c02c8"/>
        <function-ref name="receive" scoped="" ref="0x406c03a8"/>
        <function-ref name="enableReceiveInterrupt" scoped="" ref="0x406c0488"/>
        <function-ref name="receiveDone" scoped="" ref="0x406c0568"/>
        <function-ref name="disableReceiveInterrupt" scoped="" ref="0x406c0648"/>
        <function-ref name="sendDone" scoped="" ref="0x406c0728"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="StdControl" ref="0x40697ae8" loc="40:/opt/tinyos-2.1.0/tos/platforms/mica/PlatformSerialC.nc">
      <component-ref qname="PlatformSerialC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="StdControl" scoped="" ref="0x40697ae8"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x40697cc0"/>
        <function-ref name="stop" scoped="" ref="0x40697da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartByte" ref="0x406bfca8" loc="41:/opt/tinyos-2.1.0/tos/chips/atm128/Atm128Uart0C.nc">
      <component-ref qname="Atm128Uart0C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="UartByte" scoped="" ref="0x406bfca8"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartByte"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x406bfe80"/>
        <function-ref name="receive" scoped="" ref="0x406bb010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartStream" ref="0x406bb1d8" loc="42:/opt/tinyos-2.1.0/tos/chips/atm128/Atm128Uart0C.nc">
      <component-ref qname="Atm128Uart0C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="UartStream" scoped="" ref="0x406bb1d8"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartStream"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x406bb3b0"/>
        <function-ref name="receivedByte" scoped="" ref="0x406bb490"/>
        <function-ref name="receive" scoped="" ref="0x406bb570"/>
        <function-ref name="enableReceiveInterrupt" scoped="" ref="0x406bb650"/>
        <function-ref name="receiveDone" scoped="" ref="0x406bb730"/>
        <function-ref name="disableReceiveInterrupt" scoped="" ref="0x406bb810"/>
        <function-ref name="sendDone" scoped="" ref="0x406bb8f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Counter" ref="0x406ccd18" loc="43:/opt/tinyos-2.1.0/tos/chips/atm128/Atm128Uart0C.nc">
      <component-ref qname="Atm128Uart0C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x406ccd18"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x40317288"/>
            <typename><typedef-ref name="TMicro" ref="0x40317450"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x4019b400"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x406b9478"/>
        <function-ref name="clearOverflow" scoped="" ref="0x406b9968"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x406b96f0"/>
        <function-ref name="overflow" scoped="" ref="0x406b9be0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="StdControl" ref="0x406bf838" loc="40:/opt/tinyos-2.1.0/tos/chips/atm128/Atm128Uart0C.nc">
      <component-ref qname="Atm128Uart0C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="StdControl" scoped="" ref="0x406bf838"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x406bfa10"/>
        <function-ref name="stop" scoped="" ref="0x406bfaf0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartByte" ref="0x406ca5c8" loc="50:/opt/tinyos-2.1.0/tos/chips/atm128/Atm128UartP.nc">
      <component-ref qname="Atm128Uart0C.UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="UartByte" scoped="" ref="0x406ca5c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartByte"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x406ca7a0"/>
        <function-ref name="receive" scoped="" ref="0x406ca880"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplUartTxControl" ref="0x406e6350" loc="53:/opt/tinyos-2.1.0/tos/chips/atm128/Atm128UartP.nc">
      <component-ref qname="Atm128Uart0C.UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplUartTxControl" scoped="" ref="0x406e6350"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x406e6528"/>
        <function-ref name="stop" scoped="" ref="0x406e6608"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x406cbe68" loc="48:/opt/tinyos-2.1.0/tos/chips/atm128/Atm128UartP.nc">
      <component-ref qname="Atm128Uart0C.UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x406cbe68"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x406ca050"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartStream" ref="0x406ca9e0" loc="51:/opt/tinyos-2.1.0/tos/chips/atm128/Atm128UartP.nc">
      <component-ref qname="Atm128Uart0C.UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="UartStream" scoped="" ref="0x406ca9e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartStream"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x406cabb8"/>
        <function-ref name="receivedByte" scoped="" ref="0x406cac98"/>
        <function-ref name="receive" scoped="" ref="0x406cad78"/>
        <function-ref name="enableReceiveInterrupt" scoped="" ref="0x406cae58"/>
        <function-ref name="receiveDone" scoped="" ref="0x406e6010"/>
        <function-ref name="disableReceiveInterrupt" scoped="" ref="0x406e60f0"/>
        <function-ref name="sendDone" scoped="" ref="0x406e61d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Counter" ref="0x406e58b0" loc="56:/opt/tinyos-2.1.0/tos/chips/atm128/Atm128UartP.nc">
      <component-ref qname="Atm128Uart0C.UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x406e58b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x40317288"/>
            <typename><typedef-ref name="TMicro" ref="0x40317450"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x4019b400"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x406e4010"/>
        <function-ref name="clearOverflow" scoped="" ref="0x406e4500"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x406e4288"/>
        <function-ref name="overflow" scoped="" ref="0x406e4778"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplUart" ref="0x406e6bc0" loc="55:/opt/tinyos-2.1.0/tos/chips/atm128/Atm128UartP.nc">
      <component-ref qname="Atm128Uart0C.UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplUart" scoped="" ref="0x406e6bc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Uart"/>
      </instance>
      <interface-functions>
        <function-ref name="isTxEmpty" scoped="" ref="0x406e6d98"/>
        <function-ref name="enableRxIntr" scoped="" ref="0x406e6e78"/>
        <function-ref name="rxDone" scoped="" ref="0x406e5010"/>
        <function-ref name="txDone" scoped="" ref="0x406e50f0"/>
        <function-ref name="enableTxIntr" scoped="" ref="0x406e51d0"/>
        <function-ref name="disableTxIntr" scoped="" ref="0x406e52b0"/>
        <function-ref name="disableRxIntr" scoped="" ref="0x406e5390"/>
        <function-ref name="isRxEmpty" scoped="" ref="0x406e5470"/>
        <function-ref name="tx" scoped="" ref="0x406e5550"/>
        <function-ref name="rx" scoped="" ref="0x406e5630"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="StdControl" ref="0x406ca1b0" loc="49:/opt/tinyos-2.1.0/tos/chips/atm128/Atm128UartP.nc">
      <component-ref qname="Atm128Uart0C.UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="StdControl" scoped="" ref="0x406ca1b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x406ca388"/>
        <function-ref name="stop" scoped="" ref="0x406ca468"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplUartRxControl" ref="0x406e6788" loc="54:/opt/tinyos-2.1.0/tos/chips/atm128/Atm128UartP.nc">
      <component-ref qname="Atm128Uart0C.UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplUartRxControl" scoped="" ref="0x406e6788"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x406e6960"/>
        <function-ref name="stop" scoped="" ref="0x406e6a40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplUart0" ref="0x40700cf0" loc="40:/opt/tinyos-2.1.0/tos/chips/atm128/HplAtm128UartC.nc">
      <component-ref qname="HplAtm128UartC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplUart0" scoped="" ref="0x40700cf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Uart"/>
      </instance>
      <interface-functions>
        <function-ref name="isTxEmpty" scoped="" ref="0x40700ec8"/>
        <function-ref name="enableRxIntr" scoped="" ref="0x406ff010"/>
        <function-ref name="rxDone" scoped="" ref="0x406ff0f0"/>
        <function-ref name="txDone" scoped="" ref="0x406ff1d0"/>
        <function-ref name="enableTxIntr" scoped="" ref="0x406ff2b0"/>
        <function-ref name="disableTxIntr" scoped="" ref="0x406ff390"/>
        <function-ref name="disableRxIntr" scoped="" ref="0x406ff470"/>
        <function-ref name="isRxEmpty" scoped="" ref="0x406ff550"/>
        <function-ref name="tx" scoped="" ref="0x406ff630"/>
        <function-ref name="rx" scoped="" ref="0x406ff710"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplUart1" ref="0x406fe390" loc="44:/opt/tinyos-2.1.0/tos/chips/atm128/HplAtm128UartC.nc">
      <component-ref qname="HplAtm128UartC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplUart1" scoped="" ref="0x406fe390"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Uart"/>
      </instance>
      <interface-functions>
        <function-ref name="isTxEmpty" scoped="" ref="0x406fe568"/>
        <function-ref name="enableRxIntr" scoped="" ref="0x406fe648"/>
        <function-ref name="rxDone" scoped="" ref="0x406fe728"/>
        <function-ref name="txDone" scoped="" ref="0x406fe808"/>
        <function-ref name="enableTxIntr" scoped="" ref="0x406fe8e8"/>
        <function-ref name="disableTxIntr" scoped="" ref="0x406fe9c8"/>
        <function-ref name="disableRxIntr" scoped="" ref="0x406feaa8"/>
        <function-ref name="isRxEmpty" scoped="" ref="0x406feb88"/>
        <function-ref name="tx" scoped="" ref="0x406fec68"/>
        <function-ref name="rx" scoped="" ref="0x406fed48"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Uart0RxControl" ref="0x407007f8" loc="39:/opt/tinyos-2.1.0/tos/chips/atm128/HplAtm128UartC.nc">
      <component-ref qname="HplAtm128UartC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Uart0RxControl" scoped="" ref="0x407007f8"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x407009d0"/>
        <function-ref name="stop" scoped="" ref="0x40700ab0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Uart1TxControl" ref="0x406ff968" loc="42:/opt/tinyos-2.1.0/tos/chips/atm128/HplAtm128UartC.nc">
      <component-ref qname="HplAtm128UartC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Uart1TxControl" scoped="" ref="0x406ff968"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x406ffb40"/>
        <function-ref name="stop" scoped="" ref="0x406ffc20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Uart1RxControl" ref="0x406ffe78" loc="43:/opt/tinyos-2.1.0/tos/chips/atm128/HplAtm128UartC.nc">
      <component-ref qname="HplAtm128UartC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Uart1RxControl" scoped="" ref="0x406ffe78"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x406fe070"/>
        <function-ref name="stop" scoped="" ref="0x406fe150"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Uart0TxControl" ref="0x407002e8" loc="38:/opt/tinyos-2.1.0/tos/chips/atm128/HplAtm128UartC.nc">
      <component-ref qname="HplAtm128UartC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Uart0TxControl" scoped="" ref="0x407002e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x407004c0"/>
        <function-ref name="stop" scoped="" ref="0x407005a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Uart0Init" ref="0x406fd570" loc="71:/opt/tinyos-2.1.0/tos/chips/atm128/HplAtm128UartP.nc">
      <component-ref qname="HplAtm128UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Uart0Init" scoped="" ref="0x406fd570"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x406fd748"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplUart0" ref="0x406fa420" loc="74:/opt/tinyos-2.1.0/tos/chips/atm128/HplAtm128UartP.nc">
      <component-ref qname="HplAtm128UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplUart0" scoped="" ref="0x406fa420"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Uart"/>
      </instance>
      <interface-functions>
        <function-ref name="isTxEmpty" scoped="" ref="0x406fa5f8"/>
        <function-ref name="enableRxIntr" scoped="" ref="0x406fa6d8"/>
        <function-ref name="rxDone" scoped="" ref="0x406fa7b8"/>
        <function-ref name="txDone" scoped="" ref="0x406fa898"/>
        <function-ref name="enableTxIntr" scoped="" ref="0x406fa978"/>
        <function-ref name="disableTxIntr" scoped="" ref="0x406faa58"/>
        <function-ref name="disableRxIntr" scoped="" ref="0x406fab38"/>
        <function-ref name="isRxEmpty" scoped="" ref="0x406fac18"/>
        <function-ref name="tx" scoped="" ref="0x406facf8"/>
        <function-ref name="rx" scoped="" ref="0x406fadd8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Uart1Init" ref="0x406f9010" loc="76:/opt/tinyos-2.1.0/tos/chips/atm128/HplAtm128UartP.nc">
      <component-ref qname="HplAtm128UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Uart1Init" scoped="" ref="0x406f9010"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x406f91e8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplUart1" ref="0x406f9ea8" loc="79:/opt/tinyos-2.1.0/tos/chips/atm128/HplAtm128UartP.nc">
      <component-ref qname="HplAtm128UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplUart1" scoped="" ref="0x406f9ea8"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Uart"/>
      </instance>
      <interface-functions>
        <function-ref name="isTxEmpty" scoped="" ref="0x407120c0"/>
        <function-ref name="enableRxIntr" scoped="" ref="0x407121a0"/>
        <function-ref name="rxDone" scoped="" ref="0x40712280"/>
        <function-ref name="txDone" scoped="" ref="0x40712360"/>
        <function-ref name="enableTxIntr" scoped="" ref="0x40712440"/>
        <function-ref name="disableTxIntr" scoped="" ref="0x40712520"/>
        <function-ref name="disableRxIntr" scoped="" ref="0x40712600"/>
        <function-ref name="isRxEmpty" scoped="" ref="0x407126e0"/>
        <function-ref name="tx" scoped="" ref="0x407127c0"/>
        <function-ref name="rx" scoped="" ref="0x407128a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Uart0RxControl" ref="0x406fdef0" loc="73:/opt/tinyos-2.1.0/tos/chips/atm128/HplAtm128UartP.nc">
      <component-ref qname="HplAtm128UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Uart0RxControl" scoped="" ref="0x406fdef0"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x406fa0e0"/>
        <function-ref name="stop" scoped="" ref="0x406fa1c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Uart1TxControl" ref="0x406f9460" loc="77:/opt/tinyos-2.1.0/tos/chips/atm128/HplAtm128UartP.nc">
      <component-ref qname="HplAtm128UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Uart1TxControl" scoped="" ref="0x406f9460"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x406f9638"/>
        <function-ref name="stop" scoped="" ref="0x406f9718"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Uart1RxControl" ref="0x406f9990" loc="78:/opt/tinyos-2.1.0/tos/chips/atm128/HplAtm128UartP.nc">
      <component-ref qname="HplAtm128UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Uart1RxControl" scoped="" ref="0x406f9990"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x406f9b68"/>
        <function-ref name="stop" scoped="" ref="0x406f9c48"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Atm128Calibrate" ref="0x40712a98" loc="81:/opt/tinyos-2.1.0/tos/chips/atm128/HplAtm128UartP.nc">
      <component-ref qname="HplAtm128UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128Calibrate" scoped="" ref="0x40712a98"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128Calibrate"/>
      </instance>
      <interface-functions>
        <function-ref name="baudrateRegister" scoped="" ref="0x40712c70"/>
        <function-ref name="cyclesPerJiffy" scoped="" ref="0x40712d50"/>
        <function-ref name="calibrateMicro" scoped="" ref="0x40712e30"/>
        <function-ref name="actualMicro" scoped="" ref="0x40712f10"/>
        <function-ref name="adcPrescaler" scoped="" ref="0x40711010"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="McuPowerState" ref="0x407111f8" loc="82:/opt/tinyos-2.1.0/tos/chips/atm128/HplAtm128UartP.nc">
      <component-ref qname="HplAtm128UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="McuPowerState" scoped="" ref="0x407111f8"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerState"/>
      </instance>
      <interface-functions>
        <function-ref name="update" scoped="" ref="0x407113d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Uart0TxControl" ref="0x406fd9c0" loc="72:/opt/tinyos-2.1.0/tos/chips/atm128/HplAtm128UartP.nc">
      <component-ref qname="HplAtm128UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Uart0TxControl" scoped="" ref="0x406fd9c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x406fdb98"/>
        <function-ref name="stop" scoped="" ref="0x406fdc78"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x4073b0b0" loc="24:/opt/tinyos-2.1.0/tos/platforms/mica/CounterMicro32C.nc">
      <component-ref qname="CounterMicro32C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x4073b0b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x40317288"/>
            <typename><typedef-ref name="TMicro" ref="0x40317450"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x4019b400"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x4073b800"/>
        <function-ref name="clearOverflow" scoped="" ref="0x4073bcf0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x4073ba78"/>
        <function-ref name="overflow" scoped="" ref="0x4073a010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x4073ab58" loc="24:/opt/tinyos-2.1.0/tos/platforms/mica/CounterThree16C.nc">
      <component-ref qname="CounterThree16C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x4073ab58"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x40317288"/>
            <typename><typedef-ref name="TThree" ref="0x40338bc8"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x4019ad68"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x40737308"/>
        <function-ref name="clearOverflow" scoped="" ref="0x407377f8"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x40737580"/>
        <function-ref name="overflow" scoped="" ref="0x40737a70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerCtrl" ref="0x40755e28" loc="37:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Timer3C.nc">
      <component-ref qname="HplAtm128Timer3C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerCtrl" scoped="" ref="0x40755e28"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128TimerCtrl16"/>
      </instance>
      <interface-functions>
        <function-ref name="getInterruptFlag" scoped="" ref="0x40743050"/>
        <function-ref name="setCtrlCapture" scoped="" ref="0x40743130"/>
        <function-ref name="getInterruptMask" scoped="" ref="0x40743210"/>
        <function-ref name="getCtrlCompare" scoped="" ref="0x407432f0"/>
        <function-ref name="setInterruptMask" scoped="" ref="0x407433d0"/>
        <function-ref name="setInterruptFlag" scoped="" ref="0x407434b0"/>
        <function-ref name="getCtrlClock" scoped="" ref="0x40743590"/>
        <function-ref name="getCtrlCapture" scoped="" ref="0x40743670"/>
        <function-ref name="setCtrlCompare" scoped="" ref="0x40743750"/>
        <function-ref name="setCtrlClock" scoped="" ref="0x40743830"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x40750c38" loc="38:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Timer3C.nc">
      <component-ref qname="HplAtm128Timer3C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Capture" scoped="" ref="0x40750c38"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Capture"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x4019ad68"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="setEdge" scoped="" ref="0x4074f778"/>
        <function-ref name="test" scoped="" ref="0x4074f288"/>
        <function-ref name="get" scoped="" ref="0x40759298"/>
        <function-ref name="captured" scoped="" ref="0x407597b0"/>
        <function-ref name="reset" scoped="" ref="0x40759a50"/>
        <function-ref name="isOn" scoped="" ref="0x4074f500"/>
        <function-ref name="set" scoped="" ref="0x40759510"/>
        <function-ref name="start" scoped="" ref="0x40759cc8"/>
        <function-ref name="stop" scoped="" ref="0x4074f010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x407627f0" loc="39:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Timer3C.nc">
      <component-ref qname="HplAtm128Timer3C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Compare" scoped="" ref="0x407627f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x4019ad68"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="test" scoped="" ref="0x40765d58"/>
        <function-ref name="fired" scoped="" ref="0x40765378"/>
        <function-ref name="get" scoped="" ref="0x40762e38"/>
        <function-ref name="reset" scoped="" ref="0x407655f0"/>
        <function-ref name="isOn" scoped="" ref="0x40761010"/>
        <function-ref name="set" scoped="" ref="0x407650d8"/>
        <function-ref name="start" scoped="" ref="0x40765868"/>
        <function-ref name="stop" scoped="" ref="0x40765ae0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x40746f18" loc="36:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Timer3C.nc">
      <component-ref qname="HplAtm128Timer3C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x40746f18"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x4019ad68"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="off" scoped="" ref="0x407499f0"/>
        <function-ref name="test" scoped="" ref="0x40749500"/>
        <function-ref name="get" scoped="" ref="0x4074a578"/>
        <function-ref name="setScale" scoped="" ref="0x40749c68"/>
        <function-ref name="getScale" scoped="" ref="0x40749f08"/>
        <function-ref name="reset" scoped="" ref="0x4074ad08"/>
        <function-ref name="overflow" scoped="" ref="0x4074aa90"/>
        <function-ref name="isOn" scoped="" ref="0x40749778"/>
        <function-ref name="set" scoped="" ref="0x4074a7f0"/>
        <function-ref name="start" scoped="" ref="0x40749010"/>
        <function-ref name="stop" scoped="" ref="0x40749288"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerCtrl" ref="0x4075cd78" loc="37:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Timer3P.nc">
      <component-ref qname="HplAtm128Timer3P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerCtrl" scoped="" ref="0x4075cd78"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128TimerCtrl16"/>
      </instance>
      <interface-functions>
        <function-ref name="getInterruptFlag" scoped="" ref="0x4075b010"/>
        <function-ref name="setCtrlCapture" scoped="" ref="0x4075b0f0"/>
        <function-ref name="getInterruptMask" scoped="" ref="0x4075b1d0"/>
        <function-ref name="getCtrlCompare" scoped="" ref="0x4075b2b0"/>
        <function-ref name="setInterruptMask" scoped="" ref="0x4075b390"/>
        <function-ref name="setInterruptFlag" scoped="" ref="0x4075b470"/>
        <function-ref name="getCtrlClock" scoped="" ref="0x4075b550"/>
        <function-ref name="getCtrlCapture" scoped="" ref="0x4075b630"/>
        <function-ref name="setCtrlCompare" scoped="" ref="0x4075b710"/>
        <function-ref name="setCtrlClock" scoped="" ref="0x4075b7f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareA" ref="0x40771a80" loc="39:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Timer3P.nc">
      <component-ref qname="HplAtm128Timer3P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CompareA" scoped="" ref="0x40771a80"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x4019ad68"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="test" scoped="" ref="0x4076e010"/>
        <function-ref name="fired" scoped="" ref="0x4076f610"/>
        <function-ref name="get" scoped="" ref="0x4076f0f8"/>
        <function-ref name="reset" scoped="" ref="0x4076f888"/>
        <function-ref name="isOn" scoped="" ref="0x4076e288"/>
        <function-ref name="set" scoped="" ref="0x4076f370"/>
        <function-ref name="start" scoped="" ref="0x4076fb00"/>
        <function-ref name="stop" scoped="" ref="0x4076fd78"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x4075bb28" loc="38:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Timer3P.nc">
      <component-ref qname="HplAtm128Timer3P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Capture" scoped="" ref="0x4075bb28"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Capture"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x4019ad68"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="setEdge" scoped="" ref="0x40771640"/>
        <function-ref name="test" scoped="" ref="0x40771150"/>
        <function-ref name="get" scoped="" ref="0x40772200"/>
        <function-ref name="captured" scoped="" ref="0x40772718"/>
        <function-ref name="reset" scoped="" ref="0x407729b8"/>
        <function-ref name="isOn" scoped="" ref="0x407713c8"/>
        <function-ref name="set" scoped="" ref="0x40772478"/>
        <function-ref name="start" scoped="" ref="0x40772c30"/>
        <function-ref name="stop" scoped="" ref="0x40772ea8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB" ref="0x4076e6a0" loc="40:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Timer3P.nc">
      <component-ref qname="HplAtm128Timer3P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CompareB" scoped="" ref="0x4076e6a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x4019ad68"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="test" scoped="" ref="0x4076dc90"/>
        <function-ref name="fired" scoped="" ref="0x4076d2b0"/>
        <function-ref name="get" scoped="" ref="0x4076ece8"/>
        <function-ref name="reset" scoped="" ref="0x4076d528"/>
        <function-ref name="isOn" scoped="" ref="0x4076df08"/>
        <function-ref name="set" scoped="" ref="0x4076d010"/>
        <function-ref name="start" scoped="" ref="0x4076d7a0"/>
        <function-ref name="stop" scoped="" ref="0x4076da18"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareC" ref="0x4076b340" loc="41:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Timer3P.nc">
      <component-ref qname="HplAtm128Timer3P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CompareC" scoped="" ref="0x4076b340"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x4019ad68"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="test" scoped="" ref="0x4076a898"/>
        <function-ref name="fired" scoped="" ref="0x4076bea0"/>
        <function-ref name="get" scoped="" ref="0x4076b988"/>
        <function-ref name="reset" scoped="" ref="0x4076a130"/>
        <function-ref name="isOn" scoped="" ref="0x4076ab10"/>
        <function-ref name="set" scoped="" ref="0x4076bc00"/>
        <function-ref name="start" scoped="" ref="0x4076a3a8"/>
        <function-ref name="stop" scoped="" ref="0x4076a620"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x40761a30" loc="36:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Timer3P.nc">
      <component-ref qname="HplAtm128Timer3P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x40761a30"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x4019ad68"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="off" scoped="" ref="0x4075c500"/>
        <function-ref name="test" scoped="" ref="0x4075c010"/>
        <function-ref name="get" scoped="" ref="0x4075e088"/>
        <function-ref name="setScale" scoped="" ref="0x4075c778"/>
        <function-ref name="getScale" scoped="" ref="0x4075ca18"/>
        <function-ref name="reset" scoped="" ref="0x4075e818"/>
        <function-ref name="overflow" scoped="" ref="0x4075e5a0"/>
        <function-ref name="isOn" scoped="" ref="0x4075c288"/>
        <function-ref name="set" scoped="" ref="0x4075e300"/>
        <function-ref name="start" scoped="" ref="0x4075ea90"/>
        <function-ref name="stop" scoped="" ref="0x4075ed08"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x407b6a40" loc="37:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128TimerInitC.nc">
      <component-ref qname="InitThreeP.InitThree"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x407b6a40"/></type-interface>
      <attribute-value>
        <attribute-ref name="atleastonce" ref="0x402c8ae0"/>
        <value-structured>
          <type-tag size="I:0" alignment="I:1"><attribute-ref name="atleastonce" ref="0x402c8ae0"/></type-tag>
        </value-structured>
      </attribute-value>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x407b6c18"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x407b6e28" loc="38:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128TimerInitC.nc">
      <component-ref qname="InitThreeP.InitThree"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x407b6e28"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x4019ad68"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="off" scoped="" ref="0x407c7898"/>
        <function-ref name="test" scoped="" ref="0x407c73a8"/>
        <function-ref name="get" scoped="" ref="0x407b5488"/>
        <function-ref name="setScale" scoped="" ref="0x407c7b10"/>
        <function-ref name="getScale" scoped="" ref="0x407c7db0"/>
        <function-ref name="reset" scoped="" ref="0x407b5c18"/>
        <function-ref name="overflow" scoped="" ref="0x407b59a0"/>
        <function-ref name="isOn" scoped="" ref="0x407c7620"/>
        <function-ref name="set" scoped="" ref="0x407b5700"/>
        <function-ref name="start" scoped="" ref="0x407b5e90"/>
        <function-ref name="stop" scoped="" ref="0x407c7130"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x407b8618" loc="36:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128CounterC.nc">
      <component-ref qname="CounterThree16C.NCounter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x407b8618"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x40317288"/>
            <typename><typedef-ref name="TThree" ref="0x40338bc8"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x4019ad68"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x407b8d68"/>
        <function-ref name="clearOverflow" scoped="" ref="0x407c5288"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x407c5010"/>
        <function-ref name="overflow" scoped="" ref="0x407c5500"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x407c57e0" loc="37:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128CounterC.nc">
      <component-ref qname="CounterThree16C.NCounter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x407c57e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x4019ad68"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="off" scoped="" ref="0x407d2288"/>
        <function-ref name="test" scoped="" ref="0x407d4d38"/>
        <function-ref name="get" scoped="" ref="0x407c5e28"/>
        <function-ref name="setScale" scoped="" ref="0x407d2500"/>
        <function-ref name="getScale" scoped="" ref="0x407d27a0"/>
        <function-ref name="reset" scoped="" ref="0x407d45d0"/>
        <function-ref name="overflow" scoped="" ref="0x407d4358"/>
        <function-ref name="isOn" scoped="" ref="0x407d2010"/>
        <function-ref name="set" scoped="" ref="0x407d40b8"/>
        <function-ref name="start" scoped="" ref="0x407d4848"/>
        <function-ref name="stop" scoped="" ref="0x407d4ac0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CounterFrom" ref="0x407d0cd8" loc="52:/opt/tinyos-2.1.0/tos/lib/timer/TransformCounterC.nc">
      <component-ref qname="CounterMicro32C.Transform32"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CounterFrom" scoped="" ref="0x407d0cd8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x40317288"/>
            <typename><typedef-ref name="TThree" ref="0x40338bc8"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x4019ad68"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x407da478"/>
        <function-ref name="clearOverflow" scoped="" ref="0x407da968"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x407da6f0"/>
        <function-ref name="overflow" scoped="" ref="0x407dabe0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x407389f0" loc="51:/opt/tinyos-2.1.0/tos/lib/timer/TransformCounterC.nc">
      <component-ref qname="CounterMicro32C.Transform32"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x407389f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x40317288"/>
            <typename><typedef-ref name="TMicro" ref="0x40317450"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x4019b400"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x407d0200"/>
        <function-ref name="clearOverflow" scoped="" ref="0x407d06f0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x407d0478"/>
        <function-ref name="overflow" scoped="" ref="0x407d0968"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Info" ref="0x407f1728" loc="36:/opt/tinyos-2.1.0/tos/lib/serial/SerialPacketInfoActiveMessageP.nc">
      <component-ref qname="SerialPacketInfoActiveMessageP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Info" scoped="" ref="0x407f1728"/></type-interface>
      <instance>
        <interfacedef-ref qname="SerialPacketInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="upperLength" scoped="" ref="0x407f1900"/>
        <function-ref name="offset" scoped="" ref="0x407f19e0"/>
        <function-ref name="dataLinkLength" scoped="" ref="0x407f1ac0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x407e7760" loc="41:/opt/tinyos-2.1.0/tos/lib/serial/SerialAMSenderC.nc">
      <component-ref qname="PrintfC.SerialAMSenderC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMSend" scoped="" ref="0x407e7760"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x407e7938"/>
        <function-ref name="getPayload" scoped="" ref="0x407e7a18"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x407e7af8"/>
        <function-ref name="cancel" scoped="" ref="0x407e7bd8"/>
        <function-ref name="sendDone" scoped="" ref="0x407e7cb8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x407e7df8" loc="42:/opt/tinyos-2.1.0/tos/lib/serial/SerialAMSenderC.nc">
      <component-ref qname="PrintfC.SerialAMSenderC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0x407e7df8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x4082c010"/>
        <function-ref name="payloadLength" scoped="" ref="0x4082c0f0"/>
        <function-ref name="getPayload" scoped="" ref="0x4082c1d0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x4082c2b0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x4082c390"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x4082c4d0" loc="43:/opt/tinyos-2.1.0/tos/lib/serial/SerialAMSenderC.nc">
      <component-ref qname="PrintfC.SerialAMSenderC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0x4082c4d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x4082c6a8"/>
        <function-ref name="source" scoped="" ref="0x4082c788"/>
        <function-ref name="address" scoped="" ref="0x4082c868"/>
        <function-ref name="destination" scoped="" ref="0x4082c948"/>
        <function-ref name="setSource" scoped="" ref="0x4082ca28"/>
        <function-ref name="setDestination" scoped="" ref="0x4082cb08"/>
        <function-ref name="type" scoped="" ref="0x4082cbe8"/>
        <function-ref name="setType" scoped="" ref="0x4082ccc8"/>
        <function-ref name="isForMe" scoped="" ref="0x4082cda8"/>
        <function-ref name="setGroup" scoped="" ref="0x4082ce88"/>
        <function-ref name="localGroup" scoped="" ref="0x4082b010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Acks" ref="0x4082b170" loc="44:/opt/tinyos-2.1.0/tos/lib/serial/SerialAMSenderC.nc">
      <component-ref qname="PrintfC.SerialAMSenderC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Acks" scoped="" ref="0x4082b170"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x4082b348"/>
        <function-ref name="noAck" scoped="" ref="0x4082b428"/>
        <function-ref name="wasAcked" scoped="" ref="0x4082b508"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x40e660c8" loc="36:/opt/tinyos-2.1.0/tos/system/AMQueueEntryP.nc">
      <component-ref qname="PrintfC.SerialAMSenderC.AMQueueEntryP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMSend" scoped="" ref="0x40e660c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x40e662a0"/>
        <function-ref name="getPayload" scoped="" ref="0x40e66380"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x40e66460"/>
        <function-ref name="cancel" scoped="" ref="0x40e66540"/>
        <function-ref name="sendDone" scoped="" ref="0x40e66620"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Send" ref="0x40e66790" loc="38:/opt/tinyos-2.1.0/tos/system/AMQueueEntryP.nc">
      <component-ref qname="PrintfC.SerialAMSenderC.AMQueueEntryP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Send" scoped="" ref="0x40e66790"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x40e66968"/>
        <function-ref name="getPayload" scoped="" ref="0x40e66a48"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x40e66b28"/>
        <function-ref name="cancel" scoped="" ref="0x40e66c08"/>
        <function-ref name="sendDone" scoped="" ref="0x40e66ce8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AMPacket" ref="0x40e66e28" loc="39:/opt/tinyos-2.1.0/tos/system/AMQueueEntryP.nc">
      <component-ref qname="PrintfC.SerialAMSenderC.AMQueueEntryP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0x40e66e28"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x40e65050"/>
        <function-ref name="source" scoped="" ref="0x40e65130"/>
        <function-ref name="address" scoped="" ref="0x40e65210"/>
        <function-ref name="destination" scoped="" ref="0x40e652f0"/>
        <function-ref name="setSource" scoped="" ref="0x40e653d0"/>
        <function-ref name="setDestination" scoped="" ref="0x40e654b0"/>
        <function-ref name="type" scoped="" ref="0x40e65590"/>
        <function-ref name="setType" scoped="" ref="0x40e65670"/>
        <function-ref name="isForMe" scoped="" ref="0x40e65750"/>
        <function-ref name="setGroup" scoped="" ref="0x40e65830"/>
        <function-ref name="localGroup" scoped="" ref="0x40e65910"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x4080ce48" loc="36:/opt/tinyos-2.1.0/tos/lib/serial/SerialAMQueueP.nc">
      <component-ref qname="SerialAMQueueP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Send" scoped="" ref="0x4080ce48"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x40809050"/>
        <function-ref name="getPayload" scoped="" ref="0x40809130"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x40809210"/>
        <function-ref name="cancel" scoped="" ref="0x408092f0"/>
        <function-ref name="sendDone" scoped="" ref="0x408093d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AMSend" ref="0x40832598" loc="40:/opt/tinyos-2.1.0/tos/system/AMQueueImplP.nc">
      <component-ref qname="SerialAMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMSend" scoped="" ref="0x40832598"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x4039b8b0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x40832780"/>
        <function-ref name="getPayload" scoped="" ref="0x40832860"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x40832940"/>
        <function-ref name="cancel" scoped="" ref="0x40832a20"/>
        <function-ref name="sendDone" scoped="" ref="0x40832b00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x40806da0" loc="38:/opt/tinyos-2.1.0/tos/system/AMQueueImplP.nc">
      <component-ref qname="SerialAMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Send" scoped="" ref="0x40806da0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x40832010"/>
        <function-ref name="getPayload" scoped="" ref="0x408320f0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x408321d0"/>
        <function-ref name="cancel" scoped="" ref="0x408322b0"/>
        <function-ref name="sendDone" scoped="" ref="0x40832390"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Packet" ref="0x40831850" loc="42:/opt/tinyos-2.1.0/tos/system/AMQueueImplP.nc">
      <component-ref qname="SerialAMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0x40831850"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x40831a28"/>
        <function-ref name="payloadLength" scoped="" ref="0x40831b08"/>
        <function-ref name="getPayload" scoped="" ref="0x40831be8"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x40831cc8"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x40831da8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="errorTask" ref="0x40831f28" loc="161:/opt/tinyos-2.1.0/tos/system/AMQueueImplP.nc">
      <component-ref qname="SerialAMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="errorTask" scoped="" ref="0x40831f28"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x40830110"/>
        <function-ref name="runTask" scoped="" ref="0x408301f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CancelTask" ref="0x40830370" loc="118:/opt/tinyos-2.1.0/tos/system/AMQueueImplP.nc">
      <component-ref qname="SerialAMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CancelTask" scoped="" ref="0x40830370"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x40830548"/>
        <function-ref name="runTask" scoped="" ref="0x40830628"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AMPacket" ref="0x40832c40" loc="41:/opt/tinyos-2.1.0/tos/system/AMQueueImplP.nc">
      <component-ref qname="SerialAMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0x40832c40"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x40832e18"/>
        <function-ref name="source" scoped="" ref="0x40832ef8"/>
        <function-ref name="address" scoped="" ref="0x40831010"/>
        <function-ref name="destination" scoped="" ref="0x408310f0"/>
        <function-ref name="setSource" scoped="" ref="0x408311d0"/>
        <function-ref name="setDestination" scoped="" ref="0x408312b0"/>
        <function-ref name="type" scoped="" ref="0x40831390"/>
        <function-ref name="setType" scoped="" ref="0x40831470"/>
        <function-ref name="isForMe" scoped="" ref="0x40831550"/>
        <function-ref name="setGroup" scoped="" ref="0x40831630"/>
        <function-ref name="localGroup" scoped="" ref="0x40831710"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Queue" ref="0x40829408" loc="43:/opt/tinyos-2.1.0/tos/system/QueueC.nc">
      <component-ref qname="PrintfC.QueueC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Queue" scoped="" ref="0x40829408"/></type-interface>
      <instance>
        <interfacedef-ref qname="Queue"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="head" scoped="" ref="0x40844150"/>
        <function-ref name="enqueue" scoped="" ref="0x40844830"/>
        <function-ref name="element" scoped="" ref="0x40844b80"/>
        <function-ref name="maxSize" scoped="" ref="0x40829ee0"/>
        <function-ref name="dequeue" scoped="" ref="0x408444c0"/>
        <function-ref name="empty" scoped="" ref="0x40829a30"/>
        <function-ref name="size" scoped="" ref="0x40829c88"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Boot" ref="0x40848040" loc="86:/opt/tinyos-2.1.0/tos/lib/printf/PrintfP.nc">
      <component-ref qname="PrintfP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Boot" scoped="" ref="0x40848040"/></type-interface>
      <instance>
        <interfacedef-ref qname="Boot"/>
      </instance>
      <interface-functions>
        <function-ref name="booted" scoped="" ref="0x40848218"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SerialControl" ref="0x40848880" loc="90:/opt/tinyos-2.1.0/tos/lib/printf/PrintfP.nc">
      <component-ref qname="PrintfP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SerialControl" scoped="" ref="0x40848880"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x40848a58"/>
        <function-ref name="stopDone" scoped="" ref="0x40848b38"/>
        <function-ref name="start" scoped="" ref="0x40848c18"/>
        <function-ref name="stop" scoped="" ref="0x40848cf8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Queue" ref="0x40847010" loc="91:/opt/tinyos-2.1.0/tos/lib/printf/PrintfP.nc">
      <component-ref qname="PrintfP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Queue" scoped="" ref="0x40847010"/></type-interface>
      <instance>
        <interfacedef-ref qname="Queue"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="head" scoped="" ref="0x40847d40"/>
        <function-ref name="enqueue" scoped="" ref="0x40846458"/>
        <function-ref name="element" scoped="" ref="0x408467a8"/>
        <function-ref name="maxSize" scoped="" ref="0x40847ae8"/>
        <function-ref name="dequeue" scoped="" ref="0x408460e8"/>
        <function-ref name="empty" scoped="" ref="0x40847638"/>
        <function-ref name="size" scoped="" ref="0x40847890"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AMSend" ref="0x40846b38" loc="93:/opt/tinyos-2.1.0/tos/lib/printf/PrintfP.nc">
      <component-ref qname="PrintfP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMSend" scoped="" ref="0x40846b38"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x40846d10"/>
        <function-ref name="getPayload" scoped="" ref="0x40846df0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x40846ed0"/>
        <function-ref name="cancel" scoped="" ref="0x40860010"/>
        <function-ref name="sendDone" scoped="" ref="0x408600f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Packet" ref="0x40860270" loc="94:/opt/tinyos-2.1.0/tos/lib/printf/PrintfP.nc">
      <component-ref qname="PrintfP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0x40860270"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x40860448"/>
        <function-ref name="payloadLength" scoped="" ref="0x40860528"/>
        <function-ref name="getPayload" scoped="" ref="0x40860608"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x408606e8"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x408607c8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="retrySend" ref="0x4085a1e0" loc="127:/opt/tinyos-2.1.0/tos/lib/printf/PrintfP.nc">
      <component-ref qname="PrintfP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="retrySend" scoped="" ref="0x4085a1e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x4085a3b8"/>
        <function-ref name="runTask" scoped="" ref="0x4085a498"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x40860938" loc="95:/opt/tinyos-2.1.0/tos/lib/printf/PrintfP.nc">
      <component-ref qname="PrintfP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Leds" scoped="" ref="0x40860938"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x40860b10"/>
        <function-ref name="led0Toggle" scoped="" ref="0x40860bf0"/>
        <function-ref name="led1On" scoped="" ref="0x40860cd0"/>
        <function-ref name="led1Toggle" scoped="" ref="0x40860db0"/>
        <function-ref name="led2Toggle" scoped="" ref="0x40860e90"/>
        <function-ref name="get" scoped="" ref="0x4085f010"/>
        <function-ref name="led1Off" scoped="" ref="0x4085f0f0"/>
        <function-ref name="led2Off" scoped="" ref="0x4085f470"/>
        <function-ref name="set" scoped="" ref="0x4085f1d0"/>
        <function-ref name="led0On" scoped="" ref="0x4085f2b0"/>
        <function-ref name="led2On" scoped="" ref="0x4085f390"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="MainBoot" ref="0x40848440" loc="89:/opt/tinyos-2.1.0/tos/lib/printf/PrintfP.nc">
      <component-ref qname="PrintfP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="MainBoot" scoped="" ref="0x40848440"/></type-interface>
      <instance>
        <interfacedef-ref qname="Boot"/>
      </instance>
      <interface-functions>
        <function-ref name="booted" scoped="" ref="0x40848618"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Leds" ref="0x4084b510" loc="35:/opt/tinyos-2.1.0/tos/system/LedsC.nc">
      <component-ref qname="LedsC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Leds" scoped="" ref="0x4084b510"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x4084b6e8"/>
        <function-ref name="led0Toggle" scoped="" ref="0x4084b7c8"/>
        <function-ref name="led1On" scoped="" ref="0x4084b8a8"/>
        <function-ref name="led1Toggle" scoped="" ref="0x4084b988"/>
        <function-ref name="led2Toggle" scoped="" ref="0x4084ba68"/>
        <function-ref name="get" scoped="" ref="0x4084bb48"/>
        <function-ref name="led1Off" scoped="" ref="0x4084bc28"/>
        <function-ref name="led2Off" scoped="" ref="0x40867010"/>
        <function-ref name="set" scoped="" ref="0x4084bd08"/>
        <function-ref name="led0On" scoped="" ref="0x4084bde8"/>
        <function-ref name="led2On" scoped="" ref="0x4084bec8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Led0" ref="0x40864940" loc="39:/opt/tinyos-2.1.0/tos/system/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Led0" scoped="" ref="0x40864940"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40864b18"/>
        <function-ref name="isInput" scoped="" ref="0x40864bf8"/>
        <function-ref name="toggle" scoped="" ref="0x40864cd8"/>
        <function-ref name="isOutput" scoped="" ref="0x40864db8"/>
        <function-ref name="get" scoped="" ref="0x40864e98"/>
        <function-ref name="makeOutput" scoped="" ref="0x40863010"/>
        <function-ref name="set" scoped="" ref="0x408630f0"/>
        <function-ref name="clr" scoped="" ref="0x408631d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x40867890" loc="35:/opt/tinyos-2.1.0/tos/system/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x40867890"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x40867a68"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Led1" ref="0x408633c0" loc="40:/opt/tinyos-2.1.0/tos/system/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Led1" scoped="" ref="0x408633c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40863598"/>
        <function-ref name="isInput" scoped="" ref="0x40863678"/>
        <function-ref name="toggle" scoped="" ref="0x40863758"/>
        <function-ref name="isOutput" scoped="" ref="0x40863838"/>
        <function-ref name="get" scoped="" ref="0x40863918"/>
        <function-ref name="makeOutput" scoped="" ref="0x408639f8"/>
        <function-ref name="set" scoped="" ref="0x40863ad8"/>
        <function-ref name="clr" scoped="" ref="0x40863bb8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Leds" ref="0x40867bd8" loc="36:/opt/tinyos-2.1.0/tos/system/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Leds" scoped="" ref="0x40867bd8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x40867db0"/>
        <function-ref name="led0Toggle" scoped="" ref="0x40867e90"/>
        <function-ref name="led1On" scoped="" ref="0x40864010"/>
        <function-ref name="led1Toggle" scoped="" ref="0x408640f0"/>
        <function-ref name="led2Toggle" scoped="" ref="0x408641d0"/>
        <function-ref name="get" scoped="" ref="0x408642b0"/>
        <function-ref name="led1Off" scoped="" ref="0x40864390"/>
        <function-ref name="led2Off" scoped="" ref="0x40864710"/>
        <function-ref name="set" scoped="" ref="0x40864470"/>
        <function-ref name="led0On" scoped="" ref="0x40864550"/>
        <function-ref name="led2On" scoped="" ref="0x40864630"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Led2" ref="0x40863da8" loc="41:/opt/tinyos-2.1.0/tos/system/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Led2" scoped="" ref="0x40863da8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40862010"/>
        <function-ref name="isInput" scoped="" ref="0x408620f0"/>
        <function-ref name="toggle" scoped="" ref="0x408621d0"/>
        <function-ref name="isOutput" scoped="" ref="0x408622b0"/>
        <function-ref name="get" scoped="" ref="0x40862390"/>
        <function-ref name="makeOutput" scoped="" ref="0x40862470"/>
        <function-ref name="set" scoped="" ref="0x40862550"/>
        <function-ref name="clr" scoped="" ref="0x40862630"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Led0" ref="0x408667f0" loc="35:/opt/tinyos-2.1.0/tos/platforms/mica/PlatformLedsC.nc">
      <component-ref qname="PlatformLedsC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Led0" scoped="" ref="0x408667f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x408669c8"/>
        <function-ref name="isInput" scoped="" ref="0x40866aa8"/>
        <function-ref name="toggle" scoped="" ref="0x40866b88"/>
        <function-ref name="isOutput" scoped="" ref="0x40866c68"/>
        <function-ref name="get" scoped="" ref="0x40866d48"/>
        <function-ref name="makeOutput" scoped="" ref="0x40866e28"/>
        <function-ref name="set" scoped="" ref="0x40866f08"/>
        <function-ref name="clr" scoped="" ref="0x4088a010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Led1" ref="0x4088a220" loc="36:/opt/tinyos-2.1.0/tos/platforms/mica/PlatformLedsC.nc">
      <component-ref qname="PlatformLedsC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Led1" scoped="" ref="0x4088a220"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4088a3f8"/>
        <function-ref name="isInput" scoped="" ref="0x4088a4d8"/>
        <function-ref name="toggle" scoped="" ref="0x4088a5b8"/>
        <function-ref name="isOutput" scoped="" ref="0x4088a698"/>
        <function-ref name="get" scoped="" ref="0x4088a778"/>
        <function-ref name="makeOutput" scoped="" ref="0x4088a858"/>
        <function-ref name="set" scoped="" ref="0x4088a938"/>
        <function-ref name="clr" scoped="" ref="0x4088aa18"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Init" ref="0x40889600" loc="38:/opt/tinyos-2.1.0/tos/platforms/mica/PlatformLedsC.nc">
      <component-ref qname="PlatformLedsC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x40889600"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x408897d8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Led2" ref="0x4088ac28" loc="37:/opt/tinyos-2.1.0/tos/platforms/mica/PlatformLedsC.nc">
      <component-ref qname="PlatformLedsC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Led2" scoped="" ref="0x4088ac28"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4088ae00"/>
        <function-ref name="isInput" scoped="" ref="0x4088aee0"/>
        <function-ref name="toggle" scoped="" ref="0x40889010"/>
        <function-ref name="isOutput" scoped="" ref="0x408890f0"/>
        <function-ref name="get" scoped="" ref="0x408891d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x408892b0"/>
        <function-ref name="set" scoped="" ref="0x40889390"/>
        <function-ref name="clr" scoped="" ref="0x40889470"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x40438d98" loc="48:/opt/tinyos-2.1.0/tos/platforms/mica2/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SplitControl" scoped="" ref="0x40438d98"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x40886010"/>
        <function-ref name="stopDone" scoped="" ref="0x408860f0"/>
        <function-ref name="start" scoped="" ref="0x408861d0"/>
        <function-ref name="stop" scoped="" ref="0x408862b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x40886710" loc="50:/opt/tinyos-2.1.0/tos/platforms/mica2/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMSend" scoped="" ref="0x40886710"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x408868e8"/>
        <function-ref name="getPayload" scoped="" ref="0x408869c8"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x40886aa8"/>
        <function-ref name="cancel" scoped="" ref="0x40886b88"/>
        <function-ref name="sendDone" scoped="" ref="0x40886c68"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Snoop" ref="0x40885798" loc="52:/opt/tinyos-2.1.0/tos/platforms/mica2/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Snoop" scoped="" ref="0x40885798"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x40885970"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x40885af0" loc="54:/opt/tinyos-2.1.0/tos/platforms/mica2/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0x40885af0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x40885cc8"/>
        <function-ref name="payloadLength" scoped="" ref="0x40885da8"/>
        <function-ref name="getPayload" scoped="" ref="0x40885e88"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x40884010"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x408840f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x40885100" loc="51:/opt/tinyos-2.1.0/tos/platforms/mica2/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0x40885100"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x408852d8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketAcknowledgements" ref="0x40883010" loc="56:/opt/tinyos-2.1.0/tos/platforms/mica2/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketAcknowledgements" scoped="" ref="0x40883010"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x408831e8"/>
        <function-ref name="noAck" scoped="" ref="0x408832c8"/>
        <function-ref name="wasAcked" scoped="" ref="0x408833a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x40884288" loc="55:/opt/tinyos-2.1.0/tos/platforms/mica2/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0x40884288"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x40884460"/>
        <function-ref name="source" scoped="" ref="0x40884540"/>
        <function-ref name="address" scoped="" ref="0x40884620"/>
        <function-ref name="destination" scoped="" ref="0x40884700"/>
        <function-ref name="setSource" scoped="" ref="0x408847e0"/>
        <function-ref name="setDestination" scoped="" ref="0x408848c0"/>
        <function-ref name="type" scoped="" ref="0x408849a0"/>
        <function-ref name="setType" scoped="" ref="0x40884a80"/>
        <function-ref name="isForMe" scoped="" ref="0x40884b60"/>
        <function-ref name="setGroup" scoped="" ref="0x40884c40"/>
        <function-ref name="localGroup" scoped="" ref="0x40884d20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x40883ca8" loc="46:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000ActiveMessageC.nc">
      <component-ref qname="CC1000ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SplitControl" scoped="" ref="0x40883ca8"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x40883e80"/>
        <function-ref name="stopDone" scoped="" ref="0x40880010"/>
        <function-ref name="start" scoped="" ref="0x408800f0"/>
        <function-ref name="stop" scoped="" ref="0x408801d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x40880630" loc="47:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000ActiveMessageC.nc">
      <component-ref qname="CC1000ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMSend" scoped="" ref="0x40880630"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x4039b8b0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x40880808"/>
        <function-ref name="getPayload" scoped="" ref="0x408808e8"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x408809c8"/>
        <function-ref name="cancel" scoped="" ref="0x40880aa8"/>
        <function-ref name="sendDone" scoped="" ref="0x40880b88"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Snoop" ref="0x4087e6a8" loc="49:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000ActiveMessageC.nc">
      <component-ref qname="CC1000ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Snoop" scoped="" ref="0x4087e6a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x4039b8b0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x4087e880"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x4087d6d0" loc="51:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000ActiveMessageC.nc">
      <component-ref qname="CC1000ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0x4087d6d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x4087d8a8"/>
        <function-ref name="payloadLength" scoped="" ref="0x4087d988"/>
        <function-ref name="getPayload" scoped="" ref="0x4087da68"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x4087db48"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x4087dc28"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x4087e010" loc="48:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000ActiveMessageC.nc">
      <component-ref qname="CC1000ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0x4087e010"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x4039b8b0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x4087e1e8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketAcknowledgements" ref="0x4087de48" loc="52:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000ActiveMessageC.nc">
      <component-ref qname="CC1000ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketAcknowledgements" scoped="" ref="0x4087de48"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x40899050"/>
        <function-ref name="noAck" scoped="" ref="0x40899130"/>
        <function-ref name="wasAcked" scoped="" ref="0x40899210"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x4087ea18" loc="50:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000ActiveMessageC.nc">
      <component-ref qname="CC1000ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0x4087ea18"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x4087ebf0"/>
        <function-ref name="source" scoped="" ref="0x4087ecd0"/>
        <function-ref name="address" scoped="" ref="0x4087edb0"/>
        <function-ref name="destination" scoped="" ref="0x4087ee90"/>
        <function-ref name="setSource" scoped="" ref="0x4087d010"/>
        <function-ref name="setDestination" scoped="" ref="0x4087d0f0"/>
        <function-ref name="type" scoped="" ref="0x4087d1d0"/>
        <function-ref name="setType" scoped="" ref="0x4087d2b0"/>
        <function-ref name="isForMe" scoped="" ref="0x4087d390"/>
        <function-ref name="setGroup" scoped="" ref="0x4087d470"/>
        <function-ref name="localGroup" scoped="" ref="0x4087d550"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LinkPacketMetadata" ref="0x40895270" loc="53:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000ActiveMessageC.nc">
      <component-ref qname="CC1000ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LinkPacketMetadata" scoped="" ref="0x40895270"/></type-interface>
      <instance>
        <interfacedef-ref qname="LinkPacketMetadata"/>
      </instance>
      <interface-functions>
        <function-ref name="highChannelQuality" scoped="" ref="0x40895448"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0x40892230" loc="46:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000ActiveMessageP.nc">
      <component-ref qname="CC1000ActiveMessageP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubSend" scoped="" ref="0x40892230"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x40892408"/>
        <function-ref name="getPayload" scoped="" ref="0x408924e8"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x408925c8"/>
        <function-ref name="cancel" scoped="" ref="0x408926a8"/>
        <function-ref name="sendDone" scoped="" ref="0x40892788"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0x40892998" loc="47:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000ActiveMessageP.nc">
      <component-ref qname="CC1000ActiveMessageP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubReceive" scoped="" ref="0x40892998"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x40892b70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x40894158" loc="40:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000ActiveMessageP.nc">
      <component-ref qname="CC1000ActiveMessageP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMSend" scoped="" ref="0x40894158"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x4039b8b0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x40894330"/>
        <function-ref name="getPayload" scoped="" ref="0x40894410"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x408944f0"/>
        <function-ref name="cancel" scoped="" ref="0x408945d0"/>
        <function-ref name="sendDone" scoped="" ref="0x408946b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Snoop" ref="0x408931f8" loc="42:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000ActiveMessageP.nc">
      <component-ref qname="CC1000ActiveMessageP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Snoop" scoped="" ref="0x408931f8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x4039b8b0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x408933d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Packet" ref="0x40892d50" loc="48:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000ActiveMessageP.nc">
      <component-ref qname="CC1000ActiveMessageP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0x40892d50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x40892f28"/>
        <function-ref name="payloadLength" scoped="" ref="0x40891018"/>
        <function-ref name="getPayload" scoped="" ref="0x408910f8"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x408911d8"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x408912b8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x40894b18" loc="41:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000ActiveMessageP.nc">
      <component-ref qname="CC1000ActiveMessageP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0x40894b18"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x4039b8b0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x40894cf0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x40893568" loc="43:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000ActiveMessageP.nc">
      <component-ref qname="CC1000ActiveMessageP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0x40893568"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x40893740"/>
        <function-ref name="source" scoped="" ref="0x40893820"/>
        <function-ref name="address" scoped="" ref="0x40893900"/>
        <function-ref name="destination" scoped="" ref="0x408939e0"/>
        <function-ref name="setSource" scoped="" ref="0x40893ac0"/>
        <function-ref name="setDestination" scoped="" ref="0x40893ba0"/>
        <function-ref name="type" scoped="" ref="0x40893c80"/>
        <function-ref name="setType" scoped="" ref="0x40893d60"/>
        <function-ref name="isForMe" scoped="" ref="0x40893e40"/>
        <function-ref name="setGroup" scoped="" ref="0x40893f20"/>
        <function-ref name="localGroup" scoped="" ref="0x40892018"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x408c4040" loc="54:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <component-ref qname="CC1000CsmaRadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SplitControl" scoped="" ref="0x408c4040"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x408c4218"/>
        <function-ref name="stopDone" scoped="" ref="0x408c42f8"/>
        <function-ref name="start" scoped="" ref="0x408c43d8"/>
        <function-ref name="stop" scoped="" ref="0x408c44b8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LinkPacketMetadata" ref="0x408bbc98" loc="63:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <component-ref qname="CC1000CsmaRadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LinkPacketMetadata" scoped="" ref="0x408bbc98"/></type-interface>
      <instance>
        <interfacedef-ref qname="LinkPacketMetadata"/>
      </instance>
      <interface-functions>
        <function-ref name="highChannelQuality" scoped="" ref="0x408bbe70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x408c30a0" loc="58:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <component-ref qname="CC1000CsmaRadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0x408c30a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x408c3278"/>
        <function-ref name="payloadLength" scoped="" ref="0x408c3358"/>
        <function-ref name="getPayload" scoped="" ref="0x408c3438"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x408c3518"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x408c35f8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x408c4628" loc="55:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <component-ref qname="CC1000CsmaRadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Send" scoped="" ref="0x408c4628"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x408c4800"/>
        <function-ref name="getPayload" scoped="" ref="0x408c48e0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x408c49c0"/>
        <function-ref name="cancel" scoped="" ref="0x408c4aa0"/>
        <function-ref name="sendDone" scoped="" ref="0x408c4b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LowPowerListening" ref="0x408d21c8" loc="65:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <component-ref qname="CC1000CsmaRadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LowPowerListening" scoped="" ref="0x408d21c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="LowPowerListening"/>
      </instance>
      <interface-functions>
        <function-ref name="getLocalSleepInterval" scoped="" ref="0x408d23a0"/>
        <function-ref name="getRxDutyCycle" scoped="" ref="0x408d2480"/>
        <function-ref name="sleepIntervalToDutyCycle" scoped="" ref="0x408d2560"/>
        <function-ref name="getLocalDutyCycle" scoped="" ref="0x408d2640"/>
        <function-ref name="setRxSleepInterval" scoped="" ref="0x408d2720"/>
        <function-ref name="setLocalDutyCycle" scoped="" ref="0x408d2800"/>
        <function-ref name="setRxDutyCycle" scoped="" ref="0x408d28e0"/>
        <function-ref name="dutyCycleToSleepInterval" scoped="" ref="0x408d29c0"/>
        <function-ref name="getRxSleepInterval" scoped="" ref="0x408d2aa0"/>
        <function-ref name="setLocalSleepInterval" scoped="" ref="0x408d2b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CsmaControl" ref="0x408c0460" loc="59:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <component-ref qname="CC1000CsmaRadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CsmaControl" scoped="" ref="0x408c0460"/></type-interface>
      <instance>
        <interfacedef-ref qname="CsmaControl"/>
      </instance>
      <interface-functions>
        <function-ref name="disableCca" scoped="" ref="0x408c0638"/>
        <function-ref name="enableCca" scoped="" ref="0x408c0718"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x408c4d08" loc="56:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <component-ref qname="CC1000CsmaRadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0x408c4d08"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x408c4ee0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketAcknowledgements" ref="0x408bb708" loc="62:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <component-ref qname="CC1000CsmaRadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketAcknowledgements" scoped="" ref="0x408bb708"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x408bb8e0"/>
        <function-ref name="noAck" scoped="" ref="0x408bb9c0"/>
        <function-ref name="wasAcked" scoped="" ref="0x408bbaa0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CsmaBackoff" ref="0x408be098" loc="60:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <component-ref qname="CC1000CsmaRadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CsmaBackoff" scoped="" ref="0x408be098"/></type-interface>
      <instance>
        <interfacedef-ref qname="CsmaBackoff"/>
      </instance>
      <interface-functions>
        <function-ref name="congestion" scoped="" ref="0x408be270"/>
        <function-ref name="initial" scoped="" ref="0x408be350"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioTimeStamping" ref="0x408bb230" loc="61:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <component-ref qname="CC1000CsmaRadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioTimeStamping" scoped="" ref="0x408bb230"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioTimeStamping"/>
      </instance>
      <interface-functions>
        <function-ref name="transmittedSFD" scoped="" ref="0x408bb408"/>
        <function-ref name="receivedSFD" scoped="" ref="0x408bb4e8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x408c1ac8" loc="56:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000CsmaP.nc">
      <component-ref qname="CC1000CsmaP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SplitControl" scoped="" ref="0x408c1ac8"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x408c1ca0"/>
        <function-ref name="stopDone" scoped="" ref="0x408c1d80"/>
        <function-ref name="start" scoped="" ref="0x408c1e60"/>
        <function-ref name="stop" scoped="" ref="0x408d0010"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="BusyWait" ref="0x408d7a28" loc="71:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000CsmaP.nc">
      <component-ref qname="CC1000CsmaP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="BusyWait" scoped="" ref="0x408d7a28"/></type-interface>
      <instance>
        <interfacedef-ref qname="BusyWait"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x40317288"/>
            <typename><typedef-ref name="TMicro" ref="0x40317450"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x4019ad68"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="wait" scoped="" ref="0x408d9228"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="setWakeupTask" ref="0x408ee040" loc="108:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000CsmaP.nc">
      <component-ref qname="CC1000CsmaP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="setWakeupTask" scoped="" ref="0x408ee040"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x408ee218"/>
        <function-ref name="runTask" scoped="" ref="0x408ee2f8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="startStopDone" ref="0x408ffd18" loc="175:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000CsmaP.nc">
      <component-ref qname="CC1000CsmaP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="startStopDone" scoped="" ref="0x408ffd18"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x408ffef0"/>
        <function-ref name="runTask" scoped="" ref="0x408fe010"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RssiNoiseFloor" ref="0x408f3ac0" loc="73:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000CsmaP.nc">
      <component-ref qname="CC1000CsmaP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RssiNoiseFloor" scoped="" ref="0x408f3ac0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReadNow"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x4019ad68"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x408d8120"/>
        <function-ref name="readDone" scoped="" ref="0x408d8398"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Random" ref="0x408e3010" loc="69:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000CsmaP.nc">
      <component-ref qname="CC1000CsmaP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Random" scoped="" ref="0x408e3010"/></type-interface>
      <instance>
        <interfacedef-ref qname="Random"/>
      </instance>
      <interface-functions>
        <function-ref name="rand16" scoped="" ref="0x408e31e8"/>
        <function-ref name="rand32" scoped="" ref="0x408e32c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LowPowerListening" ref="0x408d0ad0" loc="59:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000CsmaP.nc">
      <component-ref qname="CC1000CsmaP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LowPowerListening" scoped="" ref="0x408d0ad0"/></type-interface>
      <instance>
        <interfacedef-ref qname="LowPowerListening"/>
      </instance>
      <interface-functions>
        <function-ref name="getLocalSleepInterval" scoped="" ref="0x408d0ca8"/>
        <function-ref name="getRxDutyCycle" scoped="" ref="0x408d0d88"/>
        <function-ref name="sleepIntervalToDutyCycle" scoped="" ref="0x408d0e68"/>
        <function-ref name="getLocalDutyCycle" scoped="" ref="0x408cf010"/>
        <function-ref name="setRxSleepInterval" scoped="" ref="0x408cf0f0"/>
        <function-ref name="setLocalDutyCycle" scoped="" ref="0x408cf1d0"/>
        <function-ref name="setRxDutyCycle" scoped="" ref="0x408cf2b0"/>
        <function-ref name="dutyCycleToSleepInterval" scoped="" ref="0x408cf390"/>
        <function-ref name="getRxSleepInterval" scoped="" ref="0x408cf470"/>
        <function-ref name="setLocalSleepInterval" scoped="" ref="0x408cf550"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CsmaControl" ref="0x408d01c0" loc="57:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000CsmaP.nc">
      <component-ref qname="CC1000CsmaP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CsmaControl" scoped="" ref="0x408d01c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CsmaControl"/>
      </instance>
      <interface-functions>
        <function-ref name="disableCca" scoped="" ref="0x408d0398"/>
        <function-ref name="enableCca" scoped="" ref="0x408d0478"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x408c1730" loc="55:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000CsmaP.nc">
      <component-ref qname="CC1000CsmaP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x408c1730"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x408c1908"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RssiCheckChannel" ref="0x408d8868" loc="74:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000CsmaP.nc">
      <component-ref qname="CC1000CsmaP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RssiCheckChannel" scoped="" ref="0x408d8868"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReadNow"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x4019ad68"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x408d8eb0"/>
        <function-ref name="readDone" scoped="" ref="0x408f2150"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CC1000Squelch" ref="0x408dca50" loc="68:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000CsmaP.nc">
      <component-ref qname="CC1000CsmaP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CC1000Squelch" scoped="" ref="0x408dca50"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC1000Squelch"/>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x408dcc28"/>
        <function-ref name="settled" scoped="" ref="0x408dcd08"/>
        <function-ref name="adjust" scoped="" ref="0x408dcde8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="sleepCheck" ref="0x409118b0" loc="293:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000CsmaP.nc">
      <component-ref qname="CC1000CsmaP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="sleepCheck" scoped="" ref="0x409118b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x40911a88"/>
        <function-ref name="runTask" scoped="" ref="0x40911b68"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="WakeupTimer" ref="0x408e35a0" loc="70:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000CsmaP.nc">
      <component-ref qname="CC1000CsmaP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="WakeupTimer" scoped="" ref="0x408e35a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x403189d0"/>
            <typename><typedef-ref name="TMilli" ref="0x40318b98"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x408db098"/>
        <function-ref name="fired" scoped="" ref="0x408dd330"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x408dda38"/>
        <function-ref name="isOneShot" scoped="" ref="0x408dd7e0"/>
        <function-ref name="getdt" scoped="" ref="0x408db548"/>
        <function-ref name="gett0" scoped="" ref="0x408db2f0"/>
        <function-ref name="isRunning" scoped="" ref="0x408dd588"/>
        <function-ref name="startPeriodic" scoped="" ref="0x408e3bc8"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x408ddd58"/>
        <function-ref name="startOneShot" scoped="" ref="0x408e3e48"/>
        <function-ref name="stop" scoped="" ref="0x408dd0d8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ByteRadioInit" ref="0x408cf7a8" loc="62:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000CsmaP.nc">
      <component-ref qname="CC1000CsmaP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ByteRadioInit" scoped="" ref="0x408cf7a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x408cf980"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="adjustSquelch" ref="0x4090d1f0" loc="316:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000CsmaP.nc">
      <component-ref qname="CC1000CsmaP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="adjustSquelch" scoped="" ref="0x4090d1f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x4090d3c8"/>
        <function-ref name="runTask" scoped="" ref="0x4090d4a8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CC1000Control" ref="0x408de860" loc="67:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000CsmaP.nc">
      <component-ref qname="CC1000CsmaP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CC1000Control" scoped="" ref="0x408de860"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC1000Control"/>
      </instance>
      <interface-functions>
        <function-ref name="tunePreset" scoped="" ref="0x408dea38"/>
        <function-ref name="biasOn" scoped="" ref="0x408deb18"/>
        <function-ref name="getRFPower" scoped="" ref="0x408debf8"/>
        <function-ref name="tuneManual" scoped="" ref="0x408decd8"/>
        <function-ref name="selectLock" scoped="" ref="0x408dedb8"/>
        <function-ref name="init" scoped="" ref="0x408dee98"/>
        <function-ref name="getLock" scoped="" ref="0x408cc010"/>
        <function-ref name="coreOn" scoped="" ref="0x408cc0f0"/>
        <function-ref name="txMode" scoped="" ref="0x408cc1d0"/>
        <function-ref name="getLOStatus" scoped="" ref="0x408cc2b0"/>
        <function-ref name="rxMode" scoped="" ref="0x408cc390"/>
        <function-ref name="off" scoped="" ref="0x408cc470"/>
        <function-ref name="setRFPower" scoped="" ref="0x408cc550"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ByteRadioControl" ref="0x408cfbf0" loc="63:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000CsmaP.nc">
      <component-ref qname="CC1000CsmaP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ByteRadioControl" scoped="" ref="0x408cfbf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x408cfdc8"/>
        <function-ref name="stop" scoped="" ref="0x408cfea8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RssiPulseCheck" ref="0x408f2608" loc="75:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000CsmaP.nc">
      <component-ref qname="CC1000CsmaP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RssiPulseCheck" scoped="" ref="0x408f2608"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReadNow"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x4019ad68"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x408f2c50"/>
        <function-ref name="readDone" scoped="" ref="0x408f2ec8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CsmaBackoff" ref="0x408d0628" loc="58:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000CsmaP.nc">
      <component-ref qname="CC1000CsmaP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CsmaBackoff" scoped="" ref="0x408d0628"/></type-interface>
      <instance>
        <interfacedef-ref qname="CsmaBackoff"/>
      </instance>
      <interface-functions>
        <function-ref name="congestion" scoped="" ref="0x408d0800"/>
        <function-ref name="initial" scoped="" ref="0x408d08e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ByteRadio" ref="0x408e41c8" loc="64:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000CsmaP.nc">
      <component-ref qname="CC1000CsmaP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ByteRadio" scoped="" ref="0x408e41c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="ByteRadio"/>
      </instance>
      <interface-functions>
        <function-ref name="rts" scoped="" ref="0x408e43a0"/>
        <function-ref name="listen" scoped="" ref="0x408e4480"/>
        <function-ref name="syncing" scoped="" ref="0x408e4560"/>
        <function-ref name="rxDone" scoped="" ref="0x408e4640"/>
        <function-ref name="getPreambleLength" scoped="" ref="0x408e4720"/>
        <function-ref name="idleByte" scoped="" ref="0x408e4800"/>
        <function-ref name="cts" scoped="" ref="0x408e48e0"/>
        <function-ref name="setPreambleLength" scoped="" ref="0x408e49c0"/>
        <function-ref name="sendDone" scoped="" ref="0x408e4aa0"/>
        <function-ref name="off" scoped="" ref="0x408e4b80"/>
        <function-ref name="getTxMessage" scoped="" ref="0x408e4c60"/>
        <function-ref name="rx" scoped="" ref="0x408e4d40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x40939548" loc="62:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000SendReceiveP.nc">
      <component-ref qname="CC1000SendReceiveP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0x40939548"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x40939720"/>
        <function-ref name="payloadLength" scoped="" ref="0x40939800"/>
        <function-ref name="getPayload" scoped="" ref="0x409398e0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x409399c0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x40939aa0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplCC1000Spi" ref="0x40935330" loc="70:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000SendReceiveP.nc">
      <component-ref qname="CC1000SendReceiveP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplCC1000Spi" scoped="" ref="0x40935330"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplCC1000Spi"/>
      </instance>
      <interface-functions>
        <function-ref name="isBufBusy" scoped="" ref="0x40935508"/>
        <function-ref name="initSlave" scoped="" ref="0x409355e8"/>
        <function-ref name="disableIntr" scoped="" ref="0x409356c8"/>
        <function-ref name="writeByte" scoped="" ref="0x409357a8"/>
        <function-ref name="enableIntr" scoped="" ref="0x40935888"/>
        <function-ref name="txMode" scoped="" ref="0x40935968"/>
        <function-ref name="readByte" scoped="" ref="0x40935a48"/>
        <function-ref name="rxMode" scoped="" ref="0x40935b28"/>
        <function-ref name="dataReady" scoped="" ref="0x40935c08"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x4093a620" loc="59:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000SendReceiveP.nc">
      <component-ref qname="CC1000SendReceiveP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Send" scoped="" ref="0x4093a620"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x4093a7f8"/>
        <function-ref name="getPayload" scoped="" ref="0x4093a8d8"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x4093a9b8"/>
        <function-ref name="cancel" scoped="" ref="0x4093aa98"/>
        <function-ref name="sendDone" scoped="" ref="0x4093ab78"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x4093de28" loc="57:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000SendReceiveP.nc">
      <component-ref qname="CC1000SendReceiveP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x4093de28"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x4093a050"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RssiRx" ref="0x409344a0" loc="72:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000SendReceiveP.nc">
      <component-ref qname="CC1000SendReceiveP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RssiRx" scoped="" ref="0x409344a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReadNow"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x4019ad68"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x40934b68"/>
        <function-ref name="readDone" scoped="" ref="0x40934de0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x4093ad00" loc="60:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000SendReceiveP.nc">
      <component-ref qname="CC1000SendReceiveP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0x4093ad00"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x4093aed8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CC1000Squelch" ref="0x40935dd0" loc="71:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000SendReceiveP.nc">
      <component-ref qname="CC1000SendReceiveP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CC1000Squelch" scoped="" ref="0x40935dd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC1000Squelch"/>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x40934010"/>
        <function-ref name="settled" scoped="" ref="0x409340f0"/>
        <function-ref name="adjust" scoped="" ref="0x409341d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="signalPacketSent" ref="0x4097ed20" loc="377:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000SendReceiveP.nc">
      <component-ref qname="CC1000SendReceiveP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="signalPacketSent" scoped="" ref="0x4097ed20"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x4097eef8"/>
        <function-ref name="runTask" scoped="" ref="0x4097d010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketAcknowledgements" ref="0x40938a10" loc="64:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000SendReceiveP.nc">
      <component-ref qname="CC1000SendReceiveP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketAcknowledgements" scoped="" ref="0x40938a10"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x40938be8"/>
        <function-ref name="noAck" scoped="" ref="0x40938cc8"/>
        <function-ref name="wasAcked" scoped="" ref="0x40938da8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CC1000Control" ref="0x40936400" loc="69:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000SendReceiveP.nc">
      <component-ref qname="CC1000SendReceiveP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CC1000Control" scoped="" ref="0x40936400"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC1000Control"/>
      </instance>
      <interface-functions>
        <function-ref name="tunePreset" scoped="" ref="0x409365d8"/>
        <function-ref name="biasOn" scoped="" ref="0x409366b8"/>
        <function-ref name="getRFPower" scoped="" ref="0x40936798"/>
        <function-ref name="tuneManual" scoped="" ref="0x40936878"/>
        <function-ref name="selectLock" scoped="" ref="0x40936958"/>
        <function-ref name="init" scoped="" ref="0x40936a38"/>
        <function-ref name="getLock" scoped="" ref="0x40936b18"/>
        <function-ref name="coreOn" scoped="" ref="0x40936bf8"/>
        <function-ref name="txMode" scoped="" ref="0x40936cd8"/>
        <function-ref name="getLOStatus" scoped="" ref="0x40936db8"/>
        <function-ref name="rxMode" scoped="" ref="0x40936e98"/>
        <function-ref name="off" scoped="" ref="0x40935010"/>
        <function-ref name="setRFPower" scoped="" ref="0x409350f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="signalPacketReceived" ref="0x409a2bd8" loc="548:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000SendReceiveP.nc">
      <component-ref qname="CC1000SendReceiveP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="signalPacketReceived" scoped="" ref="0x409a2bd8"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x409a2db0"/>
        <function-ref name="runTask" scoped="" ref="0x409a2e90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ByteRadio" ref="0x40939c40" loc="63:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000SendReceiveP.nc">
      <component-ref qname="CC1000SendReceiveP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ByteRadio" scoped="" ref="0x40939c40"/></type-interface>
      <instance>
        <interfacedef-ref qname="ByteRadio"/>
      </instance>
      <interface-functions>
        <function-ref name="rts" scoped="" ref="0x40939e18"/>
        <function-ref name="listen" scoped="" ref="0x40939ef8"/>
        <function-ref name="syncing" scoped="" ref="0x40938010"/>
        <function-ref name="rxDone" scoped="" ref="0x409380f0"/>
        <function-ref name="getPreambleLength" scoped="" ref="0x409381d0"/>
        <function-ref name="idleByte" scoped="" ref="0x409382b0"/>
        <function-ref name="cts" scoped="" ref="0x40938390"/>
        <function-ref name="setPreambleLength" scoped="" ref="0x40938470"/>
        <function-ref name="sendDone" scoped="" ref="0x40938550"/>
        <function-ref name="off" scoped="" ref="0x40938630"/>
        <function-ref name="getTxMessage" scoped="" ref="0x40938710"/>
        <function-ref name="rx" scoped="" ref="0x409387f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="StdControl" ref="0x4093a1f8" loc="58:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000SendReceiveP.nc">
      <component-ref qname="CC1000SendReceiveP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="StdControl" scoped="" ref="0x4093a1f8"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x4093a3d0"/>
        <function-ref name="stop" scoped="" ref="0x4093a4b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LinkPacketMetadata" ref="0x40936010" loc="65:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000SendReceiveP.nc">
      <component-ref qname="CC1000SendReceiveP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LinkPacketMetadata" scoped="" ref="0x40936010"/></type-interface>
      <instance>
        <interfacedef-ref qname="LinkPacketMetadata"/>
      </instance>
      <interface-functions>
        <function-ref name="highChannelQuality" scoped="" ref="0x409361e8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RadioTimeStamping" ref="0x40939110" loc="61:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000SendReceiveP.nc">
      <component-ref qname="CC1000SendReceiveP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioTimeStamping" scoped="" ref="0x40939110"/></type-interface>
      <instance>
        <interfacedef-ref qname="RadioTimeStamping"/>
      </instance>
      <interface-functions>
        <function-ref name="transmittedSFD" scoped="" ref="0x409392e8"/>
        <function-ref name="receivedSFD" scoped="" ref="0x409393c8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ActualRssi" ref="0x409bdbe8" loc="52:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000RssiP.nc">
      <component-ref qname="CC1000RssiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ActualRssi" scoped="" ref="0x409bdbe8"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReadNow"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x4019ad68"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x409c1278"/>
        <function-ref name="readDone" scoped="" ref="0x409c14f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Resource" ref="0x409bd398" loc="51:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000RssiP.nc">
      <component-ref qname="CC1000RssiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Resource" scoped="" ref="0x409bd398"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x409bd570"/>
        <function-ref name="immediateRequest" scoped="" ref="0x409bd650"/>
        <function-ref name="request" scoped="" ref="0x409bd730"/>
        <function-ref name="granted" scoped="" ref="0x409bd810"/>
        <function-ref name="isOwner" scoped="" ref="0x409bd8f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Rssi" ref="0x409c3368" loc="47:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000RssiP.nc">
      <component-ref qname="CC1000RssiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Rssi" scoped="" ref="0x409c3368"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReadNow"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x4019ad68"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x409c39b0"/>
        <function-ref name="readDone" scoped="" ref="0x409c3c28"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x409a3ac0" loc="43:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000SquelchP.nc">
      <component-ref qname="CC1000SquelchP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x409a3ac0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x409a3c98"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CC1000Squelch" ref="0x409a3e60" loc="44:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000SquelchP.nc">
      <component-ref qname="CC1000SquelchP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CC1000Squelch" scoped="" ref="0x409a3e60"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC1000Squelch"/>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x409d5050"/>
        <function-ref name="settled" scoped="" ref="0x409d5130"/>
        <function-ref name="adjust" scoped="" ref="0x409d5210"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="BusyWait" ref="0x409c9df0" loc="47:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000ControlP.nc">
      <component-ref qname="CC1000ControlP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="BusyWait" scoped="" ref="0x409c9df0"/></type-interface>
      <instance>
        <interfacedef-ref qname="BusyWait"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x40317288"/>
            <typename><typedef-ref name="TMicro" ref="0x40317450"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x4019ad68"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="wait" scoped="" ref="0x409c8570"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CC" ref="0x409c9628" loc="46:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000ControlP.nc">
      <component-ref qname="CC1000ControlP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CC" scoped="" ref="0x409c9628"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplCC1000"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x409c9800"/>
        <function-ref name="read" scoped="" ref="0x409c98e0"/>
        <function-ref name="write" scoped="" ref="0x409c99c0"/>
        <function-ref name="getLOCK" scoped="" ref="0x409c9aa0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CC1000Control" ref="0x409c46a0" loc="43:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000ControlP.nc">
      <component-ref qname="CC1000ControlP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CC1000Control" scoped="" ref="0x409c46a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC1000Control"/>
      </instance>
      <interface-functions>
        <function-ref name="tunePreset" scoped="" ref="0x409c4878"/>
        <function-ref name="biasOn" scoped="" ref="0x409c4958"/>
        <function-ref name="getRFPower" scoped="" ref="0x409c4a38"/>
        <function-ref name="tuneManual" scoped="" ref="0x409c4b18"/>
        <function-ref name="selectLock" scoped="" ref="0x409c4bf8"/>
        <function-ref name="init" scoped="" ref="0x409c4cd8"/>
        <function-ref name="getLock" scoped="" ref="0x409c4db8"/>
        <function-ref name="coreOn" scoped="" ref="0x409c4e98"/>
        <function-ref name="txMode" scoped="" ref="0x409c9010"/>
        <function-ref name="getLOStatus" scoped="" ref="0x409c90f0"/>
        <function-ref name="rxMode" scoped="" ref="0x409c91d0"/>
        <function-ref name="off" scoped="" ref="0x409c92b0"/>
        <function-ref name="setRFPower" scoped="" ref="0x409c9390"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplCC1000Spi" ref="0x40a12728" loc="39:/opt/tinyos-2.1.0/tos/platforms/mica2/chips/cc1000/HplCC1000C.nc">
      <component-ref qname="HplCC1000C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplCC1000Spi" scoped="" ref="0x40a12728"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplCC1000Spi"/>
      </instance>
      <interface-functions>
        <function-ref name="isBufBusy" scoped="" ref="0x40a12900"/>
        <function-ref name="initSlave" scoped="" ref="0x40a129e0"/>
        <function-ref name="disableIntr" scoped="" ref="0x40a12ac0"/>
        <function-ref name="writeByte" scoped="" ref="0x40a12ba0"/>
        <function-ref name="enableIntr" scoped="" ref="0x40a12c80"/>
        <function-ref name="txMode" scoped="" ref="0x40a12d60"/>
        <function-ref name="readByte" scoped="" ref="0x40a12e40"/>
        <function-ref name="rxMode" scoped="" ref="0x40a12f20"/>
        <function-ref name="dataReady" scoped="" ref="0x40a11018"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RssiAdc" ref="0x40a13328" loc="37:/opt/tinyos-2.1.0/tos/platforms/mica2/chips/cc1000/HplCC1000C.nc">
      <component-ref qname="HplCC1000C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RssiAdc" scoped="" ref="0x40a13328"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReadNow"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x4019ad68"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x40a13970"/>
        <function-ref name="readDone" scoped="" ref="0x40a13be8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RssiResource" ref="0x40a12010" loc="38:/opt/tinyos-2.1.0/tos/platforms/mica2/chips/cc1000/HplCC1000C.nc">
      <component-ref qname="HplCC1000C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RssiResource" scoped="" ref="0x40a12010"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x40a121e8"/>
        <function-ref name="immediateRequest" scoped="" ref="0x40a122c8"/>
        <function-ref name="request" scoped="" ref="0x40a123a8"/>
        <function-ref name="granted" scoped="" ref="0x40a12488"/>
        <function-ref name="isOwner" scoped="" ref="0x40a12568"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplCC1000" ref="0x40a111b8" loc="40:/opt/tinyos-2.1.0/tos/platforms/mica2/chips/cc1000/HplCC1000C.nc">
      <component-ref qname="HplCC1000C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplCC1000" scoped="" ref="0x40a111b8"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplCC1000"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x40a11390"/>
        <function-ref name="read" scoped="" ref="0x40a11470"/>
        <function-ref name="write" scoped="" ref="0x40a11550"/>
        <function-ref name="getLOCK" scoped="" ref="0x40a11630"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x40b08c58" loc="28:/opt/tinyos-2.1.0/tos/chips/atm128/adc/AdcReadNowClientC.nc">
      <component-ref qname="HplCC1000C.RssiChannel"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceConfigure" scoped="" ref="0x40b08c58"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x40b08e30"/>
        <function-ref name="configure" scoped="" ref="0x40b08f10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ReadNow" ref="0x40a0faf8" loc="24:/opt/tinyos-2.1.0/tos/chips/atm128/adc/AdcReadNowClientC.nc">
      <component-ref qname="HplCC1000C.RssiChannel"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ReadNow" scoped="" ref="0x40a0faf8"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReadNow"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x4019ad68"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x40b08200"/>
        <function-ref name="readDone" scoped="" ref="0x40b08478"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Atm128AdcConfig" ref="0x40b08780" loc="27:/opt/tinyos-2.1.0/tos/chips/atm128/adc/AdcReadNowClientC.nc">
      <component-ref qname="HplCC1000C.RssiChannel"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128AdcConfig" scoped="" ref="0x40b08780"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128AdcConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="getRefVoltage" scoped="" ref="0x40b08958"/>
        <function-ref name="getChannel" scoped="" ref="0x40b08a38"/>
        <function-ref name="getPrescaler" scoped="" ref="0x40b08b18"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x40a0f3d0" loc="23:/opt/tinyos-2.1.0/tos/chips/atm128/adc/AdcReadNowClientC.nc">
      <component-ref qname="HplCC1000C.RssiChannel"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Resource" scoped="" ref="0x40a0f3d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x40a0f5a8"/>
        <function-ref name="immediateRequest" scoped="" ref="0x40a0f688"/>
        <function-ref name="request" scoped="" ref="0x40a0f768"/>
        <function-ref name="granted" scoped="" ref="0x40a0f848"/>
        <function-ref name="isOwner" scoped="" ref="0x40a0f928"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Read" ref="0x40a0ab68" loc="18:/opt/tinyos-2.1.0/tos/chips/atm128/adc/WireAdcP.nc">
      <component-ref qname="WireAdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Read" scoped="" ref="0x40a0ab68"/></type-interface>
      <instance>
        <interfacedef-ref qname="Read"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x4019ad68"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x40a2a1e0"/>
        <function-ref name="readDone" scoped="" ref="0x40a2a438"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ReadNow" ref="0x40a2ab48" loc="19:/opt/tinyos-2.1.0/tos/chips/atm128/adc/WireAdcP.nc">
      <component-ref qname="WireAdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ReadNow" scoped="" ref="0x40a2ab48"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReadNow"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x4019ad68"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x40a29200"/>
        <function-ref name="readDone" scoped="" ref="0x40a29478"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Atm128AdcConfig" ref="0x40a29b30" loc="22:/opt/tinyos-2.1.0/tos/chips/atm128/adc/WireAdcP.nc">
      <component-ref qname="WireAdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128AdcConfig" scoped="" ref="0x40a29b30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128AdcConfig"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getRefVoltage" scoped="" ref="0x40a29d08"/>
        <function-ref name="getChannel" scoped="" ref="0x40a29de8"/>
        <function-ref name="getPrescaler" scoped="" ref="0x40a29ec8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Resource" ref="0x40a283c0" loc="23:/opt/tinyos-2.1.0/tos/chips/atm128/adc/WireAdcP.nc">
      <component-ref qname="WireAdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Resource" scoped="" ref="0x40a283c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x40a28598"/>
        <function-ref name="immediateRequest" scoped="" ref="0x40a28678"/>
        <function-ref name="request" scoped="" ref="0x40a28758"/>
        <function-ref name="granted" scoped="" ref="0x40a28838"/>
        <function-ref name="isOwner" scoped="" ref="0x40a28918"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x40a226c8" loc="49:/opt/tinyos-2.1.0/tos/chips/atm128/adc/Atm128AdcC.nc">
      <component-ref qname="Atm128AdcC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceConfigure" scoped="" ref="0x40a226c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x40a228a0"/>
        <function-ref name="configure" scoped="" ref="0x40a22980"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Atm128AdcMultiple" ref="0x40a1dec0" loc="47:/opt/tinyos-2.1.0/tos/chips/atm128/adc/Atm128AdcC.nc">
      <component-ref qname="Atm128AdcC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128AdcMultiple" scoped="" ref="0x40a1dec0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128AdcMultiple"/>
      </instance>
      <interface-functions>
        <function-ref name="getData" scoped="" ref="0x40a220c0"/>
        <function-ref name="dataReady" scoped="" ref="0x40a221a0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Atm128AdcSingle" ref="0x40a20d38" loc="46:/opt/tinyos-2.1.0/tos/chips/atm128/adc/Atm128AdcC.nc">
      <component-ref qname="Atm128AdcC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128AdcSingle" scoped="" ref="0x40a20d38"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128AdcSingle"/>
      </instance>
      <interface-functions>
        <function-ref name="getData" scoped="" ref="0x40a20f10"/>
        <function-ref name="cancel" scoped="" ref="0x40a23010"/>
        <function-ref name="dataReady" scoped="" ref="0x40a230f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x40a243c0" loc="45:/opt/tinyos-2.1.0/tos/chips/atm128/adc/Atm128AdcC.nc">
      <component-ref qname="Atm128AdcC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Resource" scoped="" ref="0x40a243c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x40a24598"/>
        <function-ref name="immediateRequest" scoped="" ref="0x40a24678"/>
        <function-ref name="request" scoped="" ref="0x40a24758"/>
        <function-ref name="granted" scoped="" ref="0x40a24838"/>
        <function-ref name="isOwner" scoped="" ref="0x40a24918"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x40a3e388" loc="65:/opt/tinyos-2.1.0/tos/chips/atm128/adc/Atm128AdcP.nc">
      <component-ref qname="Atm128AdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x40a3e388"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x40a3e560"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Atm128AdcMultiple" ref="0x40a3d208" loc="68:/opt/tinyos-2.1.0/tos/chips/atm128/adc/Atm128AdcP.nc">
      <component-ref qname="Atm128AdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128AdcMultiple" scoped="" ref="0x40a3d208"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128AdcMultiple"/>
      </instance>
      <interface-functions>
        <function-ref name="getData" scoped="" ref="0x40a3d3e0"/>
        <function-ref name="dataReady" scoped="" ref="0x40a3d4c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Atm128AdcSingle" ref="0x40a3bc70" loc="67:/opt/tinyos-2.1.0/tos/chips/atm128/adc/Atm128AdcP.nc">
      <component-ref qname="Atm128AdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128AdcSingle" scoped="" ref="0x40a3bc70"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128AdcSingle"/>
      </instance>
      <interface-functions>
        <function-ref name="getData" scoped="" ref="0x40a3be48"/>
        <function-ref name="cancel" scoped="" ref="0x40a3bf28"/>
        <function-ref name="dataReady" scoped="" ref="0x40a3d018"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplAtm128Adc" ref="0x40a33a78" loc="71:/opt/tinyos-2.1.0/tos/chips/atm128/adc/Atm128AdcP.nc">
      <component-ref qname="Atm128AdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplAtm128Adc" scoped="" ref="0x40a33a78"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Adc"/>
      </instance>
      <interface-functions>
        <function-ref name="setSingle" scoped="" ref="0x40a33c50"/>
        <function-ref name="getAdmux" scoped="" ref="0x40a33d30"/>
        <function-ref name="setPrescaler" scoped="" ref="0x40a33e10"/>
        <function-ref name="isEnabled" scoped="" ref="0x40a33ef0"/>
        <function-ref name="enableAdc" scoped="" ref="0x40a3c010"/>
        <function-ref name="setAdmux" scoped="" ref="0x40a3c0f0"/>
        <function-ref name="enableInterruption" scoped="" ref="0x40a3c1d0"/>
        <function-ref name="isComplete" scoped="" ref="0x40a3c2b0"/>
        <function-ref name="cancel" scoped="" ref="0x40a3c390"/>
        <function-ref name="disableAdc" scoped="" ref="0x40a3c470"/>
        <function-ref name="resetInterrupt" scoped="" ref="0x40a3c550"/>
        <function-ref name="disableInterruption" scoped="" ref="0x40a3c630"/>
        <function-ref name="startConversion" scoped="" ref="0x40a3c710"/>
        <function-ref name="isStarted" scoped="" ref="0x40a3c870"/>
        <function-ref name="setAdcsra" scoped="" ref="0x40a3c950"/>
        <function-ref name="setContinuous" scoped="" ref="0x40a3ca30"/>
        <function-ref name="getAdcsra" scoped="" ref="0x40a3cb10"/>
        <function-ref name="getValue" scoped="" ref="0x40a3cbf0"/>
        <function-ref name="dataReady" scoped="" ref="0x40a3ccd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AsyncStdControl" ref="0x40a3b7e0" loc="66:/opt/tinyos-2.1.0/tos/chips/atm128/adc/Atm128AdcP.nc">
      <component-ref qname="Atm128AdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AsyncStdControl" scoped="" ref="0x40a3b7e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AsyncStdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x40a3b9b8"/>
        <function-ref name="stop" scoped="" ref="0x40a3ba98"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Atm128Calibrate" ref="0x40a3cea8" loc="72:/opt/tinyos-2.1.0/tos/chips/atm128/adc/Atm128AdcP.nc">
      <component-ref qname="Atm128AdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128Calibrate" scoped="" ref="0x40a3cea8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128Calibrate"/>
      </instance>
      <interface-functions>
        <function-ref name="baudrateRegister" scoped="" ref="0x40a3a0c0"/>
        <function-ref name="cyclesPerJiffy" scoped="" ref="0x40a3a1a0"/>
        <function-ref name="calibrateMicro" scoped="" ref="0x40a3a280"/>
        <function-ref name="actualMicro" scoped="" ref="0x40a3a360"/>
        <function-ref name="adcPrescaler" scoped="" ref="0x40a3a440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplAtm128Adc" ref="0x40a5d010" loc="36:/opt/tinyos-2.1.0/tos/chips/atm128/adc/HplAtm128AdcC.nc">
      <component-ref qname="HplAtm128AdcC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplAtm128Adc" scoped="" ref="0x40a5d010"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Adc"/>
      </instance>
      <interface-functions>
        <function-ref name="setSingle" scoped="" ref="0x40a5d1e8"/>
        <function-ref name="getAdmux" scoped="" ref="0x40a5d2c8"/>
        <function-ref name="setPrescaler" scoped="" ref="0x40a5d3a8"/>
        <function-ref name="isEnabled" scoped="" ref="0x40a5d488"/>
        <function-ref name="enableAdc" scoped="" ref="0x40a5d568"/>
        <function-ref name="setAdmux" scoped="" ref="0x40a5d648"/>
        <function-ref name="enableInterruption" scoped="" ref="0x40a5d728"/>
        <function-ref name="isComplete" scoped="" ref="0x40a5d808"/>
        <function-ref name="cancel" scoped="" ref="0x40a5d8e8"/>
        <function-ref name="disableAdc" scoped="" ref="0x40a5d9c8"/>
        <function-ref name="resetInterrupt" scoped="" ref="0x40a5daa8"/>
        <function-ref name="disableInterruption" scoped="" ref="0x40a5db88"/>
        <function-ref name="startConversion" scoped="" ref="0x40a5dc68"/>
        <function-ref name="isStarted" scoped="" ref="0x40a5ddc8"/>
        <function-ref name="setAdcsra" scoped="" ref="0x40a5dea8"/>
        <function-ref name="setContinuous" scoped="" ref="0x40a5c010"/>
        <function-ref name="getAdcsra" scoped="" ref="0x40a5c0f0"/>
        <function-ref name="getValue" scoped="" ref="0x40a5c1d0"/>
        <function-ref name="dataReady" scoped="" ref="0x40a5c2b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplAtm128Adc" ref="0x40a5cc68" loc="35:/opt/tinyos-2.1.0/tos/chips/atm128/adc/HplAtm128AdcP.nc">
      <component-ref qname="HplAtm128AdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplAtm128Adc" scoped="" ref="0x40a5cc68"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Adc"/>
      </instance>
      <interface-functions>
        <function-ref name="setSingle" scoped="" ref="0x40a5ce40"/>
        <function-ref name="getAdmux" scoped="" ref="0x40a5cf20"/>
        <function-ref name="setPrescaler" scoped="" ref="0x40a59018"/>
        <function-ref name="isEnabled" scoped="" ref="0x40a590f8"/>
        <function-ref name="enableAdc" scoped="" ref="0x40a591d8"/>
        <function-ref name="setAdmux" scoped="" ref="0x40a592b8"/>
        <function-ref name="enableInterruption" scoped="" ref="0x40a59398"/>
        <function-ref name="isComplete" scoped="" ref="0x40a59478"/>
        <function-ref name="cancel" scoped="" ref="0x40a59558"/>
        <function-ref name="disableAdc" scoped="" ref="0x40a59638"/>
        <function-ref name="resetInterrupt" scoped="" ref="0x40a59718"/>
        <function-ref name="disableInterruption" scoped="" ref="0x40a597f8"/>
        <function-ref name="startConversion" scoped="" ref="0x40a598d8"/>
        <function-ref name="isStarted" scoped="" ref="0x40a59a38"/>
        <function-ref name="setAdcsra" scoped="" ref="0x40a59b18"/>
        <function-ref name="setContinuous" scoped="" ref="0x40a59bf8"/>
        <function-ref name="getAdcsra" scoped="" ref="0x40a59cd8"/>
        <function-ref name="getValue" scoped="" ref="0x40a59db8"/>
        <function-ref name="dataReady" scoped="" ref="0x40a59e98"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="McuPowerState" ref="0x40a580e8" loc="36:/opt/tinyos-2.1.0/tos/chips/atm128/adc/HplAtm128AdcP.nc">
      <component-ref qname="HplAtm128AdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="McuPowerState" scoped="" ref="0x40a580e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerState"/>
      </instance>
      <interface-functions>
        <function-ref name="update" scoped="" ref="0x40a582c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x40a5ad40" loc="82:/opt/tinyos-2.1.0/tos/system/RoundRobinArbiterC.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceRequested" scoped="" ref="0x40a5ad40"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x40a5af28"/>
        <function-ref name="immediateRequested" scoped="" ref="0x40aae018"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x40aaeca0" loc="86:/opt/tinyos-2.1.0/tos/system/RoundRobinArbiterC.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceConfigure" scoped="" ref="0x40aaeca0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x40aaee88"/>
        <function-ref name="configure" scoped="" ref="0x40aad010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceDefaultOwner" ref="0x40aae158" loc="83:/opt/tinyos-2.1.0/tos/system/RoundRobinArbiterC.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x40aae158"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x40aae330"/>
        <function-ref name="requested" scoped="" ref="0x40aae410"/>
        <function-ref name="granted" scoped="" ref="0x40aae4f0"/>
        <function-ref name="isOwner" scoped="" ref="0x40aae5d0"/>
        <function-ref name="immediateRequested" scoped="" ref="0x40aae6b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x40a5a600" loc="81:/opt/tinyos-2.1.0/tos/system/RoundRobinArbiterC.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Resource" scoped="" ref="0x40a5a600"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x40a5a7e8"/>
        <function-ref name="immediateRequest" scoped="" ref="0x40a5a8c8"/>
        <function-ref name="request" scoped="" ref="0x40a5a9a8"/>
        <function-ref name="granted" scoped="" ref="0x40a5aa88"/>
        <function-ref name="isOwner" scoped="" ref="0x40a5ab68"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ArbiterInfo" ref="0x40aae7f0" loc="84:/opt/tinyos-2.1.0/tos/system/RoundRobinArbiterC.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ArbiterInfo" scoped="" ref="0x40aae7f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x40aae9c8"/>
        <function-ref name="userId" scoped="" ref="0x40aaeaa8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x40e920d8" loc="34:/opt/tinyos-2.1.0/tos/system/RoundRobinResourceQueueC.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter.Queue"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x40e920d8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x40e922b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RoundRobinQueue" ref="0x40e92410" loc="35:/opt/tinyos-2.1.0/tos/system/RoundRobinResourceQueueC.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter.Queue"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RoundRobinQueue" scoped="" ref="0x40e92410"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceQueue"/>
      </instance>
      <interface-functions>
        <function-ref name="enqueue" scoped="" ref="0x40e925e8"/>
        <function-ref name="isEmpty" scoped="" ref="0x40e926c8"/>
        <function-ref name="isEnqueued" scoped="" ref="0x40e927a8"/>
        <function-ref name="dequeue" scoped="" ref="0x40e92888"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x40e90cb8" loc="55:/opt/tinyos-2.1.0/tos/system/ArbiterP.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceRequested" scoped="" ref="0x40e90cb8"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x40e90ea0"/>
        <function-ref name="immediateRequested" scoped="" ref="0x40e8f010"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x40e8fca8" loc="60:/opt/tinyos-2.1.0/tos/system/ArbiterP.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceConfigure" scoped="" ref="0x40e8fca8"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x40e8fe90"/>
        <function-ref name="configure" scoped="" ref="0x40ec6010"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Queue" ref="0x40ec6170" loc="61:/opt/tinyos-2.1.0/tos/system/ArbiterP.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Queue" scoped="" ref="0x40ec6170"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceQueue"/>
      </instance>
      <interface-functions>
        <function-ref name="enqueue" scoped="" ref="0x40ec6348"/>
        <function-ref name="isEmpty" scoped="" ref="0x40ec6428"/>
        <function-ref name="isEnqueued" scoped="" ref="0x40ec6508"/>
        <function-ref name="dequeue" scoped="" ref="0x40ec65e8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceDefaultOwner" ref="0x40e8f150" loc="56:/opt/tinyos-2.1.0/tos/system/ArbiterP.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x40e8f150"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x40e8f328"/>
        <function-ref name="requested" scoped="" ref="0x40e8f408"/>
        <function-ref name="granted" scoped="" ref="0x40e8f4e8"/>
        <function-ref name="isOwner" scoped="" ref="0x40e8f5c8"/>
        <function-ref name="immediateRequested" scoped="" ref="0x40e8f6a8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x40ec6728" loc="62:/opt/tinyos-2.1.0/tos/system/ArbiterP.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Leds" scoped="" ref="0x40ec6728"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x40ec6900"/>
        <function-ref name="led0Toggle" scoped="" ref="0x40ec69e0"/>
        <function-ref name="led1On" scoped="" ref="0x40ec6ac0"/>
        <function-ref name="led1Toggle" scoped="" ref="0x40ec6ba0"/>
        <function-ref name="led2Toggle" scoped="" ref="0x40ec6c80"/>
        <function-ref name="get" scoped="" ref="0x40ec6d60"/>
        <function-ref name="led1Off" scoped="" ref="0x40ec6e40"/>
        <function-ref name="led0On" scoped="" ref="0x40ec51d8"/>
        <function-ref name="set" scoped="" ref="0x40ec5018"/>
        <function-ref name="led2On" scoped="" ref="0x40ec6f20"/>
        <function-ref name="led2Off" scoped="" ref="0x40ec50f8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x40e90578" loc="54:/opt/tinyos-2.1.0/tos/system/ArbiterP.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Resource" scoped="" ref="0x40e90578"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x40e90760"/>
        <function-ref name="immediateRequest" scoped="" ref="0x40e90840"/>
        <function-ref name="request" scoped="" ref="0x40e90920"/>
        <function-ref name="granted" scoped="" ref="0x40e90a00"/>
        <function-ref name="isOwner" scoped="" ref="0x40e90ae0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ArbiterInfo" ref="0x40e8f7e8" loc="57:/opt/tinyos-2.1.0/tos/system/ArbiterP.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ArbiterInfo" scoped="" ref="0x40e8f7e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x40e8f9c0"/>
        <function-ref name="userId" scoped="" ref="0x40e8faa0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="grantedTask" ref="0x40ec5358" loc="75:/opt/tinyos-2.1.0/tos/system/ArbiterP.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="grantedTask" scoped="" ref="0x40ec5358"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x40ec5530"/>
        <function-ref name="runTask" scoped="" ref="0x40ec5610"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PowerDownCleanup" ref="0x40ad2de8" loc="62:/opt/tinyos-2.1.0/tos/lib/power/AsyncStdControlPowerManagerC.nc">
      <component-ref qname="Atm128AdcC.PM"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PowerDownCleanup" scoped="" ref="0x40ad2de8"/></type-interface>
      <instance>
        <interfacedef-ref qname="PowerDownCleanup"/>
      </instance>
      <interface-functions>
        <function-ref name="cleanup" scoped="" ref="0x40ad1010"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceDefaultOwner" ref="0x40ad1150" loc="63:/opt/tinyos-2.1.0/tos/lib/power/AsyncStdControlPowerManagerC.nc">
      <component-ref qname="Atm128AdcC.PM"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x40ad1150"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x40ad1328"/>
        <function-ref name="requested" scoped="" ref="0x40ad1408"/>
        <function-ref name="granted" scoped="" ref="0x40ad14e8"/>
        <function-ref name="isOwner" scoped="" ref="0x40ad15c8"/>
        <function-ref name="immediateRequested" scoped="" ref="0x40ad16a8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AsyncStdControl" ref="0x40ad29f0" loc="60:/opt/tinyos-2.1.0/tos/lib/power/AsyncStdControlPowerManagerC.nc">
      <component-ref qname="Atm128AdcC.PM"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AsyncStdControl" scoped="" ref="0x40ad29f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AsyncStdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x40ad2bc8"/>
        <function-ref name="stop" scoped="" ref="0x40ad2ca8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ArbiterInfo" ref="0x40ad17e8" loc="64:/opt/tinyos-2.1.0/tos/lib/power/AsyncStdControlPowerManagerC.nc">
      <component-ref qname="Atm128AdcC.PM"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ArbiterInfo" scoped="" ref="0x40ad17e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x40ad19c0"/>
        <function-ref name="userId" scoped="" ref="0x40ad1aa0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PowerDownCleanup" ref="0x40ee1bb8" loc="52:/opt/tinyos-2.1.0/tos/lib/power/AsyncPowerManagerP.nc">
      <component-ref qname="Atm128AdcC.PM.PowerManager"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PowerDownCleanup" scoped="" ref="0x40ee1bb8"/></type-interface>
      <instance>
        <interfacedef-ref qname="PowerDownCleanup"/>
      </instance>
      <interface-functions>
        <function-ref name="cleanup" scoped="" ref="0x40ee1d90"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceDefaultOwner" ref="0x40ee1ed0" loc="53:/opt/tinyos-2.1.0/tos/lib/power/AsyncPowerManagerP.nc">
      <component-ref qname="Atm128AdcC.PM.PowerManager"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x40ee1ed0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x40ee00c0"/>
        <function-ref name="requested" scoped="" ref="0x40ee01a0"/>
        <function-ref name="granted" scoped="" ref="0x40ee0280"/>
        <function-ref name="isOwner" scoped="" ref="0x40ee0360"/>
        <function-ref name="immediateRequested" scoped="" ref="0x40ee0440"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AsyncStdControl" ref="0x40ee17c0" loc="50:/opt/tinyos-2.1.0/tos/lib/power/AsyncPowerManagerP.nc">
      <component-ref qname="Atm128AdcC.PM.PowerManager"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AsyncStdControl" scoped="" ref="0x40ee17c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AsyncStdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x40ee1998"/>
        <function-ref name="stop" scoped="" ref="0x40ee1a78"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ArbiterInfo" ref="0x40ee0580" loc="54:/opt/tinyos-2.1.0/tos/lib/power/AsyncPowerManagerP.nc">
      <component-ref qname="Atm128AdcC.PM.PowerManager"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ArbiterInfo" scoped="" ref="0x40ee0580"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x40ee0758"/>
        <function-ref name="userId" scoped="" ref="0x40ee0838"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Read" ref="0x40ae41b8" loc="48:/opt/tinyos-2.1.0/tos/chips/atm128/adc/AdcP.nc">
      <component-ref qname="AdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Read" scoped="" ref="0x40ae41b8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Read"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x4019ad68"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x40ae47e0"/>
        <function-ref name="readDone" scoped="" ref="0x40ae4a38"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ReadNow" ref="0x40ae3178" loc="49:/opt/tinyos-2.1.0/tos/chips/atm128/adc/AdcP.nc">
      <component-ref qname="AdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ReadNow" scoped="" ref="0x40ae3178"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReadNow"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x4019ad68"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x40ae37c0"/>
        <function-ref name="readDone" scoped="" ref="0x40ae3a38"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Atm128AdcConfig" ref="0x40ae26b0" loc="53:/opt/tinyos-2.1.0/tos/chips/atm128/adc/AdcP.nc">
      <component-ref qname="AdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128AdcConfig" scoped="" ref="0x40ae26b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128AdcConfig"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getRefVoltage" scoped="" ref="0x40ae2888"/>
        <function-ref name="getChannel" scoped="" ref="0x40ae2968"/>
        <function-ref name="getPrescaler" scoped="" ref="0x40ae2a48"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Atm128AdcSingle" ref="0x40ae3de8" loc="52:/opt/tinyos-2.1.0/tos/chips/atm128/adc/AdcP.nc">
      <component-ref qname="AdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128AdcSingle" scoped="" ref="0x40ae3de8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128AdcSingle"/>
      </instance>
      <interface-functions>
        <function-ref name="getData" scoped="" ref="0x40ae2010"/>
        <function-ref name="cancel" scoped="" ref="0x40ae20f0"/>
        <function-ref name="dataReady" scoped="" ref="0x40ae21d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="acquiredData" ref="0x40ad9e90" loc="103:/opt/tinyos-2.1.0/tos/chips/atm128/adc/AdcP.nc">
      <component-ref qname="AdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="acquiredData" scoped="" ref="0x40ad9e90"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x40ad8080"/>
        <function-ref name="runTask" scoped="" ref="0x40ad8160"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Read" ref="0x40ae5560" loc="24:/opt/tinyos-2.1.0/tos/system/ArbitratedReadC.nc">
      <component-ref qname="WireAdcP.ArbitrateRead"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Read" scoped="" ref="0x40ae5560"/></type-interface>
      <instance>
        <interfacedef-ref qname="Read"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x4019ad68"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x40ae5b98"/>
        <function-ref name="readDone" scoped="" ref="0x40ae5e00"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Service" ref="0x40af3280" loc="26:/opt/tinyos-2.1.0/tos/system/ArbitratedReadC.nc">
      <component-ref qname="WireAdcP.ArbitrateRead"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Service" scoped="" ref="0x40af3280"/></type-interface>
      <instance>
        <interfacedef-ref qname="Read"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x4019ad68"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x40af38b8"/>
        <function-ref name="readDone" scoped="" ref="0x40af3b20"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Resource" ref="0x40af3ea0" loc="27:/opt/tinyos-2.1.0/tos/system/ArbitratedReadC.nc">
      <component-ref qname="WireAdcP.ArbitrateRead"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Resource" scoped="" ref="0x40af3ea0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x40b0a0c0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x40b0a1a0"/>
        <function-ref name="request" scoped="" ref="0x40b0a280"/>
        <function-ref name="granted" scoped="" ref="0x40b0a360"/>
        <function-ref name="isOwner" scoped="" ref="0x40b0a440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Random" ref="0x40b03750" loc="35:/opt/tinyos-2.1.0/tos/system/RandomC.nc">
      <component-ref qname="RandomC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Random" scoped="" ref="0x40b03750"/></type-interface>
      <instance>
        <interfacedef-ref qname="Random"/>
      </instance>
      <interface-functions>
        <function-ref name="rand16" scoped="" ref="0x40b03928"/>
        <function-ref name="rand32" scoped="" ref="0x40b03a08"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SeedInit" ref="0x409b4e78" loc="34:/opt/tinyos-2.1.0/tos/system/RandomC.nc">
      <component-ref qname="RandomC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SeedInit" scoped="" ref="0x409b4e78"/></type-interface>
      <instance>
        <interfacedef-ref qname="ParameterInit"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x4019ad68"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x40b034b8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x409b4958" loc="33:/opt/tinyos-2.1.0/tos/system/RandomC.nc">
      <component-ref qname="RandomC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x409b4958"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x409b4b30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Random" ref="0x40aff1d0" loc="37:/opt/tinyos-2.1.0/tos/system/RandomMlcgC.nc">
      <component-ref qname="RandomMlcgC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Random" scoped="" ref="0x40aff1d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Random"/>
      </instance>
      <interface-functions>
        <function-ref name="rand16" scoped="" ref="0x40aff3a8"/>
        <function-ref name="rand32" scoped="" ref="0x40aff488"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SeedInit" ref="0x40b008f8" loc="36:/opt/tinyos-2.1.0/tos/system/RandomMlcgC.nc">
      <component-ref qname="RandomMlcgC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SeedInit" scoped="" ref="0x40b008f8"/></type-interface>
      <instance>
        <interfacedef-ref qname="ParameterInit"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x4019ad68"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x40b00f20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x40b003d8" loc="35:/opt/tinyos-2.1.0/tos/system/RandomMlcgC.nc">
      <component-ref qname="RandomMlcgC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x40b003d8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x40b005b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x409cab60" loc="37:/opt/tinyos-2.1.0/tos/system/TimerMilliC.nc">
      <component-ref qname="CC1000CsmaRadioC.TimerMilliC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x409cab60"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x403189d0"/>
            <typename><typedef-ref name="TMilli" ref="0x40318b98"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x40bed6a8"/>
        <function-ref name="fired" scoped="" ref="0x40b04938"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x40bed068"/>
        <function-ref name="isOneShot" scoped="" ref="0x40b04de8"/>
        <function-ref name="getdt" scoped="" ref="0x40bedb58"/>
        <function-ref name="gett0" scoped="" ref="0x40bed900"/>
        <function-ref name="isRunning" scoped="" ref="0x40b04b90"/>
        <function-ref name="startPeriodic" scoped="" ref="0x40b041e0"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x40bed388"/>
        <function-ref name="startOneShot" scoped="" ref="0x40b04460"/>
        <function-ref name="stop" scoped="" ref="0x40b046e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerMilli" ref="0x40b19010" loc="38:/opt/tinyos-2.1.0/tos/system/TimerMilliP.nc">
      <component-ref qname="TimerMilliP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerMilli" scoped="" ref="0x40b19010"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x403189d0"/>
            <typename><typedef-ref name="TMilli" ref="0x40318b98"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x40b18b00"/>
        <function-ref name="fired" scoped="" ref="0x40b19d90"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x40b184c0"/>
        <function-ref name="isOneShot" scoped="" ref="0x40b18268"/>
        <function-ref name="getdt" scoped="" ref="0x40b17010"/>
        <function-ref name="gett0" scoped="" ref="0x40b18d58"/>
        <function-ref name="isRunning" scoped="" ref="0x40b18010"/>
        <function-ref name="startPeriodic" scoped="" ref="0x40b19638"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x40b187e0"/>
        <function-ref name="startOneShot" scoped="" ref="0x40b198b8"/>
        <function-ref name="stop" scoped="" ref="0x40b19b38"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerMilli" ref="0x40b13100" loc="35:/opt/tinyos-2.1.0/tos/platforms/mica/HilTimerMilliC.nc">
      <component-ref qname="HilTimerMilliC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerMilli" scoped="" ref="0x40b13100"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x403189d0"/>
            <typename><typedef-ref name="TMilli" ref="0x40318b98"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x40b12be0"/>
        <function-ref name="fired" scoped="" ref="0x40b13e80"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x40b125a0"/>
        <function-ref name="isOneShot" scoped="" ref="0x40b12348"/>
        <function-ref name="getdt" scoped="" ref="0x40b110b8"/>
        <function-ref name="gett0" scoped="" ref="0x40b12e38"/>
        <function-ref name="isRunning" scoped="" ref="0x40b120f0"/>
        <function-ref name="startPeriodic" scoped="" ref="0x40b13728"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x40b128c0"/>
        <function-ref name="startOneShot" scoped="" ref="0x40b139a8"/>
        <function-ref name="stop" scoped="" ref="0x40b13c28"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LocalTime" ref="0x40b100d0" loc="36:/opt/tinyos-2.1.0/tos/platforms/mica/HilTimerMilliC.nc">
      <component-ref qname="HilTimerMilliC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LocalTime" scoped="" ref="0x40b100d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x403189d0"/>
            <typename><typedef-ref name="TMilli" ref="0x40318b98"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x40b10718"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x40b17890" loc="34:/opt/tinyos-2.1.0/tos/platforms/mica/HilTimerMilliC.nc">
      <component-ref qname="HilTimerMilliC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x40b17890"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x40b17a68"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CounterMilli32" ref="0x40b2ede8" loc="29:/opt/tinyos-2.1.0/tos/platforms/mica/AlarmCounterMilliP.nc">
      <component-ref qname="AlarmCounterMilliP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CounterMilli32" scoped="" ref="0x40b2ede8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x403189d0"/>
            <typename><typedef-ref name="TMilli" ref="0x40318b98"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x4019b400"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x40b2d570"/>
        <function-ref name="clearOverflow" scoped="" ref="0x40b2da60"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x40b2d7e8"/>
        <function-ref name="overflow" scoped="" ref="0x40b2dcd8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x40b0f7d8" loc="27:/opt/tinyos-2.1.0/tos/platforms/mica/AlarmCounterMilliP.nc">
      <component-ref qname="AlarmCounterMilliP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x40b0f7d8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x40b0f9b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AlarmMilli32" ref="0x40b331c8" loc="28:/opt/tinyos-2.1.0/tos/platforms/mica/AlarmCounterMilliP.nc">
      <component-ref qname="AlarmCounterMilliP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AlarmMilli32" scoped="" ref="0x40b331c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x403189d0"/>
            <typename><typedef-ref name="TMilli" ref="0x40318b98"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x4019b400"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x40b2e690"/>
        <function-ref name="fired" scoped="" ref="0x40b33e30"/>
        <function-ref name="startAt" scoped="" ref="0x40b2e350"/>
        <function-ref name="isRunning" scoped="" ref="0x40b2e0d8"/>
        <function-ref name="getAlarm" scoped="" ref="0x40b2e908"/>
        <function-ref name="start" scoped="" ref="0x40b33918"/>
        <function-ref name="stop" scoped="" ref="0x40b33bb8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x40b9a010" loc="26:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128AlarmAsyncC.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmAsyncC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Alarm" scoped="" ref="0x40b9a010"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x403189d0"/>
            <typename><typedef-ref name="TMilli" ref="0x40318b98"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x4019b400"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x40b994e0"/>
        <function-ref name="fired" scoped="" ref="0x40b9ac78"/>
        <function-ref name="startAt" scoped="" ref="0x40b991a0"/>
        <function-ref name="isRunning" scoped="" ref="0x40b9aef0"/>
        <function-ref name="getAlarm" scoped="" ref="0x40b99758"/>
        <function-ref name="start" scoped="" ref="0x40b9a760"/>
        <function-ref name="stop" scoped="" ref="0x40b9aa00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x40b2ab18" loc="25:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128AlarmAsyncC.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmAsyncC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x40b2ab18"/></type-interface>
      <attribute-value>
        <attribute-ref name="atleastonce" ref="0x402c8ae0"/>
        <value-structured>
          <type-tag size="I:0" alignment="I:1"><attribute-ref name="atleastonce" ref="0x402c8ae0"/></type-tag>
        </value-structured>
      </attribute-value>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x40b2acf0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x40b99a88" loc="27:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128AlarmAsyncC.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmAsyncC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x40b99a88"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x403189d0"/>
            <typename><typedef-ref name="TMilli" ref="0x40318b98"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x4019b400"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x40bc1200"/>
        <function-ref name="clearOverflow" scoped="" ref="0x40bc16f0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x40bc1478"/>
        <function-ref name="overflow" scoped="" ref="0x40bc1968"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TimerCtrl" ref="0x40ecc010" loc="31:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128AlarmAsyncP.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmAsyncC.Atm128AlarmAsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerCtrl" scoped="" ref="0x40ecc010"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
      </instance>
      <interface-functions>
        <function-ref name="getControl" scoped="" ref="0x40ecc1e8"/>
        <function-ref name="getInterruptFlag" scoped="" ref="0x40ecc2c8"/>
        <function-ref name="getInterruptMask" scoped="" ref="0x40ecc3a8"/>
        <function-ref name="setInterruptMask" scoped="" ref="0x40ecc488"/>
        <function-ref name="setInterruptFlag" scoped="" ref="0x40ecc568"/>
        <function-ref name="setControl" scoped="" ref="0x40ecc648"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x40ed2190" loc="26:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128AlarmAsyncP.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmAsyncC.Atm128AlarmAsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Alarm" scoped="" ref="0x40ed2190"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x403189d0"/>
            <typename><typedef-ref name="TMilli" ref="0x40318b98"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x4019b400"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x40ed1640"/>
        <function-ref name="fired" scoped="" ref="0x40ed2df8"/>
        <function-ref name="startAt" scoped="" ref="0x40ed1300"/>
        <function-ref name="isRunning" scoped="" ref="0x40ed1088"/>
        <function-ref name="getAlarm" scoped="" ref="0x40ed18b8"/>
        <function-ref name="start" scoped="" ref="0x40ed28e0"/>
        <function-ref name="stop" scoped="" ref="0x40ed2b80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x40ed4d28" loc="25:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128AlarmAsyncP.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmAsyncC.Atm128AlarmAsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x40ed4d28"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x40ed4f00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x40ed1be8" loc="27:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128AlarmAsyncP.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmAsyncC.Atm128AlarmAsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x40ed1be8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x403189d0"/>
            <typename><typedef-ref name="TMilli" ref="0x40318b98"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x4019b400"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x40ed0380"/>
        <function-ref name="clearOverflow" scoped="" ref="0x40ed0870"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x40ed05f8"/>
        <function-ref name="overflow" scoped="" ref="0x40ed0ae8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TimerAsync" ref="0x40ec9278" loc="33:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128AlarmAsyncP.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmAsyncC.Atm128AlarmAsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerAsync" scoped="" ref="0x40ec9278"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128TimerAsync"/>
      </instance>
      <interface-functions>
        <function-ref name="controlBusy" scoped="" ref="0x40ec9450"/>
        <function-ref name="compareBusy" scoped="" ref="0x40ec9530"/>
        <function-ref name="setTimer0Asynchronous" scoped="" ref="0x40ec9610"/>
        <function-ref name="countBusy" scoped="" ref="0x40ec96f0"/>
        <function-ref name="getAssr" scoped="" ref="0x40ec97d0"/>
        <function-ref name="setAssr" scoped="" ref="0x40ec98b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Compare" ref="0x40ecc838" loc="32:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128AlarmAsyncP.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmAsyncC.Atm128AlarmAsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Compare" scoped="" ref="0x40ecc838"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="test" scoped="" ref="0x40ecbd90"/>
        <function-ref name="fired" scoped="" ref="0x40ecb3b0"/>
        <function-ref name="get" scoped="" ref="0x40ecce80"/>
        <function-ref name="reset" scoped="" ref="0x40ecb628"/>
        <function-ref name="isOn" scoped="" ref="0x40ec9048"/>
        <function-ref name="set" scoped="" ref="0x40ecb110"/>
        <function-ref name="start" scoped="" ref="0x40ecb8a0"/>
        <function-ref name="stop" scoped="" ref="0x40ecbb18"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x40ed0dd8" loc="30:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128AlarmAsyncP.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmAsyncC.Atm128AlarmAsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x40ed0dd8"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="off" scoped="" ref="0x40ecd878"/>
        <function-ref name="test" scoped="" ref="0x40ecd388"/>
        <function-ref name="get" scoped="" ref="0x40ece468"/>
        <function-ref name="setScale" scoped="" ref="0x40ecdaf0"/>
        <function-ref name="getScale" scoped="" ref="0x40ecdd90"/>
        <function-ref name="reset" scoped="" ref="0x40ecebf8"/>
        <function-ref name="overflow" scoped="" ref="0x40ece980"/>
        <function-ref name="isOn" scoped="" ref="0x40ecd600"/>
        <function-ref name="set" scoped="" ref="0x40ece6e0"/>
        <function-ref name="start" scoped="" ref="0x40ecee70"/>
        <function-ref name="stop" scoped="" ref="0x40ecd110"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerCtrl" ref="0x40b61c80" loc="48:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Timer0AsyncC.nc">
      <component-ref qname="HplAtm128Timer0AsyncC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerCtrl" scoped="" ref="0x40b61c80"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
      </instance>
      <interface-functions>
        <function-ref name="getControl" scoped="" ref="0x40b61e58"/>
        <function-ref name="getInterruptFlag" scoped="" ref="0x40b60010"/>
        <function-ref name="getInterruptMask" scoped="" ref="0x40b600f0"/>
        <function-ref name="setInterruptMask" scoped="" ref="0x40b601d0"/>
        <function-ref name="setInterruptFlag" scoped="" ref="0x40b602b0"/>
        <function-ref name="setControl" scoped="" ref="0x40b60390"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerAsync" ref="0x40b5d280" loc="50:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Timer0AsyncC.nc">
      <component-ref qname="HplAtm128Timer0AsyncC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerAsync" scoped="" ref="0x40b5d280"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128TimerAsync"/>
      </instance>
      <interface-functions>
        <function-ref name="controlBusy" scoped="" ref="0x40b5d458"/>
        <function-ref name="compareBusy" scoped="" ref="0x40b5d538"/>
        <function-ref name="setTimer0Asynchronous" scoped="" ref="0x40b5d618"/>
        <function-ref name="countBusy" scoped="" ref="0x40b5d6f8"/>
        <function-ref name="getAssr" scoped="" ref="0x40b5d7d8"/>
        <function-ref name="setAssr" scoped="" ref="0x40b5d8b8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x40b606b8" loc="49:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Timer0AsyncC.nc">
      <component-ref qname="HplAtm128Timer0AsyncC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Compare" scoped="" ref="0x40b606b8"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="test" scoped="" ref="0x40b5ec90"/>
        <function-ref name="fired" scoped="" ref="0x40b5e2b0"/>
        <function-ref name="get" scoped="" ref="0x40b60d00"/>
        <function-ref name="reset" scoped="" ref="0x40b5e528"/>
        <function-ref name="isOn" scoped="" ref="0x40b5ef08"/>
        <function-ref name="set" scoped="" ref="0x40b5e010"/>
        <function-ref name="start" scoped="" ref="0x40b5e7a0"/>
        <function-ref name="stop" scoped="" ref="0x40b5ea18"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x40b65910" loc="47:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Timer0AsyncC.nc">
      <component-ref qname="HplAtm128Timer0AsyncC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x40b65910"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="off" scoped="" ref="0x40b61418"/>
        <function-ref name="test" scoped="" ref="0x40b62f08"/>
        <function-ref name="get" scoped="" ref="0x40b62010"/>
        <function-ref name="setScale" scoped="" ref="0x40b61690"/>
        <function-ref name="getScale" scoped="" ref="0x40b61930"/>
        <function-ref name="reset" scoped="" ref="0x40b627a0"/>
        <function-ref name="overflow" scoped="" ref="0x40b62528"/>
        <function-ref name="isOn" scoped="" ref="0x40b611a0"/>
        <function-ref name="set" scoped="" ref="0x40b62288"/>
        <function-ref name="start" scoped="" ref="0x40b62a18"/>
        <function-ref name="stop" scoped="" ref="0x40b62c90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerCtrl" ref="0x40b7f878" loc="41:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Timer0AsyncP.nc">
      <component-ref qname="HplAtm128Timer0AsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerCtrl" scoped="" ref="0x40b7f878"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
      </instance>
      <interface-functions>
        <function-ref name="getControl" scoped="" ref="0x40b7fa50"/>
        <function-ref name="getInterruptFlag" scoped="" ref="0x40b7fb30"/>
        <function-ref name="getInterruptMask" scoped="" ref="0x40b7fc10"/>
        <function-ref name="setInterruptMask" scoped="" ref="0x40b7fcf0"/>
        <function-ref name="setInterruptFlag" scoped="" ref="0x40b7fdd0"/>
        <function-ref name="setControl" scoped="" ref="0x40b7feb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="McuPowerOverride" ref="0x40b7dce0" loc="43:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Timer0AsyncP.nc">
      <component-ref qname="HplAtm128Timer0AsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="McuPowerOverride" scoped="" ref="0x40b7dce0"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerOverride"/>
      </instance>
      <interface-functions>
        <function-ref name="lowestState" scoped="" ref="0x40b7deb8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerAsync" ref="0x40b7c1a8" loc="44:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Timer0AsyncP.nc">
      <component-ref qname="HplAtm128Timer0AsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerAsync" scoped="" ref="0x40b7c1a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128TimerAsync"/>
      </instance>
      <interface-functions>
        <function-ref name="controlBusy" scoped="" ref="0x40b7c380"/>
        <function-ref name="compareBusy" scoped="" ref="0x40b7c460"/>
        <function-ref name="setTimer0Asynchronous" scoped="" ref="0x40b7c540"/>
        <function-ref name="countBusy" scoped="" ref="0x40b7c620"/>
        <function-ref name="getAssr" scoped="" ref="0x40b7c700"/>
        <function-ref name="setAssr" scoped="" ref="0x40b7c7e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x40b7e248" loc="42:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Timer0AsyncP.nc">
      <component-ref qname="HplAtm128Timer0AsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Compare" scoped="" ref="0x40b7e248"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="test" scoped="" ref="0x40b7d7b0"/>
        <function-ref name="fired" scoped="" ref="0x40b7eda8"/>
        <function-ref name="get" scoped="" ref="0x40b7e890"/>
        <function-ref name="reset" scoped="" ref="0x40b7d048"/>
        <function-ref name="isOn" scoped="" ref="0x40b7da28"/>
        <function-ref name="set" scoped="" ref="0x40b7eb08"/>
        <function-ref name="start" scoped="" ref="0x40b7d2c0"/>
        <function-ref name="stop" scoped="" ref="0x40b7d538"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x40b825b0" loc="40:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Timer0AsyncP.nc">
      <component-ref qname="HplAtm128Timer0AsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x40b825b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="off" scoped="" ref="0x40b7f010"/>
        <function-ref name="test" scoped="" ref="0x40b81b10"/>
        <function-ref name="get" scoped="" ref="0x40b82bf8"/>
        <function-ref name="setScale" scoped="" ref="0x40b7f288"/>
        <function-ref name="getScale" scoped="" ref="0x40b7f528"/>
        <function-ref name="reset" scoped="" ref="0x40b813a8"/>
        <function-ref name="overflow" scoped="" ref="0x40b81130"/>
        <function-ref name="isOn" scoped="" ref="0x40b81d88"/>
        <function-ref name="set" scoped="" ref="0x40b82e70"/>
        <function-ref name="start" scoped="" ref="0x40b81620"/>
        <function-ref name="stop" scoped="" ref="0x40b81898"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="fired" ref="0x40bd1bd0" loc="63:/opt/tinyos-2.1.0/tos/lib/timer/AlarmToTimerC.nc">
      <component-ref qname="HilTimerMilliC.AlarmToTimerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="fired" scoped="" ref="0x40bd1bd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x40bd1da8"/>
        <function-ref name="runTask" scoped="" ref="0x40bd1e88"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Alarm" ref="0x40bd2248" loc="38:/opt/tinyos-2.1.0/tos/lib/timer/AlarmToTimerC.nc">
      <component-ref qname="HilTimerMilliC.AlarmToTimerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Alarm" scoped="" ref="0x40bd2248"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x403189d0"/>
            <typename><typedef-ref name="TMilli" ref="0x40318b98"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x4019b400"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x40bd1708"/>
        <function-ref name="fired" scoped="" ref="0x40bd2eb0"/>
        <function-ref name="startAt" scoped="" ref="0x40bd13c8"/>
        <function-ref name="isRunning" scoped="" ref="0x40bd1150"/>
        <function-ref name="getAlarm" scoped="" ref="0x40bd1980"/>
        <function-ref name="start" scoped="" ref="0x40bd2998"/>
        <function-ref name="stop" scoped="" ref="0x40bd2c38"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x40b0cf08" loc="37:/opt/tinyos-2.1.0/tos/lib/timer/AlarmToTimerC.nc">
      <component-ref qname="HilTimerMilliC.AlarmToTimerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x40b0cf08"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x403189d0"/>
            <typename><typedef-ref name="TMilli" ref="0x40318b98"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x40bd4a18"/>
        <function-ref name="fired" scoped="" ref="0x40bbfcb0"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x40bd43d8"/>
        <function-ref name="isOneShot" scoped="" ref="0x40bd4180"/>
        <function-ref name="getdt" scoped="" ref="0x40bd4ec8"/>
        <function-ref name="gett0" scoped="" ref="0x40bd4c70"/>
        <function-ref name="isRunning" scoped="" ref="0x40bbff08"/>
        <function-ref name="startPeriodic" scoped="" ref="0x40bbf558"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x40bd46f8"/>
        <function-ref name="startOneShot" scoped="" ref="0x40bbf7d8"/>
        <function-ref name="stop" scoped="" ref="0x40bbfa58"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="updateFromTimer" ref="0x40bf84b8" loc="60:/opt/tinyos-2.1.0/tos/lib/timer/VirtualizeTimerC.nc">
      <component-ref qname="HilTimerMilliC.VirtualizeTimerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="updateFromTimer" scoped="" ref="0x40bf84b8"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x40bf8690"/>
        <function-ref name="runTask" scoped="" ref="0x40bf8770"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TimerFrom" ref="0x40bfa220" loc="38:/opt/tinyos-2.1.0/tos/lib/timer/VirtualizeTimerC.nc">
      <component-ref qname="HilTimerMilliC.VirtualizeTimerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerFrom" scoped="" ref="0x40bfa220"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x403189d0"/>
            <typename><typedef-ref name="TMilli" ref="0x40318b98"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x40bf9d58"/>
        <function-ref name="fired" scoped="" ref="0x40bf9010"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x40bf9718"/>
        <function-ref name="isOneShot" scoped="" ref="0x40bf94c0"/>
        <function-ref name="getdt" scoped="" ref="0x40bf8268"/>
        <function-ref name="gett0" scoped="" ref="0x40bf8010"/>
        <function-ref name="isRunning" scoped="" ref="0x40bf9268"/>
        <function-ref name="startPeriodic" scoped="" ref="0x40bfa848"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x40bf9a38"/>
        <function-ref name="startOneShot" scoped="" ref="0x40bfaac8"/>
        <function-ref name="stop" scoped="" ref="0x40bfad48"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x40bceea8" loc="37:/opt/tinyos-2.1.0/tos/lib/timer/VirtualizeTimerC.nc">
      <component-ref qname="HilTimerMilliC.VirtualizeTimerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x40bceea8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x403189d0"/>
            <typename><typedef-ref name="TMilli" ref="0x40318b98"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x40bfca48"/>
        <function-ref name="fired" scoped="" ref="0x40bfdc88"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x40bfc3e8"/>
        <function-ref name="isOneShot" scoped="" ref="0x40bfc180"/>
        <function-ref name="getdt" scoped="" ref="0x40bfcf18"/>
        <function-ref name="gett0" scoped="" ref="0x40bfccb0"/>
        <function-ref name="isRunning" scoped="" ref="0x40bfdef0"/>
        <function-ref name="startPeriodic" scoped="" ref="0x40bfd500"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x40bfc718"/>
        <function-ref name="startOneShot" scoped="" ref="0x40bfd790"/>
        <function-ref name="stop" scoped="" ref="0x40bfda20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LocalTime" ref="0x40bf5940" loc="37:/opt/tinyos-2.1.0/tos/lib/timer/CounterToLocalTimeC.nc">
      <component-ref qname="HilTimerMilliC.CounterToLocalTimeC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LocalTime" scoped="" ref="0x40bf5940"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x403189d0"/>
            <typename><typedef-ref name="TMilli" ref="0x40318b98"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x40bf4010"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Counter" ref="0x40bf4360" loc="38:/opt/tinyos-2.1.0/tos/lib/timer/CounterToLocalTimeC.nc">
      <component-ref qname="HilTimerMilliC.CounterToLocalTimeC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x40bf4360"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x403189d0"/>
            <typename><typedef-ref name="TMilli" ref="0x40318b98"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x4019b400"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x40bf4ab0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x40bef010"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x40bf4d28"/>
        <function-ref name="overflow" scoped="" ref="0x40bef288"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ActiveMessageAddress" ref="0x40beca78" loc="43:/opt/tinyos-2.1.0/tos/system/ActiveMessageAddressC.nc">
      <component-ref qname="ActiveMessageAddressC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ActiveMessageAddress" scoped="" ref="0x40beca78"/></type-interface>
      <instance>
        <interfacedef-ref qname="ActiveMessageAddress"/>
      </instance>
      <interface-functions>
        <function-ref name="amAddress" scoped="" ref="0x40becc50"/>
        <function-ref name="changed" scoped="" ref="0x40becd30"/>
        <function-ref name="amGroup" scoped="" ref="0x40bece10"/>
        <function-ref name="setAddress" scoped="" ref="0x40becef0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="BusyWait" ref="0x40c0a5a0" loc="40:/opt/tinyos-2.1.0/tos/platforms/mica/BusyWaitMicroC.nc">
      <component-ref qname="BusyWaitMicroC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="BusyWait" scoped="" ref="0x40c0a5a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="BusyWait"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x40317288"/>
            <typename><typedef-ref name="TMicro" ref="0x40317450"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x4019ad68"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="wait" scoped="" ref="0x40c0acf0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x40c26188" loc="37:/opt/tinyos-2.1.0/tos/system/TimerMilliC.nc">
      <component-ref qname="proj1AppC.LclTime"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x40c26188"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x403189d0"/>
            <typename><typedef-ref name="TMilli" ref="0x40318b98"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x40c24c70"/>
        <function-ref name="fired" scoped="" ref="0x40c26f08"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x40c24630"/>
        <function-ref name="isOneShot" scoped="" ref="0x40c243d8"/>
        <function-ref name="getdt" scoped="" ref="0x40c23150"/>
        <function-ref name="gett0" scoped="" ref="0x40c24ec8"/>
        <function-ref name="isRunning" scoped="" ref="0x40c24180"/>
        <function-ref name="startPeriodic" scoped="" ref="0x40c267b0"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x40c24950"/>
        <function-ref name="startOneShot" scoped="" ref="0x40c26a30"/>
        <function-ref name="stop" scoped="" ref="0x40c26cb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x40c22010" loc="37:/opt/tinyos-2.1.0/tos/system/TimerMilliC.nc">
      <component-ref qname="proj1AppC.PeriodTimer"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x40c22010"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x403189d0"/>
            <typename><typedef-ref name="TMilli" ref="0x40318b98"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x40c21b00"/>
        <function-ref name="fired" scoped="" ref="0x40c22d90"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x40c214c0"/>
        <function-ref name="isOneShot" scoped="" ref="0x40c21268"/>
        <function-ref name="getdt" scoped="" ref="0x40c1f010"/>
        <function-ref name="gett0" scoped="" ref="0x40c21d58"/>
        <function-ref name="isRunning" scoped="" ref="0x40c21010"/>
        <function-ref name="startPeriodic" scoped="" ref="0x40c22638"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x40c217e0"/>
        <function-ref name="startOneShot" scoped="" ref="0x40c228b8"/>
        <function-ref name="stop" scoped="" ref="0x40c22b38"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x40c1fdc8" loc="37:/opt/tinyos-2.1.0/tos/system/TimerMilliC.nc">
      <component-ref qname="proj1AppC.QTimer"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x40c1fdc8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x403189d0"/>
            <typename><typedef-ref name="TMilli" ref="0x40318b98"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x40c1d8e0"/>
        <function-ref name="fired" scoped="" ref="0x40c1eb60"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x40c1d2a0"/>
        <function-ref name="isOneShot" scoped="" ref="0x40c1d048"/>
        <function-ref name="getdt" scoped="" ref="0x40c1dd90"/>
        <function-ref name="gett0" scoped="" ref="0x40c1db38"/>
        <function-ref name="isRunning" scoped="" ref="0x40c1edb8"/>
        <function-ref name="startPeriodic" scoped="" ref="0x40c1e408"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x40c1d5c0"/>
        <function-ref name="startOneShot" scoped="" ref="0x40c1e688"/>
        <function-ref name="stop" scoped="" ref="0x40c1e908"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x40c1cbe8" loc="37:/opt/tinyos-2.1.0/tos/system/TimerMilliC.nc">
      <component-ref qname="proj1AppC.PktTimer"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x40c1cbe8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x403189d0"/>
            <typename><typedef-ref name="TMilli" ref="0x40318b98"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x40c19730"/>
        <function-ref name="fired" scoped="" ref="0x40c1b9b0"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x40c190f0"/>
        <function-ref name="isOneShot" scoped="" ref="0x40c1be60"/>
        <function-ref name="getdt" scoped="" ref="0x40c19be0"/>
        <function-ref name="gett0" scoped="" ref="0x40c19988"/>
        <function-ref name="isRunning" scoped="" ref="0x40c1bc08"/>
        <function-ref name="startPeriodic" scoped="" ref="0x40c1b258"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x40c19410"/>
        <function-ref name="startOneShot" scoped="" ref="0x40c1b4d8"/>
        <function-ref name="stop" scoped="" ref="0x40c1b758"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Read" ref="0x40c3ed38" loc="18:/opt/tinyos-2.1.0/tos/platforms/mica2/DemoSensorC.nc">
      <component-ref qname="proj1AppC.Sensor"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Read" scoped="" ref="0x40c3ed38"/></type-interface>
      <instance>
        <interfacedef-ref qname="Read"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x4019ad68"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x40c17370"/>
        <function-ref name="readDone" scoped="" ref="0x40c175c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Read" ref="0x40f072e0" loc="31:/opt/tinyos-2.1.0/tos/platforms/mica/VoltageC.nc">
      <component-ref qname="proj1AppC.Sensor.Sensor"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Read" scoped="" ref="0x40f072e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Read"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x4019ad68"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x40f07908"/>
        <function-ref name="readDone" scoped="" ref="0x40f07b60"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x40f3dc18" loc="25:/opt/tinyos-2.1.0/tos/chips/atm128/adc/AdcReadClientC.nc">
      <component-ref qname="proj1AppC.Sensor.Sensor.AdcReadClientC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceConfigure" scoped="" ref="0x40f3dc18"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x40f3ddf0"/>
        <function-ref name="configure" scoped="" ref="0x40f3ded0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Read" ref="0x40f06b50" loc="22:/opt/tinyos-2.1.0/tos/chips/atm128/adc/AdcReadClientC.nc">
      <component-ref qname="proj1AppC.Sensor.Sensor.AdcReadClientC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Read" scoped="" ref="0x40f06b50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Read"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x4019ad68"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x40f3d1e0"/>
        <function-ref name="readDone" scoped="" ref="0x40f3d438"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Atm128AdcConfig" ref="0x40f3d740" loc="24:/opt/tinyos-2.1.0/tos/chips/atm128/adc/AdcReadClientC.nc">
      <component-ref qname="proj1AppC.Sensor.Sensor.AdcReadClientC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128AdcConfig" scoped="" ref="0x40f3d740"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128AdcConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="getRefVoltage" scoped="" ref="0x40f3d918"/>
        <function-ref name="getChannel" scoped="" ref="0x40f3d9f8"/>
        <function-ref name="getPrescaler" scoped="" ref="0x40f3dad8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Atm128AdcConfig" ref="0x40c35830" loc="30:/opt/tinyos-2.1.0/tos/platforms/mica/VoltageP.nc">
      <component-ref qname="VoltageP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128AdcConfig" scoped="" ref="0x40c35830"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128AdcConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="getRefVoltage" scoped="" ref="0x40c35a08"/>
        <function-ref name="getChannel" scoped="" ref="0x40c35ae8"/>
        <function-ref name="getPrescaler" scoped="" ref="0x40c35bc8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x40c33908" loc="41:/opt/tinyos-2.1.0/tos/system/AMSenderC.nc">
      <component-ref qname="proj1AppC.AMSenderC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMSend" scoped="" ref="0x40c33908"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x40c33ae0"/>
        <function-ref name="getPayload" scoped="" ref="0x40c33bc0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x40c33ca0"/>
        <function-ref name="cancel" scoped="" ref="0x40c33d80"/>
        <function-ref name="sendDone" scoped="" ref="0x40c33e60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x40c4b010" loc="42:/opt/tinyos-2.1.0/tos/system/AMSenderC.nc">
      <component-ref qname="proj1AppC.AMSenderC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0x40c4b010"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x40c4b1e8"/>
        <function-ref name="payloadLength" scoped="" ref="0x40c4b2c8"/>
        <function-ref name="getPayload" scoped="" ref="0x40c4b3a8"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x40c4b488"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x40c4b568"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x40c4b6a8" loc="43:/opt/tinyos-2.1.0/tos/system/AMSenderC.nc">
      <component-ref qname="proj1AppC.AMSenderC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0x40c4b6a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x40c4b880"/>
        <function-ref name="source" scoped="" ref="0x40c4b960"/>
        <function-ref name="address" scoped="" ref="0x40c4ba40"/>
        <function-ref name="destination" scoped="" ref="0x40c4bb20"/>
        <function-ref name="setSource" scoped="" ref="0x40c4bc00"/>
        <function-ref name="setDestination" scoped="" ref="0x40c4bce0"/>
        <function-ref name="type" scoped="" ref="0x40c4bdc0"/>
        <function-ref name="setType" scoped="" ref="0x40c4bea0"/>
        <function-ref name="isForMe" scoped="" ref="0x40c4a010"/>
        <function-ref name="setGroup" scoped="" ref="0x40c4a0f0"/>
        <function-ref name="localGroup" scoped="" ref="0x40c4a1d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Acks" ref="0x40c4a330" loc="44:/opt/tinyos-2.1.0/tos/system/AMSenderC.nc">
      <component-ref qname="proj1AppC.AMSenderC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Acks" scoped="" ref="0x40c4a330"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x40c4a508"/>
        <function-ref name="noAck" scoped="" ref="0x40c4a5e8"/>
        <function-ref name="wasAcked" scoped="" ref="0x40c4a6c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x40f38a38" loc="36:/opt/tinyos-2.1.0/tos/system/AMQueueEntryP.nc">
      <component-ref qname="proj1AppC.AMSenderC.AMQueueEntryP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMSend" scoped="" ref="0x40f38a38"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x40f38c10"/>
        <function-ref name="getPayload" scoped="" ref="0x40f38cf0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x40f38dd0"/>
        <function-ref name="cancel" scoped="" ref="0x40f38eb0"/>
        <function-ref name="sendDone" scoped="" ref="0x40f34010"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Send" ref="0x40f34180" loc="38:/opt/tinyos-2.1.0/tos/system/AMQueueEntryP.nc">
      <component-ref qname="proj1AppC.AMSenderC.AMQueueEntryP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Send" scoped="" ref="0x40f34180"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x40f34358"/>
        <function-ref name="getPayload" scoped="" ref="0x40f34438"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x40f34518"/>
        <function-ref name="cancel" scoped="" ref="0x40f345f8"/>
        <function-ref name="sendDone" scoped="" ref="0x40f346d8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AMPacket" ref="0x40f34818" loc="39:/opt/tinyos-2.1.0/tos/system/AMQueueEntryP.nc">
      <component-ref qname="proj1AppC.AMSenderC.AMQueueEntryP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0x40f34818"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x40f349f0"/>
        <function-ref name="source" scoped="" ref="0x40f34ad0"/>
        <function-ref name="address" scoped="" ref="0x40f34bb0"/>
        <function-ref name="destination" scoped="" ref="0x40f34c90"/>
        <function-ref name="setSource" scoped="" ref="0x40f34d70"/>
        <function-ref name="setDestination" scoped="" ref="0x40f34e50"/>
        <function-ref name="type" scoped="" ref="0x40f33010"/>
        <function-ref name="setType" scoped="" ref="0x40f330f0"/>
        <function-ref name="isForMe" scoped="" ref="0x40f331d0"/>
        <function-ref name="setGroup" scoped="" ref="0x40f332b0"/>
        <function-ref name="localGroup" scoped="" ref="0x40f33390"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x40c56810" loc="35:/opt/tinyos-2.1.0/tos/system/AMQueueP.nc">
      <component-ref qname="AMQueueP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Send" scoped="" ref="0x40c56810"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x40c569e8"/>
        <function-ref name="getPayload" scoped="" ref="0x40c56ac8"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x40c56ba8"/>
        <function-ref name="cancel" scoped="" ref="0x40c56c88"/>
        <function-ref name="sendDone" scoped="" ref="0x40c56d68"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AMSend" ref="0x40c51648" loc="40:/opt/tinyos-2.1.0/tos/system/AMQueueImplP.nc">
      <component-ref qname="AMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMSend" scoped="" ref="0x40c51648"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x4039b8b0"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x40c51830"/>
        <function-ref name="getPayload" scoped="" ref="0x40c51910"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x40c519f0"/>
        <function-ref name="cancel" scoped="" ref="0x40c51ad0"/>
        <function-ref name="sendDone" scoped="" ref="0x40c51bb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x40c52ec8" loc="38:/opt/tinyos-2.1.0/tos/system/AMQueueImplP.nc">
      <component-ref qname="AMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Send" scoped="" ref="0x40c52ec8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x40c510c0"/>
        <function-ref name="getPayload" scoped="" ref="0x40c511a0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x40c51280"/>
        <function-ref name="cancel" scoped="" ref="0x40c51360"/>
        <function-ref name="sendDone" scoped="" ref="0x40c51440"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Packet" ref="0x40c50930" loc="42:/opt/tinyos-2.1.0/tos/system/AMQueueImplP.nc">
      <component-ref qname="AMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0x40c50930"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x40c50b08"/>
        <function-ref name="payloadLength" scoped="" ref="0x40c50be8"/>
        <function-ref name="getPayload" scoped="" ref="0x40c50cc8"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x40c50da8"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x40c50e88"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="errorTask" ref="0x40c4f030" loc="161:/opt/tinyos-2.1.0/tos/system/AMQueueImplP.nc">
      <component-ref qname="AMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="errorTask" scoped="" ref="0x40c4f030"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x40c4f208"/>
        <function-ref name="runTask" scoped="" ref="0x40c4f2e8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CancelTask" ref="0x40c4f468" loc="118:/opt/tinyos-2.1.0/tos/system/AMQueueImplP.nc">
      <component-ref qname="AMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CancelTask" scoped="" ref="0x40c4f468"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x40c4f640"/>
        <function-ref name="runTask" scoped="" ref="0x40c4f720"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AMPacket" ref="0x40c51cf0" loc="41:/opt/tinyos-2.1.0/tos/system/AMQueueImplP.nc">
      <component-ref qname="AMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0x40c51cf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x40c51ec8"/>
        <function-ref name="source" scoped="" ref="0x40c50010"/>
        <function-ref name="address" scoped="" ref="0x40c500f0"/>
        <function-ref name="destination" scoped="" ref="0x40c501d0"/>
        <function-ref name="setSource" scoped="" ref="0x40c502b0"/>
        <function-ref name="setDestination" scoped="" ref="0x40c50390"/>
        <function-ref name="type" scoped="" ref="0x40c50470"/>
        <function-ref name="setType" scoped="" ref="0x40c50550"/>
        <function-ref name="isForMe" scoped="" ref="0x40c50630"/>
        <function-ref name="setGroup" scoped="" ref="0x40c50710"/>
        <function-ref name="localGroup" scoped="" ref="0x40c507f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x40c47070" loc="38:/opt/tinyos-2.1.0/tos/system/AMReceiverC.nc">
      <component-ref qname="proj1AppC.AMReceiverC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0x40c47070"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x40c47248"/>
        <function-ref name="payloadLength" scoped="" ref="0x40c47328"/>
        <function-ref name="getPayload" scoped="" ref="0x40c47408"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x40c474e8"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x40c475c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x40c48d30" loc="37:/opt/tinyos-2.1.0/tos/system/AMReceiverC.nc">
      <component-ref qname="proj1AppC.AMReceiverC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0x40c48d30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x40c48f08"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x40c47708" loc="39:/opt/tinyos-2.1.0/tos/system/AMReceiverC.nc">
      <component-ref qname="proj1AppC.AMReceiverC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0x40c47708"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x40c478e0"/>
        <function-ref name="source" scoped="" ref="0x40c479c0"/>
        <function-ref name="address" scoped="" ref="0x40c47aa0"/>
        <function-ref name="destination" scoped="" ref="0x40c47b80"/>
        <function-ref name="setSource" scoped="" ref="0x40c47c60"/>
        <function-ref name="setDestination" scoped="" ref="0x40c47d40"/>
        <function-ref name="type" scoped="" ref="0x40c47e20"/>
        <function-ref name="setType" scoped="" ref="0x40c47f00"/>
        <function-ref name="isForMe" scoped="" ref="0x40c43010"/>
        <function-ref name="setGroup" scoped="" ref="0x40c430f0"/>
        <function-ref name="localGroup" scoped="" ref="0x40c431d0"/>
      </interface-functions>
    </interface>
  </interfaces>
  <interfacedefs>
    <interfacedef qname="Boot" loc="39:/opt/tinyos-2.1.0/tos/interfaces/Boot.nc">
      <documentation loc="31:/opt/tinyos-2.1.0/tos/interfaces/Boot.nc">
        <short>&#10; Interface that notifies components when TinyOS has booted&#10; (initialized all of its components), as discussed in TEP 107.</short>
        <long>&#10; Interface that notifies components when TinyOS has booted&#10; (initialized all of its components), as discussed in TEP 107.&#10;&#10; @author Philip Levis&#10; @date   January 5 2005&#10;</long>
      </documentation>
      <function event="" provided="0" name="booted" ref="0x403addc0" loc="49:/opt/tinyos-2.1.0/tos/interfaces/Boot.nc">
        <documentation loc="40:/opt/tinyos-2.1.0/tos/interfaces/Boot.nc">
          <short>&#10; Signaled when the system has booted successfully.</short>
          <long>&#10; Signaled when the system has booted successfully. Components can&#10; assume the system has been initialized properly. Services may&#10; need to be started to work, however.&#10;&#10; @see StdControl&#10; @see SplitConrol&#10; @see TEP 107: Boot Sequence&#10;</long>
        </documentation>
        <interfacedef-ref qname="Boot"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Timer" loc="42:/opt/tinyos-2.1.0/tos/lib/timer/Timer.nc">
      <documentation loc="25:/opt/tinyos-2.1.0/tos/lib/timer/Timer.nc">
        <short>&#10; A Timer is TinyOS's general purpose timing interface.</short>
        <long>&#10; A Timer is TinyOS's general purpose timing interface. For more precise&#10; timing, you may wish to use a (platform-specific) component offering&#10; an Alarm interface.&#10;&#10; &#60;p>A Timer is parameterised by its &#34;precision&#34; (milliseconds,&#10; microseconds, etc), identified by a type. This prevents, e.g.,&#10; unintentionally mixing components expecting milliseconds with those&#10; expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Alarm.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x403ca308" loc="42:/opt/tinyos-2.1.0/tos/lib/timer/Timer.nc">
          <interfacedef-ref qname="Timer"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x403ca308"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="getNow" ref="0x403cfa28" loc="125:/opt/tinyos-2.1.0/tos/lib/timer/Timer.nc">
        <documentation loc="121:/opt/tinyos-2.1.0/tos/lib/timer/Timer.nc">
          <short>&#10; Return the current time.</short>
          <long>&#10; Return the current time.&#10; @return Current time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x4019b400"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="fired" ref="0x403d18a8" loc="72:/opt/tinyos-2.1.0/tos/lib/timer/Timer.nc">
        <documentation loc="69:/opt/tinyos-2.1.0/tos/lib/timer/Timer.nc">
          <short>&#10; Signaled when the timer expires (one-shot) or repeats (periodic).</short>
          <long>&#10; Signaled when the timer expires (one-shot) or repeats (periodic).&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startPeriodicAt" ref="0x403d0a00" loc="103:/opt/tinyos-2.1.0/tos/lib/timer/Timer.nc">
        <documentation loc="89:/opt/tinyos-2.1.0/tos/lib/timer/Timer.nc">
          <short>&#10; Set a periodic timer to repeat every dt time units.</short>
          <long>&#10; Set a periodic timer to repeat every dt time units. Replaces any&#10; current timer settings. The &#60;code>fired&#60;/code> will be signaled every&#10; dt units (first event at t0+dt units). Periodic timers set in the past&#10; will get a bunch of events in succession, until the timer &#34;catches up&#34;.&#10;&#10; &#60;p>Because the current time may wrap around, it is possible to use&#10; values of t0 greater than the &#60;code>getNow&#60;/code>'s result. These&#10; values represent times in the past, i.e., the time at which getNow()&#10; would last of returned that value.&#10;&#10; @param t0 Base time for timer.&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x4019b400"/></typename>
            </type-int>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x4019b400"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t0" ref="0x403d06b8" loc="103:/opt/tinyos-2.1.0/tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x4019b400"/></typename>
            </type-int>
          </variable>
          <variable name="dt" ref="0x403d08a0" loc="103:/opt/tinyos-2.1.0/tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x4019b400"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isOneShot" ref="0x403d0210" loc="87:/opt/tinyos-2.1.0/tos/lib/timer/Timer.nc">
        <documentation loc="83:/opt/tinyos-2.1.0/tos/lib/timer/Timer.nc">
          <short>&#10; Check if this is a one-shot timer.</short>
          <long>&#10; Check if this is a one-shot timer.&#10; @return TRUE for one-shot timers, FALSE for periodic timers.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x402c9b90"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getdt" ref="0x403ce3e8" loc="140:/opt/tinyos-2.1.0/tos/lib/timer/Timer.nc">
        <documentation loc="135:/opt/tinyos-2.1.0/tos/lib/timer/Timer.nc">
          <short>&#10; Return the delay or period for the previously started timer.</short>
          <long>&#10; Return the delay or period for the previously started timer. The next&#10; fired event will occur at gett0() + getdt().&#10; @return Timer's interval.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x4019b400"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="gett0" ref="0x403cfe70" loc="133:/opt/tinyos-2.1.0/tos/lib/timer/Timer.nc">
        <documentation loc="127:/opt/tinyos-2.1.0/tos/lib/timer/Timer.nc">
          <short>&#10; Return the time anchor for the previously started timer or the time of&#10; the previous event for periodic timers.</short>
          <long>&#10; Return the time anchor for the previously started timer or the time of&#10; the previous event for periodic timers. The next fired event will occur&#10; at gett0() + getdt().&#10; @return Timer's base time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x4019b400"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isRunning" ref="0x403d1d38" loc="81:/opt/tinyos-2.1.0/tos/lib/timer/Timer.nc">
        <documentation loc="75:/opt/tinyos-2.1.0/tos/lib/timer/Timer.nc">
          <short>&#10; Check if timer is running.</short>
          <long>&#10; Check if timer is running. Periodic timers run until stopped or&#10; replaced, one-shot timers run until their deadline expires.&#10;&#10; @return TRUE if the timer is still running.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x402c9b90"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startPeriodic" ref="0x403ca960" loc="53:/opt/tinyos-2.1.0/tos/lib/timer/Timer.nc">
        <documentation loc="45:/opt/tinyos-2.1.0/tos/lib/timer/Timer.nc">
          <short>&#10; Set a periodic timer to repeat every dt time units.</short>
          <long>&#10; Set a periodic timer to repeat every dt time units. Replaces any&#10; current timer settings. Equivalent to startPeriodicAt(getNow(),&#10; dt). The &#60;code>fired&#60;/code> will be signaled every dt units (first&#10; event in dt units).&#10;&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x4019b400"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dt" ref="0x403ca808" loc="53:/opt/tinyos-2.1.0/tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x4019b400"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="startOneShotAt" ref="0x403cf408" loc="118:/opt/tinyos-2.1.0/tos/lib/timer/Timer.nc">
        <documentation loc="105:/opt/tinyos-2.1.0/tos/lib/timer/Timer.nc">
          <short>&#10; Set a single-short timer to time t0+dt.</short>
          <long>&#10; Set a single-short timer to time t0+dt. Replaces any current timer&#10; settings. The &#60;code>fired&#60;/code> will be signaled when the timer&#10; expires. Timers set in the past will fire &#34;soon&#34;.&#10;&#10; &#60;p>Because the current time may wrap around, it is possible to use&#10; values of t0 greater than the &#60;code>getNow&#60;/code>'s result. These&#10; values represent times in the past, i.e., the time at which getNow()&#10; would last of returned that value.&#10;&#10; @param t0 Base time for timer.&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x4019b400"/></typename>
            </type-int>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x4019b400"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t0" ref="0x403cf0c0" loc="118:/opt/tinyos-2.1.0/tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x4019b400"/></typename>
            </type-int>
          </variable>
          <variable name="dt" ref="0x403cf2a8" loc="118:/opt/tinyos-2.1.0/tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x4019b400"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="startOneShot" ref="0x403d1010" loc="62:/opt/tinyos-2.1.0/tos/lib/timer/Timer.nc">
        <documentation loc="55:/opt/tinyos-2.1.0/tos/lib/timer/Timer.nc">
          <short>&#10; Set a single-short timer to some time units in the future.</short>
          <long>&#10; Set a single-short timer to some time units in the future. Replaces&#10; any current timer settings. Equivalent to startOneShotAt(getNow(),&#10; dt). The &#60;code>fired&#60;/code> will be signaled when the timer expires.&#10;&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x4019b400"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dt" ref="0x403caea0" loc="62:/opt/tinyos-2.1.0/tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x4019b400"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x403d14e0" loc="67:/opt/tinyos-2.1.0/tos/lib/timer/Timer.nc">
        <documentation loc="64:/opt/tinyos-2.1.0/tos/lib/timer/Timer.nc">
          <short>&#10; Cancel a timer.</short>
          <long>&#10; Cancel a timer.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Packet" loc="44:/opt/tinyos-2.1.0/tos/interfaces/Packet.nc">
      <documentation loc="31:/opt/tinyos-2.1.0/tos/interfaces/Packet.nc">
        <short> &#10; The basic message data type accessors.</short>
        <long> &#10; The basic message data type accessors. Protocols may use&#10; additional packet interfaces for their protocol specific&#10; data/metadata.&#10;&#10; @author Philip Levis&#10; @date   January 5 2005&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <function command="" provided="0" name="clear" ref="0x403b92a0" loc="54:/opt/tinyos-2.1.0/tos/interfaces/Packet.nc">
        <documentation loc="47:/opt/tinyos-2.1.0/tos/interfaces/Packet.nc">
          <short>&#10; Clear out this packet.</short>
          <long>&#10; Clear out this packet.  Note that this is a deep operation and&#10; total operation: calling clear() on any layer will completely&#10; clear the packet for reuse.&#10; @param  'message_t* ONE msg'    the packet to clear&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x403a20c0"/>
                <typename><typedef-ref name="message_t" ref="0x403a2e50"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x403b9148" loc="54:/opt/tinyos-2.1.0/tos/interfaces/Packet.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x403a20c0"/>
                <typename><typedef-ref name="message_t" ref="0x403a2e50"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="payloadLength" ref="0x403b9c70" loc="67:/opt/tinyos-2.1.0/tos/interfaces/Packet.nc">
        <documentation loc="56:/opt/tinyos-2.1.0/tos/interfaces/Packet.nc">
          <short>&#10; Return the length of the payload of msg.</short>
          <long>&#10; Return the length of the payload of msg. This value may be less&#10; than what maxPayloadLength() returns, if the packet is smaller than&#10; the MTU. If a communication component does not support variably&#10; sized data regions, then payloadLength() will always return&#10; the same value as maxPayloadLength(). &#10;&#10; @param  'message_t* ONE msg'    the packet to examine&#10; @return        the length of its current payload&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x403a20c0"/>
                <typename><typedef-ref name="message_t" ref="0x403a2e50"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x403b9b18" loc="67:/opt/tinyos-2.1.0/tos/interfaces/Packet.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x403a20c0"/>
                <typename><typedef-ref name="message_t" ref="0x403a2e50"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getPayload" ref="0x403b8c00" loc="115:/opt/tinyos-2.1.0/tos/interfaces/Packet.nc">
        <documentation loc="98:/opt/tinyos-2.1.0/tos/interfaces/Packet.nc">
          <short>&#10; Return a pointer to a protocol's payload region in a packet.</short>
          <long>&#10; Return a pointer to a protocol's payload region in a packet.&#10; If the caller intends to write to the payload region then&#10; the &#60;tt>len&#60;/tt> parameter must reflect the maximum required&#10; length. If the caller (only) wants to read from the payload&#10; region, then &#60;tt>len&#60;/tt> may be set to the value of&#10; payloadLength(). If the payload region is smaller than &#10; &#60;tt>len&#60;/tt> this command returns NULL. The offset where&#10; the payload region starts within a packet is fixed, i.e. for&#10; a given &#60;tt>msg&#60;/tt> this command will always return the same&#10; pointer or NULL.&#10;&#10; @param 'message_t* ONE msg'   the packet &#10; @param len   the length of payload required&#10; @return 'void* COUNT_NOK(len)'     a pointer to the packet's data payload for this layer&#10;              or NULL if &#60;tt>len&#60;/tt> is too big&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:1">
            <type-void size="I:1" alignment="I:1"></type-void>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x403a20c0"/>
                <typename><typedef-ref name="message_t" ref="0x403a2e50"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x403b88a0" loc="115:/opt/tinyos-2.1.0/tos/interfaces/Packet.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x403a20c0"/>
                <typename><typedef-ref name="message_t" ref="0x403a2e50"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x403b8a80" loc="115:/opt/tinyos-2.1.0/tos/interfaces/Packet.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="maxPayloadLength" ref="0x403b82b8" loc="95:/opt/tinyos-2.1.0/tos/interfaces/Packet.nc">
        <documentation loc="85:/opt/tinyos-2.1.0/tos/interfaces/Packet.nc">
          <short>&#10; Return the maximum payload length that this communication layer&#10; can provide.</short>
          <long>&#10; Return the maximum payload length that this communication layer&#10; can provide. Note that, depending on protocol fields, a given&#10; request to send a packet may not be able to send the maximum&#10; payload length (e.g., if there are variable length&#10; fields). Protocols may provide specialized interfaces for these&#10; circumstances.&#10;&#10; @return   the maximum size payload allowed by this layer&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setPayloadLength" ref="0x403b78f8" loc="83:/opt/tinyos-2.1.0/tos/interfaces/Packet.nc">
        <documentation loc="69:/opt/tinyos-2.1.0/tos/interfaces/Packet.nc">
          <short>&#10; Set the length field of the packet.</short>
          <long>&#10; Set the length field of the packet. This value is not checked&#10; for validity (e.g., if it is larger than the maximum payload&#10; size). This command is not used when sending packets, as calls&#10; to send include a length parameter. Rather, it is used by&#10; components, such as queues, that need to buffer requests to&#10; send.  This command allows the component to store the length&#10; specified in the request and later recover it when actually&#10; sending.&#10;&#10; @param 'message_t* ONE msg'   the packet&#10; @param len   the value to set its length field to&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x403a20c0"/>
                <typename><typedef-ref name="message_t" ref="0x403a2e50"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x403b75b8" loc="83:/opt/tinyos-2.1.0/tos/interfaces/Packet.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x403a20c0"/>
                <typename><typedef-ref name="message_t" ref="0x403a2e50"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x403b7798" loc="83:/opt/tinyos-2.1.0/tos/interfaces/Packet.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="AMSend" loc="47:/opt/tinyos-2.1.0/tos/interfaces/AMSend.nc">
      <documentation loc="23:/opt/tinyos-2.1.0/tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; Revision:  $Revision: 1.11 $&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function command="" provided="0" name="send" ref="0x403c6010" loc="69:/opt/tinyos-2.1.0/tos/interfaces/AMSend.nc">
        <documentation loc="49:/opt/tinyos-2.1.0/tos/interfaces/AMSend.nc">
          <short> &#10; Send a packet with a data payload of &#60;tt>len&#60;/tt> to address&#10; &#60;tt>addr&#60;/tt>.</short>
          <long> &#10; Send a packet with a data payload of &#60;tt>len&#60;/tt> to address&#10; &#60;tt>addr&#60;/tt>. To determine the maximum available size, use the&#10; Packet interface of the component providing AMSend. If send&#10; returns SUCCESS, then the component will signal the sendDone&#10; event in the future; if send returns an error, it will not&#10; signal the event.  Note that a component may accept a send&#10; request which it later finds it cannot satisfy; in this case, it&#10; will signal sendDone with error code.&#10;&#10; @param addr   address to which to send the packet&#10; @param 'message_t* ONE msg'    the packet&#10; @param len    the length of the data in the packet payload&#10; @return       SUCCESS if the request to send succeeded and a&#10;               sendDone will be signaled later, EBUSY if the&#10;               abstraction cannot send now but will be able to&#10;               later, or FAIL if the communication layer is not&#10;               in a state that can send (e.g., off).&#10; @see          sendDone&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x402d2bd0"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x4039bd68"/></typename>
            </type-int>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x403a20c0"/>
                <typename><typedef-ref name="message_t" ref="0x403a2e50"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="addr" ref="0x403b29f8" loc="69:/opt/tinyos-2.1.0/tos/interfaces/AMSend.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x4039bd68"/></typename>
            </type-int>
          </variable>
          <variable name="msg" ref="0x403b2c10" loc="69:/opt/tinyos-2.1.0/tos/interfaces/AMSend.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x403a20c0"/>
                <typename><typedef-ref name="message_t" ref="0x403a2e50"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x403b2df0" loc="69:/opt/tinyos-2.1.0/tos/interfaces/AMSend.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getPayload" ref="0x403cddd0" loc="124:/opt/tinyos-2.1.0/tos/interfaces/AMSend.nc">
        <documentation loc="115:/opt/tinyos-2.1.0/tos/interfaces/AMSend.nc">
          <short>&#10; Return a pointer to a protocol's payload region in a packet.</short>
          <long>&#10; Return a pointer to a protocol's payload region in a packet.&#10; This command behaves identically to &#60;tt>Packet.getPayload&#60;/tt>&#10; (minus the length parameter) and is included in this interface&#10; as a convenience.&#10;&#10; @param  'message_t* ONE msg'    the packet&#10; @return 'void* COUNT(len)'      the payload of the packet&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:1">
            <type-void size="I:1" alignment="I:1"></type-void>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x403a20c0"/>
                <typename><typedef-ref name="message_t" ref="0x403a2e50"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x403cda70" loc="124:/opt/tinyos-2.1.0/tos/interfaces/AMSend.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x403a20c0"/>
                <typename><typedef-ref name="message_t" ref="0x403a2e50"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x403cdc50" loc="124:/opt/tinyos-2.1.0/tos/interfaces/AMSend.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="maxPayloadLength" ref="0x403cd510" loc="112:/opt/tinyos-2.1.0/tos/interfaces/AMSend.nc">
        <documentation loc="102:/opt/tinyos-2.1.0/tos/interfaces/AMSend.nc">
          <short>&#10; Return the maximum payload length that this communication layer&#10; can provide.</short>
          <long>&#10; Return the maximum payload length that this communication layer&#10; can provide. This command behaves identically to&#10; &#60;tt>Packet.maxPayloadLength&#60;/tt> and is included in this&#10; interface as a convenience.&#10;&#10; @return the maximum payload length&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="cancel" ref="0x403c6cb0" loc="85:/opt/tinyos-2.1.0/tos/interfaces/AMSend.nc">
        <documentation loc="71:/opt/tinyos-2.1.0/tos/interfaces/AMSend.nc">
          <short>&#10; Cancel a requested transmission.</short>
          <long>&#10; Cancel a requested transmission. Returns SUCCESS if the &#10; transmission was canceled properly (not sent in its&#10; entirety). Note that the component may not know&#10; if the send was successfully canceled, if the radio is&#10; handling much of the logic; in this case, a component&#10; should be conservative and return an appropriate error code.&#10; A successful call to cancel must always result in a &#10; sendFailed event, and never a sendSucceeded event.&#10; &#10; @param  'message_t* ONE msg'    the packet whose transmission should be cancelled.&#10; @return SUCCESS if the transmission was cancelled, FAIL otherwise.&#10; @see    sendDone&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x402d2bd0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x403a20c0"/>
                <typename><typedef-ref name="message_t" ref="0x403a2e50"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x403c6b58" loc="85:/opt/tinyos-2.1.0/tos/interfaces/AMSend.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x403a20c0"/>
                <typename><typedef-ref name="message_t" ref="0x403a2e50"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="sendDone" ref="0x403c5bf8" loc="99:/opt/tinyos-2.1.0/tos/interfaces/AMSend.nc">
        <documentation loc="87:/opt/tinyos-2.1.0/tos/interfaces/AMSend.nc">
          <short> &#10; Signaled in response to an accepted send request.</short>
          <long> &#10; Signaled in response to an accepted send request. &#60;tt>msg&#60;/tt> is&#10; the message buffer sent, and &#60;tt>error&#60;/tt> indicates whether&#10; the send was successful.&#10;&#10; @param  'message_t* ONE msg'   the packet which was submitted as a send request&#10; @param  error SUCCESS if it was sent successfully, FAIL if it was not,&#10;               ECANCEL if it was cancelled&#10; @see send&#10; @see cancel&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x403a20c0"/>
                <typename><typedef-ref name="message_t" ref="0x403a2e50"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x402d2bd0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x403c58a0" loc="99:/opt/tinyos-2.1.0/tos/interfaces/AMSend.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x403a20c0"/>
                <typename><typedef-ref name="message_t" ref="0x403a2e50"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="error" ref="0x403c5a98" loc="99:/opt/tinyos-2.1.0/tos/interfaces/AMSend.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x402d2bd0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SplitControl" loc="66:/opt/tinyos-2.1.0/tos/interfaces/SplitControl.nc">
      <documentation loc="51:/opt/tinyos-2.1.0/tos/interfaces/SplitControl.nc">
        <short>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the split-phase counterpart to the StdContol interface.</short>
        <long>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the split-phase counterpart to the StdContol interface.  It&#10; should be used for switching between the on and off power states of&#10; the component providing it.  For each &#60;code>start()&#60;/code> or&#10; &#60;code>stop()&#60;/code> command, if the command returns SUCCESS, then a&#10; corresponding  &#60;code>startDone()&#60;/code> or &#60;code>stopDone()&#60;/code> event&#10; must be signalled.&#10;&#10; @author Joe Polastre&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function event="" provided="0" name="startDone" ref="0x403b1458" loc="92:/opt/tinyos-2.1.0/tos/interfaces/SplitControl.nc">
        <documentation loc="85:/opt/tinyos-2.1.0/tos/interfaces/SplitControl.nc">
          <short> &#10; Notify caller that the component has been started and is ready to&#10; receive other commands.</short>
          <long> &#10; Notify caller that the component has been started and is ready to&#10; receive other commands.&#10;&#10; @param &#60;b>error&#60;/b> -- SUCCESS if the component was successfully&#10;                        turned on, FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SplitControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x402d2bd0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="error" ref="0x403b1300" loc="92:/opt/tinyos-2.1.0/tos/interfaces/SplitControl.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x402d2bd0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="stopDone" ref="0x403b01c0" loc="117:/opt/tinyos-2.1.0/tos/interfaces/SplitControl.nc">
        <documentation loc="111:/opt/tinyos-2.1.0/tos/interfaces/SplitControl.nc">
          <short>&#10; Notify caller that the component has been stopped.</short>
          <long>&#10; Notify caller that the component has been stopped.&#10;&#10; @param &#60;b>error&#60;/b> -- SUCCESS if the component was successfully&#10;                        turned off, FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SplitControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x402d2bd0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="error" ref="0x403b0068" loc="117:/opt/tinyos-2.1.0/tos/interfaces/SplitControl.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x402d2bd0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="start" ref="0x403b3c00" loc="83:/opt/tinyos-2.1.0/tos/interfaces/SplitControl.nc">
        <documentation loc="68:/opt/tinyos-2.1.0/tos/interfaces/SplitControl.nc">
          <short>&#10; Start this component and all of its subcomponents.</short>
          <long>&#10; Start this component and all of its subcomponents.  Return&#10; values of SUCCESS will always result in a &#60;code>startDone()&#60;/code>&#10; event being signalled.&#10;&#10; @return SUCCESS if the device is already in the process of &#10;         starting or the device was off and the device is now ready to turn &#10;         on.  After receiving this return value, you should expect a &#10;         &#60;code>startDone&#60;/code> event in the near future.&#60;br>&#10;         EBUSY if the component is in the middle of powering down&#10;               i.e. a &#60;code>stop()&#60;/code> command has been called,&#10;               and a &#60;code>stopDone()&#60;/code> event is pending&#60;br>&#10;         EALREADY if the device is already on &#60;br>&#10;         FAIL Otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SplitControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x402d2bd0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x403b1968" loc="109:/opt/tinyos-2.1.0/tos/interfaces/SplitControl.nc">
        <documentation loc="94:/opt/tinyos-2.1.0/tos/interfaces/SplitControl.nc">
          <short>&#10; Start this component and all of its subcomponents.</short>
          <long>&#10; Start this component and all of its subcomponents.  Return&#10; values of SUCCESS will always result in a &#60;code>startDone()&#60;/code>&#10; event being signalled.&#10;&#10; @return SUCCESS if the device is already in the process of &#10;         stopping or the device was on and the device is now ready to turn &#10;         off.  After receiving this return value, you should expect a &#10;         &#60;code>stopDone&#60;/code> event in the near future.&#60;br>&#10;         EBUSY if the component is in the middle of powering up&#10;               i.e. a &#60;code>start()&#60;/code> command has been called,&#10;               and a &#60;code>startDone()&#60;/code> event is pending&#60;br>&#10;         EALREADY if the device is already off &#60;br>&#10;         FAIL Otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SplitControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x402d2bd0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Read" loc="49:/opt/tinyos-2.1.0/tos/interfaces/Read.nc">
      <documentation loc="33:/opt/tinyos-2.1.0/tos/interfaces/Read.nc">
        <short>&#10; The Read interface is intended for split-phase low-rate or&#10; high-latency reading of small values.</short>
        <long>&#10; The Read interface is intended for split-phase low-rate or&#10; high-latency reading of small values. The type of the value is&#10; given as a template argument. Because this interface is&#10; split-phase, these values may be backed by hardware, or a&#10; long-running computation.&#10;&#10; &#60;p>&#10; See TEP114 - SIDs: Source and Sink Independent Drivers for details.&#10; &#10; @param val_t the type of the object that will be returned&#10;&#10; @author Gilman Tolle &#60;gtolle@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2006/12/12 18:23:14 $&#10;</long>
      </documentation>
      <parameters>
        <typedef name="val_t" ref="0x403d8948" loc="49:/opt/tinyos-2.1.0/tos/interfaces/Read.nc">
          <interfacedef-ref qname="Read"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x403d8948"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="read" ref="0x403d8df8" loc="55:/opt/tinyos-2.1.0/tos/interfaces/Read.nc">
        <documentation loc="50:/opt/tinyos-2.1.0/tos/interfaces/Read.nc">
          <short>&#10; Initiates a read of the value.</short>
          <long>&#10; Initiates a read of the value.&#10; &#10; @return SUCCESS if a readDone() event will eventually come back.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Read"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x402d2bd0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="readDone" ref="0x403df5d0" loc="63:/opt/tinyos-2.1.0/tos/interfaces/Read.nc">
        <documentation loc="57:/opt/tinyos-2.1.0/tos/interfaces/Read.nc">
          <short>&#10; Signals the completion of the read().</short>
          <long>&#10; Signals the completion of the read().&#10;&#10; @param result SUCCESS if the read() was successful&#10; @param val the value that has been read&#10;</long>
        </documentation>
        <interfacedef-ref qname="Read"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x402d2bd0"/></typename>
            </type-int>
            <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x403d8948"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="result" ref="0x403df2a0" loc="63:/opt/tinyos-2.1.0/tos/interfaces/Read.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x402d2bd0"/></typename>
            </type-int>
          </variable>
          <variable name="val" ref="0x403df470" loc="63:/opt/tinyos-2.1.0/tos/interfaces/Read.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x403d8948"/></type-var>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Random" loc="29:/opt/tinyos-2.1.0/tos/interfaces/Random.nc">
      <documentation loc="23:/opt/tinyos-2.1.0/tos/interfaces/Random.nc">
        <short> &#10; Interface for generating 16-bit and 32-bit random numbers.</short>
        <long> &#10; Interface for generating 16-bit and 32-bit random numbers.&#10;&#10; @author Barbara Hohlt &#10; @date   March 1 2005 &#10;</long>
      </documentation>
      <function command="" provided="0" name="rand16" ref="0x403f0348" loc="41:/opt/tinyos-2.1.0/tos/interfaces/Random.nc">
        <documentation loc="37:/opt/tinyos-2.1.0/tos/interfaces/Random.nc">
          <short> &#10; Produces a 32-bit pseudorandom number.</short>
          <long> &#10; Produces a 32-bit pseudorandom number. &#10; @return Returns low 16 bits of the pseudorandom number.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Random"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x4019ad68"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="rand32" ref="0x403ebe70" loc="35:/opt/tinyos-2.1.0/tos/interfaces/Random.nc">
        <documentation loc="31:/opt/tinyos-2.1.0/tos/interfaces/Random.nc">
          <short> &#10; Produces a 32-bit pseudorandom number.</short>
          <long> &#10; Produces a 32-bit pseudorandom number. &#10; @return Returns the 32-bit pseudorandom number.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Random"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x4019b400"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ActiveMessageAddress" loc="38:/opt/tinyos-2.1.0/tos/interfaces/ActiveMessageAddress.nc">
      <documentation loc="34:/opt/tinyos-2.1.0/tos/interfaces/ActiveMessageAddress.nc">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Moss&#10;</long>
      </documentation>
      <function command="" provided="0" name="amAddress" ref="0x403e9090" loc="50:/opt/tinyos-2.1.0/tos/interfaces/ActiveMessageAddress.nc">
        <documentation loc="47:/opt/tinyos-2.1.0/tos/interfaces/ActiveMessageAddress.nc">
          <short>&#10; </short>
          <long>&#10; @return the active message address of this node&#10;</long>
        </documentation>
        <interfacedef-ref qname="ActiveMessageAddress"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="am_addr_t" ref="0x4039bd68"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="changed" ref="0x403e9900" loc="60:/opt/tinyos-2.1.0/tos/interfaces/ActiveMessageAddress.nc">
        <documentation loc="57:/opt/tinyos-2.1.0/tos/interfaces/ActiveMessageAddress.nc">
          <short>&#10; Notification that the address or group settings changed.</short>
          <long>&#10; Notification that the address or group settings changed.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ActiveMessageAddress"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="amGroup" ref="0x403e9500" loc="55:/opt/tinyos-2.1.0/tos/interfaces/ActiveMessageAddress.nc">
        <documentation loc="52:/opt/tinyos-2.1.0/tos/interfaces/ActiveMessageAddress.nc">
          <short>&#10; </short>
          <long>&#10; @return the group address of this node&#10;</long>
        </documentation>
        <interfacedef-ref qname="ActiveMessageAddress"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_group_t" ref="0x4039bb08"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setAddress" ref="0x403e0b80" loc="45:/opt/tinyos-2.1.0/tos/interfaces/ActiveMessageAddress.nc">
        <documentation loc="40:/opt/tinyos-2.1.0/tos/interfaces/ActiveMessageAddress.nc">
          <short>&#10; Set the active message address of this node&#10; </short>
          <long>&#10; Set the active message address of this node&#10; @param group The node's group ID&#10; @param addr The node's active message address&#10;</long>
        </documentation>
        <interfacedef-ref qname="ActiveMessageAddress"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_group_t" ref="0x4039bb08"/></typename>
            </type-int>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x4039bd68"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="group" ref="0x403e0818" loc="45:/opt/tinyos-2.1.0/tos/interfaces/ActiveMessageAddress.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_group_t" ref="0x4039bb08"/></typename>
            </type-int>
          </variable>
          <variable name="addr" ref="0x403e0a20" loc="45:/opt/tinyos-2.1.0/tos/interfaces/ActiveMessageAddress.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x4039bd68"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Receive" loc="45:/opt/tinyos-2.1.0/tos/interfaces/Receive.nc">
      <documentation loc="23:/opt/tinyos-2.1.0/tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; Revision:  $Revision: 1.11 $&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function event="" provided="0" name="receive" ref="0x403bea40" loc="67:/opt/tinyos-2.1.0/tos/interfaces/Receive.nc">
        <documentation loc="47:/opt/tinyos-2.1.0/tos/interfaces/Receive.nc">
          <short>&#10; Receive a packet buffer, returning a buffer for the signaling&#10; component to use for the next reception.</short>
          <long>&#10; Receive a packet buffer, returning a buffer for the signaling&#10; component to use for the next reception. The return value&#10; can be the same as &#60;tt>msg&#60;/tt>, as long as the handling&#10; component copies out the data it needs.&#10;&#10; &#60;b>Note&#60;/b> that misuse of this interface is one of the most&#10; common bugs in TinyOS code. For example, if a component both calls a&#10; send on the passed message and returns it, then it is possible&#10; the buffer will be reused before the send occurs, overwriting&#10; the component's data. This would cause the mote to possibly&#10; instead send a packet it most recently received.&#10;&#10; @param  'message_t* ONE msg'        the receied packet&#10; @param  'void* COUNT(len) payload'  a pointer to the packet's payload&#10; @param  len      the length of the data region pointed to by payload&#10; @return 'message_t* ONE'              a packet buffer for the stack to use for the next&#10;                  received packet.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Receive"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:1">
            <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x403a20c0"/>
              <typename><typedef-ref name="message_t" ref="0x403a2e50"/></typename>
            </type-tag>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x403a20c0"/>
                <typename><typedef-ref name="message_t" ref="0x403a2e50"/></typename>
              </type-tag>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x403be4f8" loc="67:/opt/tinyos-2.1.0/tos/interfaces/Receive.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x403a20c0"/>
                <typename><typedef-ref name="message_t" ref="0x403a2e50"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="payload" ref="0x403be6d8" loc="67:/opt/tinyos-2.1.0/tos/interfaces/Receive.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x403be8b8" loc="67:/opt/tinyos-2.1.0/tos/interfaces/Receive.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ParameterInit" loc="42:/opt/tinyos-2.1.0/tos/interfaces/ParameterInit.nc">
      <documentation loc="23:/opt/tinyos-2.1.0/tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; Revision:  $Revision: 1.11 $&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <parameters>
        <typedef name="parameter" ref="0x403de560" loc="42:/opt/tinyos-2.1.0/tos/interfaces/ParameterInit.nc">
          <interfacedef-ref qname="ParameterInit"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="parameter" scoped="" ref="0x403de560"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="init" ref="0x403debb0" loc="53:/opt/tinyos-2.1.0/tos/interfaces/ParameterInit.nc">
        <documentation loc="44:/opt/tinyos-2.1.0/tos/interfaces/ParameterInit.nc">
          <short>&#10; Initialize this component.</short>
          <long>&#10; Initialize this component. Initialization should not assume that&#10; any component is running: init() cannot call any commands besides&#10; those that initialize other components. This command behaves&#10; identically to Init.init, except that it takes a parameter.&#10;&#10; @param   param   the initialization parameter&#10; @return          SUCCESS if initialized properly, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ParameterInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x402d2bd0"/></typename>
          </type-int>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="parameter" scoped="" ref="0x403de560"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="param" ref="0x403dea58" loc="53:/opt/tinyos-2.1.0/tos/interfaces/ParameterInit.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="parameter" scoped="" ref="0x403de560"/></type-var>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Leds" loc="40:/opt/tinyos-2.1.0/tos/interfaces/Leds.nc">
      <documentation loc="22:/opt/tinyos-2.1.0/tos/types/Leds.h">
        <short>&#10; Constants for manipulating LEDs.</short>
        <long>&#10; Constants for manipulating LEDs.&#10;&#10; @author Philip Levis&#10; @date   March 21, 2005&#10;</long>
      </documentation>
      <function command="" provided="0" name="led0Off" ref="0x403e6678" loc="50:/opt/tinyos-2.1.0/tos/interfaces/Leds.nc">
        <documentation loc="47:/opt/tinyos-2.1.0/tos/interfaces/Leds.nc">
          <short>&#10; Turn off LED 0.</short>
          <long>&#10; Turn off LED 0. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led0Toggle" ref="0x403e6ac0" loc="56:/opt/tinyos-2.1.0/tos/interfaces/Leds.nc">
        <documentation loc="52:/opt/tinyos-2.1.0/tos/interfaces/Leds.nc">
          <short>&#10; Toggle LED 0; if it was off, turn it on, if was on, turn it off.</short>
          <long>&#10; Toggle LED 0; if it was off, turn it on, if was on, turn it off.&#10; The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led1On" ref="0x403e4010" loc="61:/opt/tinyos-2.1.0/tos/interfaces/Leds.nc">
        <documentation loc="58:/opt/tinyos-2.1.0/tos/interfaces/Leds.nc">
          <short>&#10; Turn on LED 1.</short>
          <long>&#10; Turn on LED 1. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led1Toggle" ref="0x403e4880" loc="72:/opt/tinyos-2.1.0/tos/interfaces/Leds.nc">
        <documentation loc="68:/opt/tinyos-2.1.0/tos/interfaces/Leds.nc">
          <short>&#10; Toggle LED 1; if it was off, turn it on, if was on, turn it off.</short>
          <long>&#10; Toggle LED 1; if it was off, turn it on, if was on, turn it off.&#10; The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led2Toggle" ref="0x403e3580" loc="89:/opt/tinyos-2.1.0/tos/interfaces/Leds.nc">
        <documentation loc="85:/opt/tinyos-2.1.0/tos/interfaces/Leds.nc">
          <short>&#10; Toggle LED 2; if it was off, turn it on, if was on, turn it off.</short>
          <long>&#10; Toggle LED 2; if it was off, turn it on, if was on, turn it off.&#10; The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x403e3a28" loc="106:/opt/tinyos-2.1.0/tos/interfaces/Leds.nc">
        <documentation loc="92:/opt/tinyos-2.1.0/tos/interfaces/Leds.nc">
          <short>&#10; Get the current LED settings as a bitmask.</short>
          <long>&#10; Get the current LED settings as a bitmask. Each bit corresponds to&#10; whether an LED is on; bit 0 is LED 0, bit 1 is LED 1, etc. You can&#10; also use the enums LEDS_LED0, LEDS_LED1. For example, this expression&#10; will determine whether LED 2 is on:&#10;&#10; &#60;pre> (call Leds.get() &#38; LEDS_LED2) &#60;/pre>&#10;&#10; This command supports up to 8 LEDs; if a platform has fewer, then&#10; those LEDs should always be off (their bit is zero). Also see&#10; &#60;tt>set()&#60;/tt>.&#10;&#10; @return a bitmask describing which LEDs are on and which are off&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led1Off" ref="0x403e4438" loc="66:/opt/tinyos-2.1.0/tos/interfaces/Leds.nc">
        <documentation loc="63:/opt/tinyos-2.1.0/tos/interfaces/Leds.nc">
          <short>&#10; Turn off LED 1.</short>
          <long>&#10; Turn off LED 1. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x403e2188" loc="123:/opt/tinyos-2.1.0/tos/interfaces/Leds.nc">
        <documentation loc="109:/opt/tinyos-2.1.0/tos/interfaces/Leds.nc">
          <short>&#10; Set the current LED configuration using a bitmask.</short>
          <long>&#10; Set the current LED configuration using a bitmask.  Each bit&#10; corresponds to whether an LED is on; bit 0 is LED 0, bit 1 is LED&#10; 1, etc. You can also use the enums LEDS_LED0, LEDS_LED1. For example,&#10; this statement will configure the LEDs so LED 0 and LED 2 are on:&#10;&#10; &#60;pre> call Leds.set(LEDS_LED0 | LEDS_LED2); &#60;/pre>&#10;&#10; This statement will turn LED 1 on if it was not already:&#10;&#10; &#60;pre>call Leds.set(call Leds.get() | LEDS_LED1);&#60;/pre>&#10;&#10; @param  val   a bitmask describing the on/off settings of the LEDs&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="val" ref="0x403e2030" loc="123:/opt/tinyos-2.1.0/tos/interfaces/Leds.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="led0On" ref="0x403e6250" loc="45:/opt/tinyos-2.1.0/tos/interfaces/Leds.nc">
        <documentation loc="42:/opt/tinyos-2.1.0/tos/interfaces/Leds.nc">
          <short>&#10; Turn on LED 0.</short>
          <long>&#10; Turn on LED 0. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led2On" ref="0x403e4d00" loc="78:/opt/tinyos-2.1.0/tos/interfaces/Leds.nc">
        <documentation loc="75:/opt/tinyos-2.1.0/tos/interfaces/Leds.nc">
          <short>&#10; Turn on LED 2.</short>
          <long>&#10; Turn on LED 2. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led2Off" ref="0x403e3138" loc="83:/opt/tinyos-2.1.0/tos/interfaces/Leds.nc">
        <documentation loc="80:/opt/tinyos-2.1.0/tos/interfaces/Leds.nc">
          <short>&#10; Turn off LED 2.</short>
          <long>&#10; Turn off LED 2. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="AMPacket" loc="50:/opt/tinyos-2.1.0/tos/interfaces/AMPacket.nc">
      <documentation loc="31:/opt/tinyos-2.1.0/tos/interfaces/AMPacket.nc">
        <short>&#10; The Active Message accessors, which provide the AM local address and&#10; functionality for querying packets.</short>
        <long>&#10; The Active Message accessors, which provide the AM local address and&#10; functionality for querying packets. Active Messages are a single-hop&#10; communication protocol. Therefore, fields such as source and destination&#10; represent the single-hop source and destination. Multihop sources and&#10; destinations are defined by the corresponding multihop protocol (if any).&#10; Also see the Packet interface.&#10;&#10; @author Philip Levis &#10; @date   January 18 2005&#10; @see    Packet&#10; @see    AMSend&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <function command="" provided="0" name="group" ref="0x403c0088" loc="166:/opt/tinyos-2.1.0/tos/interfaces/AMPacket.nc">
        <documentation loc="153:/opt/tinyos-2.1.0/tos/interfaces/AMPacket.nc">
          <short>&#10; Get the AM group of the AM packet.</short>
          <long>&#10; Get the AM group of the AM packet. The AM group is a logical&#10; identifier that distinguishes sets of nodes which may share&#10; a physical communication medium but wish to not communicate.&#10; The AM group logically separates the sets of nodes. When&#10; a node sends a packet, it fills in its AM group, and typically&#10; nodes only receive packets whose AM group field matches their&#10; own.&#10;&#10; @param 'message_t* ONE amsg' the packet&#10; @return the AM group of this packet&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_group_t" ref="0x4039bb08"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x403a20c0"/>
                <typename><typedef-ref name="message_t" ref="0x403a2e50"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x403c2f08" loc="166:/opt/tinyos-2.1.0/tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x403a20c0"/>
                <typename><typedef-ref name="message_t" ref="0x403a2e50"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="source" ref="0x403bd930" loc="77:/opt/tinyos-2.1.0/tos/interfaces/AMPacket.nc">
        <documentation loc="69:/opt/tinyos-2.1.0/tos/interfaces/AMPacket.nc">
          <short>&#10; Return the AM address of the source of the AM packet.</short>
          <long>&#10; Return the AM address of the source of the AM packet.&#10; If &#60;tt>amsg&#60;/tt> is not an AM packet, the results of this command&#10; are undefined.&#10; @param 'message_t* ONE amsg'  the packet&#10; @return      the source address of the packet.&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="am_addr_t" ref="0x4039bd68"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x403a20c0"/>
                <typename><typedef-ref name="message_t" ref="0x403a2e50"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x403bd7d8" loc="77:/opt/tinyos-2.1.0/tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x403a20c0"/>
                <typename><typedef-ref name="message_t" ref="0x403a2e50"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="address" ref="0x403ab858" loc="57:/opt/tinyos-2.1.0/tos/interfaces/AMPacket.nc">
        <documentation loc="52:/opt/tinyos-2.1.0/tos/interfaces/AMPacket.nc">
          <short>&#10; Return the node's active message address associated with this AM stack.</short>
          <long>&#10; Return the node's active message address associated with this AM stack.&#10; @return The address&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="am_addr_t" ref="0x4039bd68"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="destination" ref="0x403abef0" loc="67:/opt/tinyos-2.1.0/tos/interfaces/AMPacket.nc">
        <documentation loc="59:/opt/tinyos-2.1.0/tos/interfaces/AMPacket.nc">
          <short>&#10; Return the AM address of the destination of the AM packet.</short>
          <long>&#10; Return the AM address of the destination of the AM packet.&#10; If &#60;tt>amsg&#60;/tt> is not an AM packet, the results of this command&#10; are undefined.&#10; @param 'message_t* ONE amsg'    the packet&#10; @return        the destination address of the packet.&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="am_addr_t" ref="0x4039bd68"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x403a20c0"/>
                <typename><typedef-ref name="message_t" ref="0x403a2e50"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x403abd98" loc="67:/opt/tinyos-2.1.0/tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x403a20c0"/>
                <typename><typedef-ref name="message_t" ref="0x403a2e50"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setSource" ref="0x403ba238" loc="110:/opt/tinyos-2.1.0/tos/interfaces/AMPacket.nc">
        <documentation loc="94:/opt/tinyos-2.1.0/tos/interfaces/AMPacket.nc">
          <short>&#10; Set the AM address of the source field of the AM packet.</short>
          <long>&#10; Set the AM address of the source field of the AM packet.  As&#10; the AM address is set as part of sending with the AMSend&#10; interface, this command is not used for sending packets.  Rather,&#10; it is used when a component, such as a queue, needs to buffer a&#10; request to send. The component can save the source address&#10; and then recover it when actually sending. As an AM layer generally&#10; sets the source address to be the local address, this interface&#10; is not commonly used except when a system is bypassing the AM&#10; layer (e.g., a protocol bridge). If &#60;tt>amsg&#60;/tt> is&#10; not an AM packet, the results of this command are undefined.&#10;&#10; @param  'message_t* ONE amsg'   the packet&#10; @param  addr   the address&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x403a20c0"/>
                <typename><typedef-ref name="message_t" ref="0x403a2e50"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x4039bd68"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x403bceb0" loc="110:/opt/tinyos-2.1.0/tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x403a20c0"/>
                <typename><typedef-ref name="message_t" ref="0x403a2e50"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="addr" ref="0x403ba0d8" loc="110:/opt/tinyos-2.1.0/tos/interfaces/AMPacket.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x4039bd68"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setDestination" ref="0x403bc530" loc="92:/opt/tinyos-2.1.0/tos/interfaces/AMPacket.nc">
        <documentation loc="79:/opt/tinyos-2.1.0/tos/interfaces/AMPacket.nc">
          <short>&#10; Set the AM address of the destination field of the AM packet.</short>
          <long>&#10; Set the AM address of the destination field of the AM packet.  As&#10; the AM address is set as part of sending with the AMSend&#10; interface, this command is not used for sending packets.  Rather,&#10; it is used when a component, such as a queue, needs to buffer a&#10; request to send. The component can save the destination address&#10; and then recover it when actually sending. If &#60;tt>amsg&#60;/tt> is&#10; not an AM packet, the results of this command are undefined.&#10;&#10; @param  'message_t* ONE amsg'   the packet&#10; @param  addr   the address&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x403a20c0"/>
                <typename><typedef-ref name="message_t" ref="0x403a2e50"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x4039bd68"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x403bc1c8" loc="92:/opt/tinyos-2.1.0/tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x403a20c0"/>
                <typename><typedef-ref name="message_t" ref="0x403a2e50"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="addr" ref="0x403bc3d0" loc="92:/opt/tinyos-2.1.0/tos/interfaces/AMPacket.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x4039bd68"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="type" ref="0x403c3a28" loc="136:/opt/tinyos-2.1.0/tos/interfaces/AMPacket.nc">
        <documentation loc="127:/opt/tinyos-2.1.0/tos/interfaces/AMPacket.nc">
          <short>&#10; Return the AM type of the AM packet.</short>
          <long>&#10; Return the AM type of the AM packet.&#10; If &#60;tt>amsg&#60;/tt> is not an AM packet, the results of this command&#10; are undefined.&#10;&#10; @param  'message_t* ONE amsg'   the packet&#10; @return        the AM type&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_id_t" ref="0x4039b8b0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x403a20c0"/>
                <typename><typedef-ref name="message_t" ref="0x403a2e50"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x403c38d0" loc="136:/opt/tinyos-2.1.0/tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x403a20c0"/>
                <typename><typedef-ref name="message_t" ref="0x403a2e50"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setType" ref="0x403c2580" loc="151:/opt/tinyos-2.1.0/tos/interfaces/AMPacket.nc">
        <documentation loc="138:/opt/tinyos-2.1.0/tos/interfaces/AMPacket.nc">
          <short>&#10; Set the AM type of the AM packet.</short>
          <long>&#10; Set the AM type of the AM packet.  As the AM type is set as part&#10; of sending with the AMSend interface, this command is not used&#10; for sending packets. Instead, it is used when a component, such&#10; as a queue, needs to buffer a request to send. The component can&#10; save the AM type in the packet then recover it when actually&#10; sending. If &#60;tt>amsg&#60;/tt> is not an AM packet, the results of&#10; this command are undefined.&#10; &#10; @param  'message_t* ONE amsg'    the packet&#10; @param  t       the AM type&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x403a20c0"/>
                <typename><typedef-ref name="message_t" ref="0x403a2e50"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_id_t" ref="0x4039b8b0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x403c2250" loc="151:/opt/tinyos-2.1.0/tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x403a20c0"/>
                <typename><typedef-ref name="message_t" ref="0x403a2e50"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="t" ref="0x403c2420" loc="151:/opt/tinyos-2.1.0/tos/interfaces/AMPacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_id_t" ref="0x4039b8b0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isForMe" ref="0x403badd8" loc="125:/opt/tinyos-2.1.0/tos/interfaces/AMPacket.nc">
        <documentation loc="112:/opt/tinyos-2.1.0/tos/interfaces/AMPacket.nc">
          <short>&#10; Return whether &#60;tt>amsg&#60;/tt> is destined for this mote.</short>
          <long>&#10; Return whether &#60;tt>amsg&#60;/tt> is destined for this mote. This is&#10; partially a shortcut for testing whether the return value of&#10; &#60;tt>destination&#60;/tt> and &#60;tt>address&#60;/tt> are the same. It&#10; may, however, include additional logic. For example, there&#10; may be an AM broadcast address: &#60;tt>destination&#60;/tt> will return&#10; the broadcast address, but &#60;tt>address&#60;/tt> will still be&#10; the mote's local address. If &#60;tt>amsg&#60;/tt> is not an AM packet,&#10; the results of this command are undefined.&#10;&#10; @param  'message_t* ONE amsg'   the packet&#10; @return        whether the packet is addressed to this AM stack&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x402c9b90"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x403a20c0"/>
                <typename><typedef-ref name="message_t" ref="0x403a2e50"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x403bac80" loc="125:/opt/tinyos-2.1.0/tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x403a20c0"/>
                <typename><typedef-ref name="message_t" ref="0x403a2e50"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setGroup" ref="0x403c0d08" loc="176:/opt/tinyos-2.1.0/tos/interfaces/AMPacket.nc">
        <documentation loc="168:/opt/tinyos-2.1.0/tos/interfaces/AMPacket.nc">
          <short>&#10; Set the AM group field of a packet.</short>
          <long>&#10; Set the AM group field of a packet. Note that most data link&#10; stacks will set this field automatically on a send request, which&#10; may overwrite changes made with this command.&#10;&#10; @param 'message_t* ONE amsg' the packet&#10; @param group the packet's new AM group value&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x403a20c0"/>
                <typename><typedef-ref name="message_t" ref="0x403a2e50"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_group_t" ref="0x4039bb08"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x403c09a8" loc="176:/opt/tinyos-2.1.0/tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x403a20c0"/>
                <typename><typedef-ref name="message_t" ref="0x403a2e50"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="grp" ref="0x403c0ba8" loc="176:/opt/tinyos-2.1.0/tos/interfaces/AMPacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_group_t" ref="0x4039bb08"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="localGroup" ref="0x403c85a0" loc="184:/opt/tinyos-2.1.0/tos/interfaces/AMPacket.nc">
        <documentation loc="178:/opt/tinyos-2.1.0/tos/interfaces/AMPacket.nc">
          <short>&#10; Provides the current AM group of this communication interface.</short>
          <long>&#10; Provides the current AM group of this communication interface.&#10;&#10; @return The AM group.&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_group_t" ref="0x4039bb08"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Init" loc="40:/opt/tinyos-2.1.0/tos/interfaces/Init.nc">
      <documentation loc="23:/opt/tinyos-2.1.0/tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; Revision:  $Revision: 1.11 $&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function command="" provided="0" name="init" ref="0x404340c8" loc="51:/opt/tinyos-2.1.0/tos/interfaces/Init.nc">
        <documentation loc="42:/opt/tinyos-2.1.0/tos/interfaces/Init.nc">
          <short>&#10; Initialize this component.</short>
          <long>&#10; Initialize this component. Initialization should not assume that&#10; any component is running: init() cannot call any commands besides&#10; those that initialize other components.  &#10; &#10; @return SUCCESS if initialized properly, FAIL otherwise.&#10; @see TEP 107: Boot Sequence&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="Init"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x402d2bd0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Atm128Calibrate" loc="26:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128Calibrate.nc">
      <documentation loc="11:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128Calibrate.nc">
        <short>&#10; This interface provides functions to compute ATmega128 configuration&#10; values that are clock-rate dependent.</short>
        <long>&#10; This interface provides functions to compute ATmega128 configuration&#10; values that are clock-rate dependent. These include:&#60;ul>&#10; &#60;li>the ADC prescaler value necessary for full precision&#10; &#60;li>values for the UBRR registers to achieve a specific baud rate&#10; &#60;li>any adjustment necessary to values passed to some platform-provided&#10;   AlarmMicroXXC components to get more accurate timing&#10; &#60;li>the number of cycles per 1/32768s (a typical implementation of this&#10;   interface will measure this value at boot time and use it to compute&#10;   the values above)&#10; &#60;/ul>&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <function command="" provided="0" name="baudrateRegister" ref="0x4043a4e8" loc="60:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128Calibrate.nc">
        <documentation loc="55:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128Calibrate.nc">
          <short>&#10; Return the value to use for the baudrate register to achieve a&#10; particular baud rate.</short>
          <long>&#10; Return the value to use for the baudrate register to achieve a&#10; particular baud rate. Assumes U2X=1 (the USART is being run at&#10; double speed).&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128Calibrate"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x4019ad68"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x4019b400"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="baudrate" ref="0x4043a390" loc="60:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128Calibrate.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x4019b400"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="cyclesPerJiffy" ref="0x4043ea78" loc="31:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128Calibrate.nc">
        <documentation loc="27:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128Calibrate.nc">
          <short>&#10; Return CPU cycles per 1/32768s.</short>
          <long>&#10; Return CPU cycles per 1/32768s.&#10; @return CPU cycles.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128Calibrate"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x4019ad68"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="calibrateMicro" ref="0x4043b168" loc="39:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128Calibrate.nc">
        <documentation loc="33:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128Calibrate.nc">
          <short>&#10; Convert n microseconds into a value suitable for use with&#10; AlarmMicro32C Alarms.</short>
          <long>&#10; Convert n microseconds into a value suitable for use with&#10; AlarmMicro32C Alarms.&#10; @param n Time in microseconds.&#10; @return AlarmMicro argument that best approximates n microseconds.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128Calibrate"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x4019b400"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x4019b400"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="n" ref="0x4043b010" loc="39:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128Calibrate.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x4019b400"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="actualMicro" ref="0x4043b830" loc="46:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128Calibrate.nc">
        <documentation loc="41:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128Calibrate.nc">
          <short>&#10; Convert values used by AlarmMicro32C Alarms into actual microseconds.</short>
          <long>&#10; Convert values used by AlarmMicro32C Alarms into actual microseconds.&#10; @param n A time expressed in AlarmMicro time units.&#10; @return Time in microseconds that corresponds to AlarmMicro argument n.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128Calibrate"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x4019b400"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x4019b400"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="n" ref="0x4043b6d8" loc="46:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128Calibrate.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x4019b400"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="adcPrescaler" ref="0x4043bd88" loc="53:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128Calibrate.nc">
        <documentation loc="48:/opt/tinyos-2.1.0/tos/chips/atm128/timer/Atm128Calibrate.nc">
          <short>&#10; Return the smallest ADC prescaler value which guaranteers full&#10; ADC precision.</short>
          <long>&#10; Return the smallest ADC prescaler value which guaranteers full&#10; ADC precision.&#10; @return ADC prescaler value.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128Calibrate"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="GeneralIO" loc="27:/opt/tinyos-2.1.0/tos/interfaces/GeneralIO.nc">
      <documentation loc="23:/opt/tinyos-2.1.0/tos/interfaces/GeneralIO.nc">
        <short>&#10; </short>
        <long>&#10; @author Joe Polastre&#10;</long>
      </documentation>
      <function command="" provided="0" name="makeInput" ref="0x40451b50" loc="33:/opt/tinyos-2.1.0/tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isInput" ref="0x40450010" loc="34:/opt/tinyos-2.1.0/tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x402c9b90"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="toggle" ref="0x404513c0" loc="31:/opt/tinyos-2.1.0/tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOutput" ref="0x404507e0" loc="36:/opt/tinyos-2.1.0/tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x402c9b90"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x40451780" loc="32:/opt/tinyos-2.1.0/tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x402c9b90"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="makeOutput" ref="0x404503e8" loc="35:/opt/tinyos-2.1.0/tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x40449ba8" loc="29:/opt/tinyos-2.1.0/tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clr" ref="0x40451010" loc="30:/opt/tinyos-2.1.0/tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Atm128AdcConfig" loc="19:/opt/tinyos-2.1.0/tos/chips/atm128/adc/Atm128AdcConfig.nc">
      <documentation loc="13:/opt/tinyos-2.1.0/tos/chips/atm128/adc/Atm128AdcConfig.nc">
        <short>&#10; Clients of the higher-level A/D system must implement this interface to&#10; specify which channel to sample, and with what parameters.</short>
        <long>&#10; Clients of the higher-level A/D system must implement this interface to&#10; specify which channel to sample, and with what parameters.&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <function command="" provided="0" name="getRefVoltage" ref="0x4047c650" loc="32:/opt/tinyos-2.1.0/tos/chips/atm128/adc/Atm128AdcConfig.nc">
        <documentation loc="27:/opt/tinyos-2.1.0/tos/chips/atm128/adc/Atm128AdcConfig.nc">
          <short>&#10; Obtain reference voltage&#10; </short>
          <long>&#10; Obtain reference voltage&#10; @return The reference voltage to use. Must be one of the &#10;   ATM128_ADC_VREF_xxx values from Atm128Adc.h.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128AdcConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getChannel" ref="0x4047c158" loc="25:/opt/tinyos-2.1.0/tos/chips/atm128/adc/Atm128AdcConfig.nc">
        <documentation loc="20:/opt/tinyos-2.1.0/tos/chips/atm128/adc/Atm128AdcConfig.nc">
          <short>&#10; Obtain channel.</short>
          <long>&#10; Obtain channel.&#10; @return The A/D channel to use. Must be one of the ATM128_ADC_SNGL_xxx&#10;   or ATM128_ADC_DIFF_xxx values from Atm128Adc.h.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128AdcConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getPrescaler" ref="0x4047cb40" loc="39:/opt/tinyos-2.1.0/tos/chips/atm128/adc/Atm128AdcConfig.nc">
        <documentation loc="34:/opt/tinyos-2.1.0/tos/chips/atm128/adc/Atm128AdcConfig.nc">
          <short>&#10; Obtain prescaler value.</short>
          <long>&#10; Obtain prescaler value.&#10; @return The prescaler value to use. Must be one of the &#10;   ATM128_ADC_PRESCALE_xxx values from Atm128Adc.h.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128AdcConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplCC1000" loc="48:/opt/tinyos-2.1.0/tos/chips/cc1000/HplCC1000.nc">
      <documentation loc="38:/opt/tinyos-2.1.0/tos/chips/cc1000/HplCC1000.nc">
        <short>&#10; Low-level CC1000 radio-access operations that must be provided by a&#10; platform wishing to use this CC1000 implementation.</short>
        <long>&#10; Low-level CC1000 radio-access operations that must be provided by a&#10; platform wishing to use this CC1000 implementation.&#10;&#10; @author Jason Hill&#10; @author David Gay&#10; @author Philip Levis&#10;</long>
      </documentation>
      <function command="" provided="0" name="init" ref="0x4047e010" loc="52:/opt/tinyos-2.1.0/tos/chips/cc1000/HplCC1000.nc">
        <documentation loc="49:/opt/tinyos-2.1.0/tos/chips/cc1000/HplCC1000.nc">
          <short>&#10; Initialize CC1K pins&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplCC1000"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="read" ref="0x4047ed60" loc="66:/opt/tinyos-2.1.0/tos/chips/cc1000/HplCC1000.nc">
        <documentation loc="61:/opt/tinyos-2.1.0/tos/chips/cc1000/HplCC1000.nc">
          <short>&#10; Read a value from a CC1000 register.</short>
          <long>&#10; Read a value from a CC1000 register.&#10; @param addr Which CC1000 register&#10; @return Value of register&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplCC1000"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="addr" ref="0x4047ec08" loc="66:/opt/tinyos-2.1.0/tos/chips/cc1000/HplCC1000.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="write" ref="0x4047e758" loc="59:/opt/tinyos-2.1.0/tos/chips/cc1000/HplCC1000.nc">
        <documentation loc="54:/opt/tinyos-2.1.0/tos/chips/cc1000/HplCC1000.nc">
          <short>&#10; Write a value to a CC1000 register.</short>
          <long>&#10; Write a value to a CC1000 register.&#10; @param addr Which CC1000 register&#10; @param data Value to write&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplCC1000"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="addr" ref="0x4047e408" loc="59:/opt/tinyos-2.1.0/tos/chips/cc1000/HplCC1000.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </variable>
          <variable name="data" ref="0x4047e5f8" loc="59:/opt/tinyos-2.1.0/tos/chips/cc1000/HplCC1000.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getLOCK" ref="0x4047d210" loc="72:/opt/tinyos-2.1.0/tos/chips/cc1000/HplCC1000.nc">
        <documentation loc="68:/opt/tinyos-2.1.0/tos/chips/cc1000/HplCC1000.nc">
          <short>&#10; Read the state of the CHP_OUT pin&#10; </short>
          <long>&#10; Read the state of the CHP_OUT pin&#10; @return State of CHP_OUT as a boolean (TRUE for high)&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplCC1000"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x402c9b90"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplCC1000Spi" loc="39:/opt/tinyos-2.1.0/tos/chips/cc1000/HplCC1000Spi.nc">
      <documentation loc="31:/opt/tinyos-2.1.0/tos/chips/cc1000/HplCC1000Spi.nc">
        <short>&#10; Interface to the CC1000 chip's serial bus.</short>
        <long>&#10; Interface to the CC1000 chip's serial bus. This isn't really an SPI,&#10; but the mica2 interface was done using the Atmega128 SPI hardware. Hence&#10; the name.&#10;&#10; @author Jaein Jeong&#10; @author Philip buonadonna&#10;</long>
      </documentation>
      <function command="" provided="0" name="isBufBusy" ref="0x4049b5e0" loc="51:/opt/tinyos-2.1.0/tos/chips/cc1000/HplCC1000Spi.nc">
        <documentation loc="47:/opt/tinyos-2.1.0/tos/chips/cc1000/HplCC1000Spi.nc">
          <short>&#10; Is write buffer busy with the last transmission?&#10; </short>
          <long>&#10; Is write buffer busy with the last transmission?&#10; @return TRUE if the buffer is busy, FALSE otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplCC1000Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x402c9b90"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="initSlave" ref="0x4049a848" loc="74:/opt/tinyos-2.1.0/tos/chips/cc1000/HplCC1000Spi.nc">
        <documentation loc="71:/opt/tinyos-2.1.0/tos/chips/cc1000/HplCC1000Spi.nc">
          <short>&#10; Initialise the interface to the CC1000 bus.</short>
          <long>&#10; Initialise the interface to the CC1000 bus.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplCC1000Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableIntr" ref="0x4049a418" loc="69:/opt/tinyos-2.1.0/tos/chips/cc1000/HplCC1000Spi.nc">
        <documentation loc="66:/opt/tinyos-2.1.0/tos/chips/cc1000/HplCC1000Spi.nc">
          <short>&#10; Disable CC1000 bus interrupts.</short>
          <long>&#10; Disable CC1000 bus interrupts.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplCC1000Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="writeByte" ref="0x4049b168" loc="45:/opt/tinyos-2.1.0/tos/chips/cc1000/HplCC1000Spi.nc">
        <documentation loc="41:/opt/tinyos-2.1.0/tos/chips/cc1000/HplCC1000Spi.nc">
          <short>&#10; Write a byte to the CC1000 bus.</short>
          <long>&#10; Write a byte to the CC1000 bus.&#10; @param data Byte to write.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplCC1000Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x4049b010" loc="45:/opt/tinyos-2.1.0/tos/chips/cc1000/HplCC1000Spi.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="enableIntr" ref="0x4049bf18" loc="64:/opt/tinyos-2.1.0/tos/chips/cc1000/HplCC1000Spi.nc">
        <documentation loc="59:/opt/tinyos-2.1.0/tos/chips/cc1000/HplCC1000Spi.nc">
          <short>&#10; Enable dataReady events on every byte sent or received from the CC1000&#10; bus.</short>
          <long>&#10; Enable dataReady events on every byte sent or received from the CC1000&#10; bus. After this is called, dataReady events will be signaled every&#10; 8 CC1000 data clocks.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplCC1000Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="txMode" ref="0x4049ac68" loc="79:/opt/tinyos-2.1.0/tos/chips/cc1000/HplCC1000Spi.nc">
        <documentation loc="76:/opt/tinyos-2.1.0/tos/chips/cc1000/HplCC1000Spi.nc">
          <short>&#10; Switch the interface to the CC1000 bus &#34;transmit&#34; mode.</short>
          <long>&#10; Switch the interface to the CC1000 bus &#34;transmit&#34; mode.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplCC1000Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="readByte" ref="0x4049baa8" loc="57:/opt/tinyos-2.1.0/tos/chips/cc1000/HplCC1000Spi.nc">
        <documentation loc="53:/opt/tinyos-2.1.0/tos/chips/cc1000/HplCC1000Spi.nc">
          <short>&#10; Get the last byte received from the CC1000 bus.</short>
          <long>&#10; Get the last byte received from the CC1000 bus.&#10; @return Last byte received.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplCC1000Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="rxMode" ref="0x404990c8" loc="84:/opt/tinyos-2.1.0/tos/chips/cc1000/HplCC1000Spi.nc">
        <documentation loc="81:/opt/tinyos-2.1.0/tos/chips/cc1000/HplCC1000Spi.nc">
          <short>&#10; Switch the interface to the CC1000 bus to &#34;receive&#34; mode.</short>
          <long>&#10; Switch the interface to the CC1000 bus to &#34;receive&#34; mode.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplCC1000Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="dataReady" ref="0x404996a8" loc="92:/opt/tinyos-2.1.0/tos/chips/cc1000/HplCC1000Spi.nc">
        <documentation loc="86:/opt/tinyos-2.1.0/tos/chips/cc1000/HplCC1000Spi.nc">
          <short>&#10; If enableIntr() is called, this event will be signaled every 8 CC1000&#10; data clocks.</short>
          <long>&#10; If enableIntr() is called, this event will be signaled every 8 CC1000&#10; data clocks. &#10; @param data In &#34;receive&#34; mode, the last value received from the CC1000 &#10;   bus.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplCC1000Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x40499550" loc="92:/opt/tinyos-2.1.0/tos/chips/cc1000/HplCC1000Spi.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Scheduler" loc="41:/opt/tinyos-2.1.0/tos/interfaces/Scheduler.nc">
      <documentation loc="31:/opt/tinyos-2.1.0/tos/interfaces/Scheduler.nc">
        <short> &#10; The interface to a TinyOS task scheduler.</short>
        <long> &#10; The interface to a TinyOS task scheduler.&#10;&#10; @author Philip Levis&#10; @date   January 19 2005&#10; @see TEP 106: Tasks and Schedulers&#10; @see TEP 107: Boot Sequence&#10;</long>
      </documentation>
      <function command="" provided="0" name="init" ref="0x402cd898" loc="46:/opt/tinyos-2.1.0/tos/interfaces/Scheduler.nc">
        <documentation loc="43:/opt/tinyos-2.1.0/tos/interfaces/Scheduler.nc">
          <short> &#10; Initialize the scheduler.</short>
          <long> &#10; Initialize the scheduler.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Scheduler"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="taskLoop" ref="0x402cf1c8" loc="61:/opt/tinyos-2.1.0/tos/interfaces/Scheduler.nc">
        <documentation loc="56:/opt/tinyos-2.1.0/tos/interfaces/Scheduler.nc">
          <short>&#10; Enter an infinite task-running loop.</short>
          <long>&#10; Enter an infinite task-running loop. Put the MCU into a low power&#10; state when the processor is idle (task queue empty, waiting for&#10; interrupts). This call never returns.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Scheduler"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="runNextTask" ref="0x402cdcd8" loc="54:/opt/tinyos-2.1.0/tos/interfaces/Scheduler.nc">
        <documentation loc="48:/opt/tinyos-2.1.0/tos/interfaces/Scheduler.nc">
          <short> &#10; Run the next task if one is waiting, otherwise return immediately.</short>
          <long> &#10; Run the next task if one is waiting, otherwise return immediately. &#10;&#10; @return        whether a task was run -- TRUE indicates a task&#10;                ran, FALSE indicates there was no task to run.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Scheduler"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x402c9b90"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="TaskBasic" loc="44:/opt/tinyos-2.1.0/tos/interfaces/TaskBasic.nc">
      <function command="" provided="0" name="postTask" ref="0x402d6138" loc="56:/opt/tinyos-2.1.0/tos/interfaces/TaskBasic.nc">
        <documentation loc="46:/opt/tinyos-2.1.0/tos/interfaces/TaskBasic.nc">
          <short>&#10; Post this task to the TinyOS scheduler.</short>
          <long>&#10; Post this task to the TinyOS scheduler. At some later time,&#10; depending on the scheduling policy, the scheduler will signal the&#10; &#60;tt>run()&#60;/tt> event. &#10;&#10; @return SUCCESS if task was successfuly&#10; posted; the semantics of a non-SUCCESS return value depend on the&#10; implementation of this interface (the class of task).&#10;</long>
        </documentation>
        <interfacedef-ref qname="TaskBasic"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x402d2bd0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="runTask" ref="0x402d6650" loc="64:/opt/tinyos-2.1.0/tos/interfaces/TaskBasic.nc">
        <documentation loc="58:/opt/tinyos-2.1.0/tos/interfaces/TaskBasic.nc">
          <short>&#10; Event from the scheduler to run this task.</short>
          <long>&#10; Event from the scheduler to run this task. Following the TinyOS&#10; concurrency model, the codes invoked from &#60;tt>run()&#60;/tt> signals&#10; execute atomically with respect to one another, but can be&#10; preempted by async commands/events.&#10;</long>
        </documentation>
        <interfacedef-ref qname="TaskBasic"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="McuSleep" loc="57:/opt/tinyos-2.1.0/tos/interfaces/McuSleep.nc">
      <documentation loc="46:/opt/tinyos-2.1.0/tos/interfaces/McuSleep.nc">
        <short>&#10; Interface to instruct the MCU to enter a low power state.</short>
        <long>&#10; Interface to instruct the MCU to enter a low power state. TEP112&#10; describes how an MCU computes this state and how the Scheduler uses&#10; this interface to manage system power draw.&#10; &#10; @author Philip Levis&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @date   Oct 26, 2005&#10;&#10;</long>
      </documentation>
      <function command="" provided="0" name="sleep" ref="0x4033b9b8" loc="59:/opt/tinyos-2.1.0/tos/interfaces/McuSleep.nc">
        <documentation loc="58:/opt/tinyos-2.1.0/tos/interfaces/McuSleep.nc">
          <short> Called by the scheduler to put the MCU to sleep.</short>
          <long> Called by the scheduler to put the MCU to sleep. *</long>
        </documentation>
        <interfacedef-ref qname="McuSleep"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="McuPowerOverride" loc="42:/opt/tinyos-2.1.0/tos/interfaces/McuPowerOverride.nc">
      <documentation loc="27:/opt/tinyos-2.1.0/tos/interfaces/McuPowerOverride.nc">
        <short>&#10; Interface to allow high-level components to set a lower bound for a&#10; microcontroller's low power state.</short>
        <long>&#10; Interface to allow high-level components to set a lower bound for a&#10; microcontroller's low power state. This is sometimes necessary,&#10; e.g., if a very low power state has a long wakeup latency that will&#10; violate application timing requirements. TEP 112 describes how&#10; TinyOS incorporates this information when the Scheduler tells&#10; the MCU to enter a low power state.&#10; &#10; @author Philip Levis&#10; @date   Oct 26, 2005&#10; @see    TEP 112: Microconroller Power Management&#10;</long>
      </documentation>
      <function command="" provided="0" name="lowestState" ref="0x4034fd68" loc="54:/opt/tinyos-2.1.0/tos/interfaces/McuPowerOverride.nc">
        <documentation loc="44:/opt/tinyos-2.1.0/tos/interfaces/McuPowerOverride.nc">
          <short>&#10; Called when computing the low power state, in order to allow&#10; a high-level component to institute a lower bound.</short>
          <long>&#10; Called when computing the low power state, in order to allow&#10; a high-level component to institute a lower bound. Because&#10; this command originates deep within the basic TinyOS scheduling&#10; mechanisms, it should be used very sparingly. Refer to TEP 112 for&#10; details.&#10;&#10; @return    the lowest power state the system can enter to meet the &#10;            requirements of this component&#10;</long>
        </documentation>
        <interfacedef-ref qname="McuPowerOverride"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="mcu_power_t" ref="0x40305798"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="McuPowerState" loc="38:/opt/tinyos-2.1.0/tos/interfaces/McuPowerState.nc">
      <documentation loc="27:/opt/tinyos-2.1.0/tos/interfaces/McuPowerState.nc">
        <short>&#10; Interface to instruct TinyOS that the low-power state of the MCU&#10; may have changed.</short>
        <long>&#10; Interface to instruct TinyOS that the low-power state of the MCU&#10; may have changed. TEP 112 describes how an MCU computes this state&#10; and how the Scheduler uses this interface to manage system power&#10; draw.&#10; &#10; @author Philip Levis&#10; @date   Oct 26, 2005&#10; @see    TEP 112: Microcontroller Power Management&#10;</long>
      </documentation>
      <function command="" provided="0" name="update" ref="0x4034ae70" loc="44:/opt/tinyos-2.1.0/tos/interfaces/McuPowerState.nc">
        <documentation loc="39:/opt/tinyos-2.1.0/tos/interfaces/McuPowerState.nc">
          <short> &#10; Called by any component to tell TinyOS that the MCU low&#10; power state may have changed.</short>
          <long> &#10; Called by any component to tell TinyOS that the MCU low&#10; power state may have changed. Generally, this should be&#10; called whenever a peripheral/timer is started/stopped. &#10;</long>
        </documentation>
        <interfacedef-ref qname="McuPowerState"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="PacketAcknowledgements" loc="33:/opt/tinyos-2.1.0/tos/interfaces/PacketAcknowledgements.nc">
      <documentation loc="23:/opt/tinyos-2.1.0/tos/interfaces/PacketAcknowledgements.nc">
        <short>&#10; This interface allows a component to enable or disable acknowledgments&#10; on a per-packet basis.</short>
        <long>&#10; This interface allows a component to enable or disable acknowledgments&#10; on a per-packet basis.&#10;&#10; @author Jonathan Hui&#10; @author Philip Levis&#10; @author Joe Polastre&#10; @date   June 21 2006&#10;</long>
      </documentation>
      <function command="" provided="0" name="requestAck" ref="0x40599f28" loc="48:/opt/tinyos-2.1.0/tos/interfaces/PacketAcknowledgements.nc">
        <documentation loc="35:/opt/tinyos-2.1.0/tos/interfaces/PacketAcknowledgements.nc">
          <short>&#10; Tell a protocol that when it sends this packet, it should use synchronous&#10; acknowledgments.</short>
          <long>&#10; Tell a protocol that when it sends this packet, it should use synchronous&#10; acknowledgments.&#10; The acknowledgment is synchronous as the caller can check whether the&#10; ack was received through the wasAcked() command as soon as a send operation&#10; completes.&#10;&#10; @param 'message_t* ONE msg' - A message which should be acknowledged when transmitted.&#10; @return SUCCESS if acknowledgements are enabled, EBUSY&#10; if the communication layer cannot enable them at this time, FAIL&#10; if it does not support them.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketAcknowledgements"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x402d2bd0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x403a20c0"/>
                <typename><typedef-ref name="message_t" ref="0x403a2e50"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x40599dd0" loc="48:/opt/tinyos-2.1.0/tos/interfaces/PacketAcknowledgements.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x403a20c0"/>
                <typename><typedef-ref name="message_t" ref="0x403a2e50"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="noAck" ref="0x40596a30" loc="60:/opt/tinyos-2.1.0/tos/interfaces/PacketAcknowledgements.nc">
        <documentation loc="50:/opt/tinyos-2.1.0/tos/interfaces/PacketAcknowledgements.nc">
          <short>&#10; Tell a protocol that when it sends this packet, it should not use&#10; synchronous acknowledgments.</short>
          <long>&#10; Tell a protocol that when it sends this packet, it should not use&#10; synchronous acknowledgments.&#10;&#10; @param 'message_t* ONE msg' - A message which should not be acknowledged when transmitted.&#10; @return SUCCESS if acknowledgements are disabled, EBUSY&#10; if the communication layer cannot disable them at this time, FAIL&#10; if it cannot support unacknowledged communication.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketAcknowledgements"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x402d2bd0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x403a20c0"/>
                <typename><typedef-ref name="message_t" ref="0x403a2e50"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x405968d8" loc="60:/opt/tinyos-2.1.0/tos/interfaces/PacketAcknowledgements.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x403a20c0"/>
                <typename><typedef-ref name="message_t" ref="0x403a2e50"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="wasAcked" ref="0x405944e0" loc="74:/opt/tinyos-2.1.0/tos/interfaces/PacketAcknowledgements.nc">
        <documentation loc="62:/opt/tinyos-2.1.0/tos/interfaces/PacketAcknowledgements.nc">
          <short>&#10; Tell a caller whether or not a transmitted packet was acknowledged.</short>
          <long>&#10; Tell a caller whether or not a transmitted packet was acknowledged.&#10; If acknowledgments on the packet had been disabled through noAck(),&#10; then the return value is undefined. If a packet&#10; layer does not support acknowledgements, this command must return always&#10; return FALSE.&#10;&#10; @param 'message_t* ONE msg' - A transmitted message.&#10; @return Whether the packet was acknowledged.&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketAcknowledgements"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x402c9b90"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x403a20c0"/>
                <typename><typedef-ref name="message_t" ref="0x403a2e50"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x40594388" loc="74:/opt/tinyos-2.1.0/tos/interfaces/PacketAcknowledgements.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x403a20c0"/>
                <typename><typedef-ref name="message_t" ref="0x403a2e50"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Send" loc="44:/opt/tinyos-2.1.0/tos/interfaces/Send.nc">
      <documentation loc="23:/opt/tinyos-2.1.0/tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; Revision:  $Revision: 1.11 $&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function command="" provided="0" name="send" ref="0x4059f678" loc="64:/opt/tinyos-2.1.0/tos/interfaces/Send.nc">
        <documentation loc="46:/opt/tinyos-2.1.0/tos/interfaces/Send.nc">
          <short> &#10; Send a packet with a data payload of &#60;tt>len&#60;/tt>.</short>
          <long> &#10; Send a packet with a data payload of &#60;tt>len&#60;/tt>. To determine&#10; the maximum available size, use the Packet interface of the&#10; component providing Send. If send returns SUCCESS, then the&#10; component will signal the sendDone event in the future; if send&#10; returns an error, it will not signal sendDone.  Note that a&#10; component may accept a send request which it later finds it&#10; cannot satisfy; in this case, it will signal sendDone with an&#10; appropriate error code.&#10;&#10; @param   'message_t* ONE msg'     the packet to send&#10; @param   len     the length of the packet payload&#10; @return          SUCCESS if the request was accepted and will issue&#10;                  a sendDone event, EBUSY if the component cannot accept&#10;                  the request now but will be able to later, FAIL&#10;                  if the stack is in a state that cannot accept requests&#10;                  (e.g., it's off).&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x402d2bd0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x403a20c0"/>
                <typename><typedef-ref name="message_t" ref="0x403a2e50"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x4059f338" loc="64:/opt/tinyos-2.1.0/tos/interfaces/Send.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x403a20c0"/>
                <typename><typedef-ref name="message_t" ref="0x403a2e50"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x4059f518" loc="64:/opt/tinyos-2.1.0/tos/interfaces/Send.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getPayload" ref="0x405ad208" loc="114:/opt/tinyos-2.1.0/tos/interfaces/Send.nc">
        <documentation loc="104:/opt/tinyos-2.1.0/tos/interfaces/Send.nc">
          <short>&#10; Return a pointer to a protocol's payload region in a packet which&#10; at least a certain length.</short>
          <long>&#10; Return a pointer to a protocol's payload region in a packet which&#10; at least a certain length.  If the payload region is smaller than&#10; the len parameter, then getPayload returns NULL. This command&#10; behaves identicallt to &#60;tt>Packet.getPayload&#60;/tt> and is&#10; included in this interface as a convenience.&#10;&#10; @param   'message_t* ONE msg'    the packet&#10; @return  'void* COUNT_NOK(len)'  a pointer to the packet's payload&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:1">
            <type-void size="I:1" alignment="I:1"></type-void>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x403a20c0"/>
                <typename><typedef-ref name="message_t" ref="0x403a2e50"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x405aee90" loc="114:/opt/tinyos-2.1.0/tos/interfaces/Send.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x403a20c0"/>
                <typename><typedef-ref name="message_t" ref="0x403a2e50"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x405ad088" loc="114:/opt/tinyos-2.1.0/tos/interfaces/Send.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="maxPayloadLength" ref="0x405ae930" loc="101:/opt/tinyos-2.1.0/tos/interfaces/Send.nc">
        <documentation loc="91:/opt/tinyos-2.1.0/tos/interfaces/Send.nc">
          <short>&#10; Return the maximum payload length that this communication layer&#10; can provide.</short>
          <long>&#10; Return the maximum payload length that this communication layer&#10; can provide. This command behaves identically to&#10; &#60;tt>Packet.maxPayloadLength&#60;/tt> and is included in this&#10; interface as a convenience.&#10;&#10; @return  the maximum payload length&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="cancel" ref="0x4059e2e0" loc="78:/opt/tinyos-2.1.0/tos/interfaces/Send.nc">
        <documentation loc="66:/opt/tinyos-2.1.0/tos/interfaces/Send.nc">
          <short>&#10; Cancel a requested transmission.</short>
          <long>&#10; Cancel a requested transmission. Returns SUCCESS if the &#10; transmission was cancelled properly (not sent in its&#10; entirety). Note that the component may not know&#10; if the send was successfully cancelled, if the radio is&#10; handling much of the logic; in this case, a component&#10; should be conservative and return an appropriate error code.&#10;&#10; @param   'message_t* ONE msg'    the packet whose transmission should be cancelled&#10; @return         SUCCESS if the packet was successfully cancelled, FAIL&#10;                 otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x402d2bd0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x403a20c0"/>
                <typename><typedef-ref name="message_t" ref="0x403a2e50"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x4059e188" loc="78:/opt/tinyos-2.1.0/tos/interfaces/Send.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x403a20c0"/>
                <typename><typedef-ref name="message_t" ref="0x403a2e50"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="sendDone" ref="0x405ae010" loc="89:/opt/tinyos-2.1.0/tos/interfaces/Send.nc">
        <documentation loc="80:/opt/tinyos-2.1.0/tos/interfaces/Send.nc">
          <short> &#10; Signaled in response to an accepted send request.</short>
          <long> &#10; Signaled in response to an accepted send request. &#60;tt>msg&#60;/tt>&#10; is the sent buffer, and &#60;tt>error&#60;/tt> indicates whether the&#10; send was succesful, and if not, the cause of the failure.&#10; &#10; @param 'message_t* ONE msg'   the message which was requested to send&#10; @param error SUCCESS if it was transmitted successfully, FAIL if&#10;              it was not, ECANCEL if it was cancelled via &#60;tt>cancel&#60;/tt>&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x403a20c0"/>
                <typename><typedef-ref name="message_t" ref="0x403a2e50"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x402d2bd0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x4059ec20" loc="89:/opt/tinyos-2.1.0/tos/interfaces/Send.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x403a20c0"/>
                <typename><typedef-ref name="message_t" ref="0x403a2e50"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="error" ref="0x4059ee18" loc="89:/opt/tinyos-2.1.0/tos/interfaces/Send.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x402d2bd0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SerialPacketInfo" loc="10:/opt/tinyos-2.1.0/tos/lib/serial/SerialPacketInfo.nc">
      <documentation loc="1:/opt/tinyos-2.1.0/tos/lib/serial/SerialPacketInfo.nc">
        <short>&#10; Accessor methods used by a serial dispatcher to communicate with various&#10; message_t link formats over a serial port.</short>
        <long>&#10; Accessor methods used by a serial dispatcher to communicate with various&#10; message_t link formats over a serial port.&#10;&#10; @author Philip Levis&#10; @author Ben Greenstein&#10; @date August 7 2005&#10;</long>
      </documentation>
      <function command="" provided="0" name="upperLength" ref="0x405e3f10" loc="31:/opt/tinyos-2.1.0/tos/lib/serial/SerialPacketInfo.nc">
        <documentation loc="24:/opt/tinyos-2.1.0/tos/lib/serial/SerialPacketInfo.nc">
          <short>&#10; Get the size of the payload (in bytes) given the size of the datalink&#10; packet (dataLinkLen) embedded in the message_t.</short>
          <long>&#10; Get the size of the payload (in bytes) given the size of the datalink&#10; packet (dataLinkLen) embedded in the message_t.&#10; @param msg A pointer to the message_t to interrogate. (unused)&#10; @param dataLinkLength The size of the datalink packet.&#10; @return Returns the size of the payload.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialPacketInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x403a20c0"/>
                <typename><typedef-ref name="message_t" ref="0x403a2e50"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x405e3b80" loc="31:/opt/tinyos-2.1.0/tos/lib/serial/SerialPacketInfo.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x403a20c0"/>
                <typename><typedef-ref name="message_t" ref="0x403a2e50"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="dataLinkLen" ref="0x405e3db0" loc="31:/opt/tinyos-2.1.0/tos/lib/serial/SerialPacketInfo.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="offset" ref="0x405d4c80" loc="15:/opt/tinyos-2.1.0/tos/lib/serial/SerialPacketInfo.nc">
        <documentation loc="11:/opt/tinyos-2.1.0/tos/lib/serial/SerialPacketInfo.nc">
          <short>&#10; Get the offset into a message_t where the header information begins.</short>
          <long>&#10; Get the offset into a message_t where the header information begins.&#10; @return Returns the offset.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialPacketInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="dataLinkLength" ref="0x405e3570" loc="23:/opt/tinyos-2.1.0/tos/lib/serial/SerialPacketInfo.nc">
        <documentation loc="16:/opt/tinyos-2.1.0/tos/lib/serial/SerialPacketInfo.nc">
          <short>&#10; Get the size of the datalink packet embedded in the message_t, in bytes.</short>
          <long>&#10; Get the size of the datalink packet embedded in the message_t, in bytes. &#10; This is the sum of the payload (upperLen) and the size of the link header.&#10; @param msg A pointer to the message_t to interrogate. (unused)&#10; @param upperLen The size of the payload.&#10; @return Returns the size of the datalink packet.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialPacketInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x403a20c0"/>
                <typename><typedef-ref name="message_t" ref="0x403a2e50"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x405e31f8" loc="23:/opt/tinyos-2.1.0/tos/lib/serial/SerialPacketInfo.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x403a20c0"/>
                <typename><typedef-ref name="message_t" ref="0x403a2e50"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="upperLen" ref="0x405e3410" loc="23:/opt/tinyos-2.1.0/tos/lib/serial/SerialPacketInfo.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="StdControl" loc="65:/opt/tinyos-2.1.0/tos/interfaces/StdControl.nc">
      <documentation loc="51:/opt/tinyos-2.1.0/tos/interfaces/StdControl.nc">
        <short>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This interface is used to switch between&#10; the on and off power states of the component providing it.</short>
        <long>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This interface is used to switch between&#10; the on and off power states of the component providing it.  A call to the&#10; &#60;code>start()&#60;/code> command is a request to switch a component into the&#10; on state, and a call to the &#60;code>stop()&#60;/code> is a request to switch a&#10; component into the off state.&#10;&#10; @author Joe Polastre&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="start" ref="0x405fea58" loc="74:/opt/tinyos-2.1.0/tos/interfaces/StdControl.nc">
        <documentation loc="67:/opt/tinyos-2.1.0/tos/interfaces/StdControl.nc">
          <short>&#10; Start this component and all of its subcomponents.</short>
          <long>&#10; Start this component and all of its subcomponents.&#10;&#10; @return SUCCESS if the component was either already on or was &#10;         successfully turned on&#60;br>&#10;         FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="StdControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x402d2bd0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x405fef20" loc="84:/opt/tinyos-2.1.0/tos/interfaces/StdControl.nc">
        <documentation loc="76:/opt/tinyos-2.1.0/tos/interfaces/StdControl.nc">
          <short>&#10; Stop the component and any pertinent subcomponents (not all&#10; subcomponents may be turned off due to wakeup timers, etc.).</short>
          <long>&#10; Stop the component and any pertinent subcomponents (not all&#10; subcomponents may be turned off due to wakeup timers, etc.).&#10;&#10; @return SUCCESS if the component was either already off or was &#10;         successfully turned off&#60;br>&#10;         FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="StdControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x402d2bd0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SerialFlush" loc="32:/opt/tinyos-2.1.0/tos/lib/serial/SerialFlush.nc">
      <documentation loc="23:/opt/tinyos-2.1.0/tos/lib/serial/SerialFlush.nc">
        <short>&#10; A basic interface to flush the serial port.</short>
        <long>&#10; A basic interface to flush the serial port.&#10;&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date January 23 2006&#10;&#10;</long>
      </documentation>
      <function event="" provided="0" name="flushDone" ref="0x405f70f8" loc="43:/opt/tinyos-2.1.0/tos/lib/serial/SerialFlush.nc">
        <documentation loc="40:/opt/tinyos-2.1.0/tos/lib/serial/SerialFlush.nc">
          <short> &#10; Split phase event to indicate that the serial hardware is now idle.</short>
          <long> &#10; Split phase event to indicate that the serial hardware is now idle.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialFlush"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="flush" ref="0x405f8ca8" loc="38:/opt/tinyos-2.1.0/tos/lib/serial/SerialFlush.nc">
        <documentation loc="34:/opt/tinyos-2.1.0/tos/lib/serial/SerialFlush.nc">
          <short> &#10; Request that the serial device signal when no more transmissions&#10; are pending (i.e., when the device is idle)&#10;</short>
        </documentation>
        <interfacedef-ref qname="SerialFlush"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SerialFrameComm" loc="36:/opt/tinyos-2.1.0/tos/lib/serial/SerialFrameComm.nc">
      <documentation loc="23:/opt/tinyos-2.1.0/tos/lib/serial/SerialFrameComm.nc">
        <short>&#10;&#10; This interface sits between a serial byte encoding component and a&#10; framing/packetizing component.</short>
        <long>&#10;&#10; This interface sits between a serial byte encoding component and a&#10; framing/packetizing component. It is to be used with framing protocols&#10; that place delimiters between frames. This interface separates the tasks&#10; of interpreting and coding delimiters and escape bytes from the rest of&#10; the wire protocol.&#10;&#10; @author Philip Levis&#10; @author Ben Greenstein&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <function command="" provided="0" name="putDelimiter" ref="0x405f36b8" loc="45:/opt/tinyos-2.1.0/tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="37:/opt/tinyos-2.1.0/tos/lib/serial/SerialFrameComm.nc">
          <short>&#10; Used by the upper layer to request that an interframe delimiter&#10; be sent.</short>
          <long>&#10; Used by the upper layer to request that an interframe delimiter&#10; be sent. The lower layer is responsible for the determining the&#10; actual byte(s) that must be sent to delimit the frame.&#10; @return Returns a error_t code that indicates if the lower layer&#10; was able to put an interframe delimiter to serial (SUCCESS) or&#10; not (FAIL).&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x402d2bd0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="resetSend" ref="0x405fd408" loc="61:/opt/tinyos-2.1.0/tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="56:/opt/tinyos-2.1.0/tos/lib/serial/SerialFrameComm.nc">
          <short>&#10; Requests that any underlying state associated with send-side frame&#10; delimiting or escaping be reset.</short>
          <long>&#10; Requests that any underlying state associated with send-side frame&#10; delimiting or escaping be reset. Used to initialize the lower&#10; layer's send path and/or cancel a frame mid-transmission.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="dataReceived" ref="0x405fc520" loc="83:/opt/tinyos-2.1.0/tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="76:/opt/tinyos-2.1.0/tos/lib/serial/SerialFrameComm.nc">
          <short>&#10; Signals the upper layer that a byte of data has been received&#10; from the serial connection.</short>
          <long>&#10; Signals the upper layer that a byte of data has been received&#10; from the serial connection. It passes this byte as a function&#10; parameter.  &#10; @param data The byte of data that has been received&#10; from the serial connection&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x405fc3c8" loc="83:/opt/tinyos-2.1.0/tos/lib/serial/SerialFrameComm.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="resetReceive" ref="0x405fd930" loc="68:/opt/tinyos-2.1.0/tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="63:/opt/tinyos-2.1.0/tos/lib/serial/SerialFrameComm.nc">
          <short>&#10; Requests that any underlying state associated with receive-side&#10; frame or escaping be reset.</short>
          <long>&#10; Requests that any underlying state associated with receive-side&#10; frame or escaping be reset. Used to initialize the lower layer's&#10; receive path and/or cancel a frame mid-reception when sync is lost.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="putData" ref="0x405f3de8" loc="54:/opt/tinyos-2.1.0/tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="47:/opt/tinyos-2.1.0/tos/lib/serial/SerialFrameComm.nc">
          <short>&#10;  Used by the upper layer to request that a byte of data be sent&#10;  over serial.</short>
          <long>&#10;  Used by the upper layer to request that a byte of data be sent&#10;  over serial.&#10;  @param data The byte to be sent&#10;  @return Returns an error_t code that indicates if the lower layer&#10;  has accepted the byte for sending (SUCCESS) or not (FAIL).&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x402d2bd0"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x405f3c90" loc="54:/opt/tinyos-2.1.0/tos/lib/serial/SerialFrameComm.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="putDone" ref="0x405fca28" loc="89:/opt/tinyos-2.1.0/tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="85:/opt/tinyos-2.1.0/tos/lib/serial/SerialFrameComm.nc">
          <short>&#10; Split-phase event to signal when the lower layer has finished writing&#10; the last request (either putDelimiter or putData) to serial.</short>
          <long>&#10; Split-phase event to signal when the lower layer has finished writing&#10; the last request (either putDelimiter or putData) to serial.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="delimiterReceived" ref="0x405fde90" loc="74:/opt/tinyos-2.1.0/tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="70:/opt/tinyos-2.1.0/tos/lib/serial/SerialFrameComm.nc">
          <short>&#10; Signals the upper layer that an inter-frame delimiter has been &#10; received from the serial connection.</short>
          <long>&#10; Signals the upper layer that an inter-frame delimiter has been &#10; received from the serial connection.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SendBytePacket" loc="42:/opt/tinyos-2.1.0/tos/lib/serial/SendBytePacket.nc">
      <documentation loc="23:/opt/tinyos-2.1.0/tos/lib/serial/SendBytePacket.nc">
        <short>&#10; This is an interface that a serial framing protocol provides and a serial&#10; dispatcher uses.</short>
        <long>&#10; This is an interface that a serial framing protocol provides and a serial&#10; dispatcher uses. The call sequence should be as follows:&#10; The dispatcher should call startSend, specifying the first byte to&#10; send. The framing protocol can then signal as many nextBytes as it&#10; wants/needs, to spool in the bytes. It continues to do so until it receives&#10; a sendComplete call, which will almost certainly happen within a nextByte&#10; signal (i.e., re-entrant to the framing protocol).&#10; This allows the framing protocol to buffer as many bytes as it needs to to meet&#10; timing requirements, jitter, etc. &#10;&#10; @author Philip Levis&#10; @author Ben Greenstein&#10; @date August 7 2005&#10;&#10;</long>
      </documentation>
      <function command="" provided="0" name="completeSend" ref="0x405f16a0" loc="60:/opt/tinyos-2.1.0/tos/lib/serial/SendBytePacket.nc">
        <documentation loc="53:/opt/tinyos-2.1.0/tos/lib/serial/SendBytePacket.nc">
          <short>&#10; The dispatcher must indicate when the end-of-packet has been reached and does&#10; so by calling completeSend.</short>
          <long>&#10; The dispatcher must indicate when the end-of-packet has been reached and does&#10; so by calling completeSend. The function may be called from within the&#10; implementation of a nextByte event.&#10; @return Returns an error_t code indicating whether the framer accepts&#10; this notification (SUCCESS) or not (FAIL).&#10;</long>
        </documentation>
        <interfacedef-ref qname="SendBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x402d2bd0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="nextByte" ref="0x405f1c68" loc="70:/opt/tinyos-2.1.0/tos/lib/serial/SendBytePacket.nc">
        <documentation loc="62:/opt/tinyos-2.1.0/tos/lib/serial/SendBytePacket.nc">
          <short>&#10; Used by the framer to request the next byte to transmit.</short>
          <long>&#10; Used by the framer to request the next byte to transmit. The&#10; framer may allocate a buffer to pre-spool some or all of a&#10; packet; or it may request and transmit a byte at a time. If there&#10; are no more bytes to send, the dispatcher must call completeSend&#10; before returning from this function.&#10; @return The dispatcher must return the next byte to transmit&#10;</long>
        </documentation>
        <interfacedef-ref qname="SendBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startSend" ref="0x405f1090" loc="51:/opt/tinyos-2.1.0/tos/lib/serial/SendBytePacket.nc">
        <documentation loc="43:/opt/tinyos-2.1.0/tos/lib/serial/SendBytePacket.nc">
          <short>&#10; The dispatcher may initiate a serial transmission by calling this function&#10; and passing the first byte to be transmitted.</short>
          <long>&#10; The dispatcher may initiate a serial transmission by calling this function&#10; and passing the first byte to be transmitted.&#10; @param first_byte The first byte to be transmitted.&#10; @return Returns an error_t code indicating either that the framer&#10; has the resources available to transmit the frame (SUCCESS) or&#10; not (EBUSY).&#10;</long>
        </documentation>
        <interfacedef-ref qname="SendBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x402d2bd0"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="first_byte" ref="0x405f4f28" loc="51:/opt/tinyos-2.1.0/tos/lib/serial/SendBytePacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="sendCompleted" ref="0x405f0420" loc="80:/opt/tinyos-2.1.0/tos/lib/serial/SendBytePacket.nc">
        <documentation loc="72:/opt/tinyos-2.1.0/tos/lib/serial/SendBytePacket.nc">
          <short>&#10; The framer signals sendCompleted to indicate that it is done transmitting a&#10; packet on the dispatcher's behalf.</short>
          <long>&#10; The framer signals sendCompleted to indicate that it is done transmitting a&#10; packet on the dispatcher's behalf. A non-SUCCESS error_t code indicates that&#10; there was a problem in transmission.&#10; @param error The framer indicates whether it has successfully&#10; accepted the entirety of the packet from the dispatcher (SUCCESS)&#10; or not (FAIL).&#10;</long>
        </documentation>
        <interfacedef-ref qname="SendBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x402d2bd0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="error" ref="0x405f02c8" loc="80:/opt/tinyos-2.1.0/tos/lib/serial/SendBytePacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x402d2bd0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ReceiveBytePacket" loc="37:/opt/tinyos-2.1.0/tos/lib/serial/ReceiveBytePacket.nc">
      <documentation loc="23:/opt/tinyos-2.1.0/tos/lib/serial/ReceiveBytePacket.nc">
        <short>&#10; This is the data interface that a serial protocol provides and&#10; a serial dispatcher uses.</short>
        <long>&#10; This is the data interface that a serial protocol provides and&#10; a serial dispatcher uses. The dispatcher expects the following pattern&#10; of calls: ((startPacket)+ (byteReceived)* (endPacket)+)*&#10; It should ignore any signals that do not follow this pattern.&#10; The interface is used to separate the state machine of the wire protocol&#10; from the complexities of dispatch.&#10;&#10; @author Philip Levis&#10; @author Ben Greenstein&#10; @date August 7 2005&#10;&#10;</long>
      </documentation>
      <function event="" provided="0" name="startPacket" ref="0x405ef630" loc="51:/opt/tinyos-2.1.0/tos/lib/serial/ReceiveBytePacket.nc">
        <documentation loc="40:/opt/tinyos-2.1.0/tos/lib/serial/ReceiveBytePacket.nc">
          <short>&#10; Signals the upper layer to indicate that reception of a frame has begun.</short>
          <long>&#10; Signals the upper layer to indicate that reception of a frame has begun.&#10; Used by the upper layer to prepare for packet reception. If the upper&#10; layer does not want to receive a packet (or isn't ready) it may&#10; return a non-SUCCESS code  such as EBUSY to the lower layer to discard&#10; the frame. The underlying layer may signal endPacket in response to&#10; such a discard request.&#10; @return Returns an error_t code indicating whether the&#10; dispatcher would like to receive a packet (SUCCESS), or not&#10; perhaps because it isn't ready (EBUSY).&#10;</long>
        </documentation>
        <interfacedef-ref qname="ReceiveBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x402d2bd0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="byteReceived" ref="0x405efe18" loc="58:/opt/tinyos-2.1.0/tos/lib/serial/ReceiveBytePacket.nc">
        <documentation loc="53:/opt/tinyos-2.1.0/tos/lib/serial/ReceiveBytePacket.nc">
          <short>&#10; Signals the upper layer that a byte of the encapsulated packet has been&#10; received.</short>
          <long>&#10; Signals the upper layer that a byte of the encapsulated packet has been&#10; received. Passes this byte as a parameter to the function.&#10; @param data A byte of the encapsulated packet that has been received.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ReceiveBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x405efcc0" loc="58:/opt/tinyos-2.1.0/tos/lib/serial/ReceiveBytePacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="endPacket" ref="0x405ff570" loc="69:/opt/tinyos-2.1.0/tos/lib/serial/ReceiveBytePacket.nc">
        <documentation loc="59:/opt/tinyos-2.1.0/tos/lib/serial/ReceiveBytePacket.nc">
          <short>&#10; Signalled to indicate that a packet encapsulated withing a serial&#10; frame has been received.</short>
          <long>&#10; Signalled to indicate that a packet encapsulated withing a serial&#10; frame has been received. SUCCESS should be passed by the lower layer&#10; following verification that the packet has been received correctly.&#10; A value of error_t indicating an error should be passed when the lower&#10; layer's verification test fails or when the lower layer loses sync.&#10; @param result An error_t code indicating whether the framer has&#10; passed all bytes of an encapsulated packet it receives from&#10; serial to the dispatcher (SUCCESS) or not (FAIL).&#10;</long>
        </documentation>
        <interfacedef-ref qname="ReceiveBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x402d2bd0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="result" ref="0x405ff418" loc="69:/opt/tinyos-2.1.0/tos/lib/serial/ReceiveBytePacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x402d2bd0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="UartStream" loc="37:/opt/tinyos-2.1.0/tos/interfaces/UartStream.nc">
      <documentation loc="32:/opt/tinyos-2.1.0/tos/interfaces/UartStream.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archedrock.com>&#10; @version $Revision: 1.5 $ $Date: 2008/06/04 03:00:35 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="send" ref="0x406a8480" loc="48:/opt/tinyos-2.1.0/tos/interfaces/UartStream.nc">
        <documentation loc="39:/opt/tinyos-2.1.0/tos/interfaces/UartStream.nc">
          <short>&#10; Begin transmission of a UART stream.</short>
          <long>&#10; Begin transmission of a UART stream. If SUCCESS is returned,&#10; &#60;code>sendDone&#60;/code> will be signalled when transmission is&#10; complete.&#10;&#10; @param 'uint8_t* COUNT(len) buf' Buffer for bytes to send.&#10; @param len Number of bytes to send.&#10; @return SUCCESS if request was accepted, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x402d2bd0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x4019ad68"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="buf" ref="0x406a8130" loc="48:/opt/tinyos-2.1.0/tos/interfaces/UartStream.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x406a8320" loc="48:/opt/tinyos-2.1.0/tos/interfaces/UartStream.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x4019ad68"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="receivedByte" ref="0x406a5908" loc="79:/opt/tinyos-2.1.0/tos/interfaces/UartStream.nc">
        <documentation loc="74:/opt/tinyos-2.1.0/tos/interfaces/UartStream.nc">
          <short>&#10; Signals the receipt of a byte.</short>
          <long>&#10; Signals the receipt of a byte.&#10;&#10; @param byte The byte received.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="byte" ref="0x406a57b0" loc="79:/opt/tinyos-2.1.0/tos/interfaces/UartStream.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="receive" ref="0x406a4170" loc="90:/opt/tinyos-2.1.0/tos/interfaces/UartStream.nc">
        <documentation loc="81:/opt/tinyos-2.1.0/tos/interfaces/UartStream.nc">
          <short>&#10; Begin reception of a UART stream.</short>
          <long>&#10; Begin reception of a UART stream. If SUCCESS is returned,&#10; &#60;code>receiveDone&#60;/code> will be signalled when reception is&#10; complete.&#10;&#10; @param 'uint8_t* COUNT(len) buf' Buffer for received bytes.&#10; @param len Number of bytes to receive.&#10; @return SUCCESS if request was accepted, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x402d2bd0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x4019ad68"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="buf" ref="0x406a5dc0" loc="90:/opt/tinyos-2.1.0/tos/interfaces/UartStream.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x406a4010" loc="90:/opt/tinyos-2.1.0/tos/interfaces/UartStream.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x4019ad68"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="enableReceiveInterrupt" ref="0x406a7cc0" loc="65:/opt/tinyos-2.1.0/tos/interfaces/UartStream.nc">
        <documentation loc="59:/opt/tinyos-2.1.0/tos/interfaces/UartStream.nc">
          <short>&#10; Enable the receive byte interrupt.</short>
          <long>&#10; Enable the receive byte interrupt. The &#60;code>receive&#60;/code> event&#10; is signalled each time a byte is received.&#10;&#10; @return SUCCESS if interrupt was enabled, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x402d2bd0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="receiveDone" ref="0x406a3010" loc="99:/opt/tinyos-2.1.0/tos/interfaces/UartStream.nc">
        <documentation loc="92:/opt/tinyos-2.1.0/tos/interfaces/UartStream.nc">
          <short>&#10; Signal completion of receiving a stream.</short>
          <long>&#10; Signal completion of receiving a stream.&#10;&#10; @param 'uint8_t* COUNT(len) buf' Buffer for bytes received.&#10; @param len Number of bytes received.&#10; @param error SUCCESS if the reception was successful, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x4019ad68"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x402d2bd0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="buf" ref="0x406a4a98" loc="99:/opt/tinyos-2.1.0/tos/interfaces/UartStream.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x406a4c88" loc="99:/opt/tinyos-2.1.0/tos/interfaces/UartStream.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x4019ad68"/></typename>
            </type-int>
          </variable>
          <variable name="error" ref="0x406a4e80" loc="99:/opt/tinyos-2.1.0/tos/interfaces/UartStream.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x402d2bd0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="disableReceiveInterrupt" ref="0x406a52f8" loc="72:/opt/tinyos-2.1.0/tos/interfaces/UartStream.nc">
        <documentation loc="67:/opt/tinyos-2.1.0/tos/interfaces/UartStream.nc">
          <short>&#10; Disable the receive byte interrupt.</short>
          <long>&#10; Disable the receive byte interrupt.&#10;&#10; @return SUCCESS if interrupt was disabled, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x402d2bd0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="sendDone" ref="0x406a7370" loc="57:/opt/tinyos-2.1.0/tos/interfaces/UartStream.nc">
        <documentation loc="50:/opt/tinyos-2.1.0/tos/interfaces/UartStream.nc">
          <short>&#10; Signal completion of sending a stream.</short>
          <long>&#10; Signal completion of sending a stream.&#10;&#10; @param 'uint8_t* COUNT(len) buf' Bytes sent.&#10; @param len Number of bytes sent.&#10; @param error SUCCESS if the transmission was successful, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x4019ad68"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x402d2bd0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="buf" ref="0x406a8d90" loc="57:/opt/tinyos-2.1.0/tos/interfaces/UartStream.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x406a7010" loc="57:/opt/tinyos-2.1.0/tos/interfaces/UartStream.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x4019ad68"/></typename>
            </type-int>
          </variable>
          <variable name="error" ref="0x406a7208" loc="57:/opt/tinyos-2.1.0/tos/interfaces/UartStream.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x402d2bd0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="UartByte" loc="37:/opt/tinyos-2.1.0/tos/interfaces/UartByte.nc">
      <documentation loc="32:/opt/tinyos-2.1.0/tos/interfaces/UartByte.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archedrock.com>&#10; @version $Revision: 1.5 $ $Date: 2008/06/04 03:00:35 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="send" ref="0x406bd010" loc="46:/opt/tinyos-2.1.0/tos/interfaces/UartByte.nc">
        <documentation loc="39:/opt/tinyos-2.1.0/tos/interfaces/UartByte.nc">
          <short>&#10; Send a single uart byte.</short>
          <long>&#10; Send a single uart byte. The call blocks until it is ready to&#10; accept another byte for sending.&#10;&#10; @param byte The byte to send.&#10; @return SUCCESS if byte was sent, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x402d2bd0"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="byte" ref="0x406c0e70" loc="46:/opt/tinyos-2.1.0/tos/interfaces/UartByte.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="receive" ref="0x406bd8a8" loc="56:/opt/tinyos-2.1.0/tos/interfaces/UartByte.nc">
        <documentation loc="48:/opt/tinyos-2.1.0/tos/interfaces/UartByte.nc">
          <short>&#10; Receive a single uart byte.</short>
          <long>&#10; Receive a single uart byte. The call blocks until a byte is&#10; received.&#10;&#10; @param 'uint8_t* ONE byte' Where to place received byte.&#10; @param timeout How long in byte times to wait.&#10; @return SUCCESS if a byte was received, FAIL if timed out.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x402d2bd0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="byte" ref="0x406bd540" loc="56:/opt/tinyos-2.1.0/tos/interfaces/UartByte.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="timeout" ref="0x406bd748" loc="56:/opt/tinyos-2.1.0/tos/interfaces/UartByte.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Counter" loc="46:/opt/tinyos-2.1.0/tos/lib/timer/Counter.nc">
      <documentation loc="25:/opt/tinyos-2.1.0/tos/lib/timer/Counter.nc">
        <short>&#10; A Counter counts time in some units and in some width, signaling&#10; overflow.</short>
        <long>&#10; A Counter counts time in some units and in some width, signaling&#10; overflow.&#10;&#10; &#60;p>A Counter is parameterised by its &#34;precision&#34; (milliseconds,&#10; microseconds, etc), identified by a type. This prevents, e.g.,&#10; unintentionally mixing components expecting milliseconds with those&#10; expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>A Counter's second parameter is its &#34;width&#34;, i.e., the number of&#10; bits used to represent time values. Width is indicated by including&#10; the appropriate size integer type as a Counter parameter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Counter.&#10; @param size_type An integer type representing time values for this Counter.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x406b73c8" loc="46:/opt/tinyos-2.1.0/tos/lib/timer/Counter.nc">
          <interfacedef-ref qname="Counter"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x406b73c8"/></type-var>
        </typedef>
        <typedef name="size_type" ref="0x406b7530" loc="46:/opt/tinyos-2.1.0/tos/lib/timer/Counter.nc">
          <interfacedef-ref qname="Counter"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x406b7530"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="get" ref="0x406b7a18" loc="53:/opt/tinyos-2.1.0/tos/lib/timer/Counter.nc">
        <documentation loc="48:/opt/tinyos-2.1.0/tos/lib/timer/Counter.nc">
          <short> &#10; Return counter value.</short>
          <long> &#10; Return counter value. Counters start at boot - some time sources may&#10; stop counting while the processor is in low-power mode.&#10; @return Current counter value.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x406b7530"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clearOverflow" ref="0x406cc510" loc="65:/opt/tinyos-2.1.0/tos/lib/timer/Counter.nc">
        <documentation loc="62:/opt/tinyos-2.1.0/tos/lib/timer/Counter.nc">
          <short>&#10; Cancel a pending overflow interrupt.</short>
          <long>&#10; Cancel a pending overflow interrupt.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOverflowPending" ref="0x406cc010" loc="60:/opt/tinyos-2.1.0/tos/lib/timer/Counter.nc">
        <documentation loc="55:/opt/tinyos-2.1.0/tos/lib/timer/Counter.nc">
          <short> &#10; Return TRUE if an overflow event will occur after the outermost atomic&#10; block is exits.</short>
          <long> &#10; Return TRUE if an overflow event will occur after the outermost atomic&#10; block is exits.  FALSE otherwise.&#10; @return Counter pending overflow status.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x402c9b90"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="overflow" ref="0x406cc938" loc="71:/opt/tinyos-2.1.0/tos/lib/timer/Counter.nc">
        <documentation loc="67:/opt/tinyos-2.1.0/tos/lib/timer/Counter.nc">
          <short>&#10; Signals that the current time has overflowed.</short>
          <long>&#10; Signals that the current time has overflowed.  That is, the current&#10; time has wrapped around from its maximum value to zero.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplAtm128Uart" loc="38:/opt/tinyos-2.1.0/tos/chips/atm128/HplAtm128Uart.nc">
      <documentation loc="32:/opt/tinyos-2.1.0/tos/chips/atm128/HplAtm128Uart.nc">
        <short>&#10; </short>
        <long>&#10; @author Alec Woo &#60;awoo@archrock.com>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2006/12/12 18:23:03 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="isTxEmpty" ref="0x406c3010" loc="44:/opt/tinyos-2.1.0/tos/chips/atm128/HplAtm128Uart.nc">
        <interfacedef-ref qname="HplAtm128Uart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x402c9b90"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableRxIntr" ref="0x406c4788" loc="42:/opt/tinyos-2.1.0/tos/chips/atm128/HplAtm128Uart.nc">
        <interfacedef-ref qname="HplAtm128Uart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x402d2bd0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="rxDone" ref="0x406c25f8" loc="49:/opt/tinyos-2.1.0/tos/chips/atm128/HplAtm128Uart.nc">
        <interfacedef-ref qname="HplAtm128Uart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x406c24a0" loc="49:/opt/tinyos-2.1.0/tos/chips/atm128/HplAtm128Uart.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="txDone" ref="0x406c3cc8" loc="47:/opt/tinyos-2.1.0/tos/chips/atm128/HplAtm128Uart.nc">
        <interfacedef-ref qname="HplAtm128Uart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableTxIntr" ref="0x406c8ef8" loc="40:/opt/tinyos-2.1.0/tos/chips/atm128/HplAtm128Uart.nc">
        <interfacedef-ref qname="HplAtm128Uart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x402d2bd0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableTxIntr" ref="0x406c4350" loc="41:/opt/tinyos-2.1.0/tos/chips/atm128/HplAtm128Uart.nc">
        <interfacedef-ref qname="HplAtm128Uart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x402d2bd0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableRxIntr" ref="0x406c4bc8" loc="43:/opt/tinyos-2.1.0/tos/chips/atm128/HplAtm128Uart.nc">
        <interfacedef-ref qname="HplAtm128Uart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x402d2bd0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isRxEmpty" ref="0x406c3410" loc="45:/opt/tinyos-2.1.0/tos/chips/atm128/HplAtm128Uart.nc">
        <interfacedef-ref qname="HplAtm128Uart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x402c9b90"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="tx" ref="0x406c3918" loc="46:/opt/tinyos-2.1.0/tos/chips/atm128/HplAtm128Uart.nc">
        <interfacedef-ref qname="HplAtm128Uart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x406c37c0" loc="46:/opt/tinyos-2.1.0/tos/chips/atm128/HplAtm128Uart.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="rx" ref="0x406c20c8" loc="48:/opt/tinyos-2.1.0/tos/chips/atm128/HplAtm128Uart.nc">
        <interfacedef-ref qname="HplAtm128Uart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplAtm128TimerCtrl16" loc="33:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128TimerCtrl16.nc">
      <documentation loc="25:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128TimerCtrl16.nc">
        <short>&#10; HPL Interface to Atmega128 16-bit timer control registers&#10;&#10; </short>
        <long>&#10; HPL Interface to Atmega128 16-bit timer control registers&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <function command="" provided="0" name="getInterruptFlag" ref="0x40755620" loc="49:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128TimerCtrl16.nc">
        <documentation loc="48:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128TimerCtrl16.nc">
          <short>Interrupt flag register: Direct access</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerCtrl16"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:1" alignment="I:1"><union-ref ref="0x403398e0"/>
            <typename><typedef-ref name="Atm128_ETIFR_t" ref="0x40339b08"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setCtrlCapture" ref="0x40756058" loc="41:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128TimerCtrl16.nc">
        <interfacedef-ref qname="HplAtm128TimerCtrl16"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:1" alignment="I:1"><union-ref ref="0x4032bc30"/>
              <typename><typedef-ref name="Atm128TimerCtrlCapture_t" ref="0x4032be58"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="control" ref="0x40757ee8" loc="41:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128TimerCtrl16.nc">
            <type-tag size="I:1" alignment="I:1"><union-ref ref="0x4032bc30"/>
              <typename><typedef-ref name="Atm128TimerCtrlCapture_t" ref="0x4032be58"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getInterruptMask" ref="0x40756b38" loc="45:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128TimerCtrl16.nc">
        <documentation loc="44:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128TimerCtrl16.nc">
          <short>Interrupt mask register: Direct access</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerCtrl16"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:1" alignment="I:1"><union-ref ref="0x40332398"/>
            <typename><typedef-ref name="Atm128_ETIMSK_t" ref="0x403325c0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getCtrlCompare" ref="0x40744998" loc="36:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128TimerCtrl16.nc">
        <documentation loc="35:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128TimerCtrl16.nc">
          <short>Timer control registers: Direct access</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerCtrl16"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:1" alignment="I:1"><union-ref ref="0x40327aa8"/>
            <typename><typedef-ref name="Atm128TimerCtrlCompare_t" ref="0x40327cd0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setInterruptMask" ref="0x40755168" loc="46:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128TimerCtrl16.nc">
        <interfacedef-ref qname="HplAtm128TimerCtrl16"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:1" alignment="I:1"><union-ref ref="0x40332398"/>
              <typename><typedef-ref name="Atm128_ETIMSK_t" ref="0x403325c0"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="mask" ref="0x40755010" loc="46:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128TimerCtrl16.nc">
            <type-tag size="I:1" alignment="I:1"><union-ref ref="0x40332398"/>
              <typename><typedef-ref name="Atm128_ETIMSK_t" ref="0x403325c0"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setInterruptFlag" ref="0x40755c30" loc="50:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128TimerCtrl16.nc">
        <interfacedef-ref qname="HplAtm128TimerCtrl16"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:1" alignment="I:1"><union-ref ref="0x403398e0"/>
              <typename><typedef-ref name="Atm128_ETIFR_t" ref="0x40339b08"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="flags" ref="0x40755ad8" loc="50:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128TimerCtrl16.nc">
            <type-tag size="I:1" alignment="I:1"><union-ref ref="0x403398e0"/>
              <typename><typedef-ref name="Atm128_ETIFR_t" ref="0x40339b08"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getCtrlClock" ref="0x407573b0" loc="38:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128TimerCtrl16.nc">
        <interfacedef-ref qname="HplAtm128TimerCtrl16"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:1" alignment="I:1"><union-ref ref="0x403312c0"/>
            <typename><typedef-ref name="Atm128TimerCtrlClock_t" ref="0x403314e8"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getCtrlCapture" ref="0x40744eb8" loc="37:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128TimerCtrl16.nc">
        <interfacedef-ref qname="HplAtm128TimerCtrl16"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:1" alignment="I:1"><union-ref ref="0x4032bc30"/>
            <typename><typedef-ref name="Atm128TimerCtrlCapture_t" ref="0x4032be58"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setCtrlCompare" ref="0x407579f8" loc="40:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128TimerCtrl16.nc">
        <interfacedef-ref qname="HplAtm128TimerCtrl16"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:1" alignment="I:1"><union-ref ref="0x40327aa8"/>
              <typename><typedef-ref name="Atm128TimerCtrlCompare_t" ref="0x40327cd0"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="control" ref="0x407578a0" loc="40:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128TimerCtrl16.nc">
            <type-tag size="I:1" alignment="I:1"><union-ref ref="0x40327aa8"/>
              <typename><typedef-ref name="Atm128TimerCtrlCompare_t" ref="0x40327cd0"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setCtrlClock" ref="0x40756678" loc="42:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128TimerCtrl16.nc">
        <interfacedef-ref qname="HplAtm128TimerCtrl16"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:1" alignment="I:1"><union-ref ref="0x403312c0"/>
              <typename><typedef-ref name="Atm128TimerCtrlClock_t" ref="0x403314e8"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="control" ref="0x40756520" loc="42:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128TimerCtrl16.nc">
            <type-tag size="I:1" alignment="I:1"><union-ref ref="0x403312c0"/>
              <typename><typedef-ref name="Atm128TimerCtrlClock_t" ref="0x403314e8"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplAtm128Capture" loc="31:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Capture.nc">
      <documentation loc="25:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Capture.nc">
        <short>&#10; HPL Interface to Atmega128 capture capabilities.</short>
        <long>&#10; HPL Interface to Atmega128 capture capabilities.&#10; @param size_type Integer type of capture register&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="size_type" ref="0x40743dd8" loc="31:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Capture.nc">
          <interfacedef-ref qname="HplAtm128Capture"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x40743dd8"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="setEdge" ref="0x407508f0" loc="79:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Capture.nc">
        <documentation loc="75:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Capture.nc">
          <short> &#10; Sets the capture edge.</short>
          <long> &#10; Sets the capture edge.&#10; @param up   TRUE = detect rising edge, FALSE = detect falling edge&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x402c9b90"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="up" ref="0x40750798" loc="79:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Capture.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x402c9b90"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="test" ref="0x40751ec8" loc="67:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Capture.nc">
        <documentation loc="63:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Capture.nc">
          <short> &#10; Did a capture interrupt occur?&#10; </short>
          <long> &#10; Did a capture interrupt occur?&#10; @return TRUE if capture triggered, FALSE otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x402c9b90"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x407532f0" loc="38:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Capture.nc">
        <documentation loc="34:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Capture.nc">
          <short> &#10; Get the time to be captured.</short>
          <long> &#10; Get the time to be captured.&#10; @return  the capture time&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x40743dd8"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="captured" ref="0x40753e40" loc="51:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Capture.nc">
        <documentation loc="47:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Capture.nc">
          <short> &#10; Signalled on capture interrupt.</short>
          <long> &#10; Signalled on capture interrupt.&#10; @param t     the time of the capture event&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x40743dd8"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t" ref="0x40753ce8" loc="51:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Capture.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x40743dd8"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="reset" ref="0x407512a8" loc="55:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Capture.nc">
        <documentation loc="54:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Capture.nc">
          <short> Clear the capture interrupt flag.</short>
          <long> Clear the capture interrupt flag. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOn" ref="0x40750368" loc="73:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Capture.nc">
        <documentation loc="69:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Capture.nc">
          <short> &#10; Is capture interrupt on? &#10; </short>
          <long> &#10; Is capture interrupt on? &#10; @return TRUE if capture enabled, FALSE otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x402c9b90"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x40753868" loc="44:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Capture.nc">
        <documentation loc="40:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Capture.nc">
          <short> &#10; Set the time to be captured.</short>
          <long> &#10; Set the time to be captured.&#10; @param t     the time of the next capture event&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x40743dd8"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t" ref="0x40753710" loc="44:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Capture.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x40743dd8"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="start" ref="0x407516b0" loc="58:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Capture.nc">
        <documentation loc="57:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Capture.nc">
          <short> Enable the capture interrupt.</short>
          <long> Enable the capture interrupt. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x40751aa8" loc="61:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Capture.nc">
        <documentation loc="60:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Capture.nc">
          <short> Turn off capture interrupts.</short>
          <long> Turn off capture interrupts. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplAtm128Compare" loc="32:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Compare.nc">
      <documentation loc="25:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Compare.nc">
        <short>&#10; HPL Interface to Atmega128 compare registers.</short>
        <long>&#10; HPL Interface to Atmega128 compare registers.&#10; @param size_type Integer type of compare register&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="size_type" ref="0x4074fe10" loc="32:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Compare.nc">
          <interfacedef-ref qname="HplAtm128Compare"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x4074fe10"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="test" ref="0x40763d60" loc="65:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Compare.nc">
        <documentation loc="61:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Compare.nc">
          <short> &#10; Did compare interrupt occur? &#10; </short>
          <long> &#10; Did compare interrupt occur? &#10; @return TRUE if compare triggered, FALSE otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x402c9b90"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="fired" ref="0x40764ce8" loc="49:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Compare.nc">
        <documentation loc="48:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Compare.nc">
          <short> Signalled on  interrupt.</short>
          <long> Signalled on  interrupt. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x40764320" loc="39:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Compare.nc">
        <documentation loc="35:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Compare.nc">
          <short> &#10; Get the compare time to fire on.</short>
          <long> &#10; Get the compare time to fire on.&#10; @return  the compare time value&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x4074fe10"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="reset" ref="0x40763138" loc="53:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Compare.nc">
        <documentation loc="52:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Compare.nc">
          <short> Clear the compare interrupt flag.</short>
          <long> Clear the compare interrupt flag. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOn" ref="0x407621d8" loc="71:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Compare.nc">
        <documentation loc="67:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Compare.nc">
          <short> &#10; Is compare interrupt on?&#10; </short>
          <long> &#10; Is compare interrupt on?&#10; @return TRUE if compare enabled, FALSE otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x402c9b90"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x407648a8" loc="45:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Compare.nc">
        <documentation loc="41:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Compare.nc">
          <short> &#10; Set the compare time to fire on.</short>
          <long> &#10; Set the compare time to fire on.&#10; @param t     the compare time to set&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x4074fe10"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t" ref="0x40764750" loc="45:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Compare.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x4074fe10"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="start" ref="0x40763540" loc="56:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Compare.nc">
        <documentation loc="55:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Compare.nc">
          <short> Enable the compare interrupt.</short>
          <long> Enable the compare interrupt. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x40763938" loc="59:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Compare.nc">
        <documentation loc="58:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Compare.nc">
          <short> Turn off comparee interrupts.</short>
          <long> Turn off comparee interrupts. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplAtm128Timer" loc="46:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Timer.nc">
      <documentation loc="25:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Timer.nc">
        <short>&#10; Basic interface to the hardware timers on an ATmega128.</short>
        <long>&#10; Basic interface to the hardware timers on an ATmega128.  &#10; &#60;p>&#10; This interface is designed to be independent of whether the underlying &#10; hardware is an 8-bit or 16-bit wide counter.  As such, timer_size is &#10; specified via a generics parameter.  Because this is exposing a common &#10; subset of functionality that all ATmega128 hardware timers share, all &#10; that is exposed is access to the overflow capability.  Compare and capture&#10; functionality are exposed on separate interfaces to allow easy &#10; configurability via wiring.&#10; &#60;p>&#10; This interface provides four major groups of functionality:&#60;ol>&#10;      &#60;li>Timer Value: get/set current time&#10;      &#60;li>Overflow Interrupt event&#10;      &#60;li>Control of Overflow Interrupt: start/stop/clear...&#10;      &#60;li>Timer Initialization: turn on/off clock source&#10; &#60;/ol>&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="timer_size" ref="0x4074d9f8" loc="46:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Timer.nc">
          <interfacedef-ref qname="HplAtm128Timer"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="timer_size" scoped="" ref="0x4074d9f8"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="off" ref="0x407461c8" loc="89:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="88:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> Turn off the clock.</short>
          <long> Turn off the clock. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="test" ref="0x40747918" loc="78:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="74:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> &#10; Did an overflow interrupt occur?&#10; </short>
          <long> &#10; Did an overflow interrupt occur?&#10; @return TRUE if overflow triggered, FALSE otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x402c9b90"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x4074dee8" loc="52:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="48:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> &#10; Get the current time.</short>
          <long> &#10; Get the current time.&#10; @return  the current time&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="timer_size" scoped="" ref="0x4074d9f8"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setScale" ref="0x40746758" loc="95:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="91:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> &#10; Turn on the clock.</short>
          <long> &#10; Turn on the clock.&#10; @param scale   Prescaler setting of clock -- see Atm128Timer.h&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="scale" ref="0x40746600" loc="95:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Timer.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getScale" ref="0x40746be8" loc="101:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="97:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> &#10; Get prescaler setting.</short>
          <long> &#10; Get prescaler setting.&#10; @return  Prescaler setting of clock -- see Atm128Timer.h&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="reset" ref="0x40748cd8" loc="66:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="65:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> Clear the overflow interrupt flag.</short>
          <long> Clear the overflow interrupt flag. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="overflow" ref="0x407488b8" loc="61:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="60:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> Signalled on timer overflow interrupt.</short>
          <long> Signalled on timer overflow interrupt. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOn" ref="0x40747d80" loc="84:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="80:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> &#10; Is overflow interrupt on? &#10; </short>
          <long> &#10; Is overflow interrupt on? &#10; @return TRUE if overflow enabled, FALSE otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x402c9b90"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x40748488" loc="58:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="54:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> &#10; Set the current time.</short>
          <long> &#10; Set the current time.&#10; @param t     the time to set&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="timer_size" scoped="" ref="0x4074d9f8"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t" ref="0x40748330" loc="58:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Timer.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="timer_size" scoped="" ref="0x4074d9f8"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="start" ref="0x407470f8" loc="69:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="68:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> Enable the overflow interrupt.</short>
          <long> Enable the overflow interrupt. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x407474f0" loc="72:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="71:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> Turn off overflow interrupts.</short>
          <long> Turn off overflow interrupts. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Queue" loc="43:/opt/tinyos-2.1.0/tos/interfaces/Queue.nc">
      <documentation loc="33:/opt/tinyos-2.1.0/tos/interfaces/Queue.nc">
        <short>&#10;  Interface to a FIFO list (queue) that contains items&#10;  of a specific type.</short>
        <long>&#10;  Interface to a FIFO list (queue) that contains items&#10;  of a specific type. The queue has a maximum size.&#10;&#10;  @author Philip Levis&#10;  @author Kyle Jamieson&#10;  @date   $Date: 2008/06/04 03:00:31 $&#10;</long>
      </documentation>
      <parameters>
        <typedef name="t" ref="0x4082acf8" loc="43:/opt/tinyos-2.1.0/tos/interfaces/Queue.nc">
          <interfacedef-ref qname="Queue"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="t" scoped="" ref="0x4082acf8"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="head" ref="0x40841ed8" loc="73:/opt/tinyos-2.1.0/tos/interfaces/Queue.nc">
        <documentation loc="67:/opt/tinyos-2.1.0/tos/interfaces/Queue.nc">
          <short>&#10; Get the head of the queue without removing it.</short>
          <long>&#10; Get the head of the queue without removing it. If the queue&#10; is empty, the return value is undefined.&#10;&#10; @return 't ONE' The head of the queue.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Queue"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="t" scoped="" ref="0x4082acf8"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enqueue" ref="0x4083fdb0" loc="90:/opt/tinyos-2.1.0/tos/interfaces/Queue.nc">
        <documentation loc="83:/opt/tinyos-2.1.0/tos/interfaces/Queue.nc">
          <short>&#10; Enqueue an element to the tail of the queue.</short>
          <long>&#10; Enqueue an element to the tail of the queue.&#10;&#10; @param 't ONE newVal' - the element to enqueue&#10; @return SUCCESS if the element was enqueued successfully, FAIL&#10;                 if it was not enqueued.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Queue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x402d2bd0"/></typename>
          </type-int>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="t" scoped="" ref="0x4082acf8"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="newVal" ref="0x4083fc58" loc="90:/opt/tinyos-2.1.0/tos/interfaces/Queue.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="t" scoped="" ref="0x4082acf8"/></type-var>
            <attribute-value>
              <attribute-ref name="one" ref="0x40197740"/>
              <value-structured>
                <type-tag size="I:0" alignment="I:1"><attribute-ref name="one" ref="0x40197740"/></type-tag>
              </value-structured>
            </attribute-value>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="element" ref="0x4083d6c8" loc="101:/opt/tinyos-2.1.0/tos/interfaces/Queue.nc">
        <documentation loc="92:/opt/tinyos-2.1.0/tos/interfaces/Queue.nc">
          <short>&#10; Return the nth element of the queue without dequeueing it, &#10; where 0 is the head of the queue and (size - 1) is the tail.</short>
          <long>&#10; Return the nth element of the queue without dequeueing it, &#10; where 0 is the head of the queue and (size - 1) is the tail. &#10; If the element requested is larger than the current queue size,&#10; the return value is undefined.&#10;&#10; @param index - the index of the element to return&#10; @return 't ONE' the requested element in the queue.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Queue"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="t" scoped="" ref="0x4082acf8"/></type-var>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="idx" ref="0x4083d570" loc="101:/opt/tinyos-2.1.0/tos/interfaces/Queue.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="maxSize" ref="0x40841aa8" loc="65:/opt/tinyos-2.1.0/tos/interfaces/Queue.nc">
        <documentation loc="60:/opt/tinyos-2.1.0/tos/interfaces/Queue.nc">
          <short>&#10; The maximum number of elements the queue can hold.</short>
          <long>&#10; The maximum number of elements the queue can hold.&#10;&#10; @return The maximum queue size.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Queue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="dequeue" ref="0x4083f5a0" loc="81:/opt/tinyos-2.1.0/tos/interfaces/Queue.nc">
        <documentation loc="75:/opt/tinyos-2.1.0/tos/interfaces/Queue.nc">
          <short>&#10; Remove the head of the queue.</short>
          <long>&#10; Remove the head of the queue. If the queue is empty, the return&#10; value is undefined.&#10;&#10; @return 't ONE' The head of the queue.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Queue"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="t" scoped="" ref="0x4082acf8"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="empty" ref="0x408411a8" loc="50:/opt/tinyos-2.1.0/tos/interfaces/Queue.nc">
        <documentation loc="45:/opt/tinyos-2.1.0/tos/interfaces/Queue.nc">
          <short>&#10; Returns if the queue is empty.</short>
          <long>&#10; Returns if the queue is empty.&#10;&#10; @return Whether the queue is empty.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Queue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x402c9b90"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="size" ref="0x408415f0" loc="58:/opt/tinyos-2.1.0/tos/interfaces/Queue.nc">
        <documentation loc="52:/opt/tinyos-2.1.0/tos/interfaces/Queue.nc">
          <short>&#10; The number of elements currently in the queue.</short>
          <long>&#10; The number of elements currently in the queue.&#10; Always less than or equal to maxSize().&#10;&#10; @return The number of elements in the queue.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Queue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="LinkPacketMetadata" loc="37:/opt/tinyos-2.1.0/tos/interfaces/LinkPacketMetadata.nc">
      <documentation loc="32:/opt/tinyos-2.1.0/tos/interfaces/LinkPacketMetadata.nc">
        <short>&#10; This interface provides metadata associated with a link layer packet.</short>
        <long>&#10; This interface provides metadata associated with a link layer packet.&#10; @author Philip Levis&#10;</long>
      </documentation>
      <function command="" provided="0" name="highChannelQuality" ref="0x40899c28" loc="47:/opt/tinyos-2.1.0/tos/interfaces/LinkPacketMetadata.nc">
        <documentation loc="39:/opt/tinyos-2.1.0/tos/interfaces/LinkPacketMetadata.nc">
          <short>&#10; Return true if the channel during this packet had high quality (few bit errors).</short>
          <long>&#10; Return true if the channel during this packet had high quality (few bit errors).&#10; A good rule of thumb for &#34;high quality&#34; is that the channel quality&#10; would enable MTU packets to have a reception rate of 90% or greater.&#10;&#10; @param 'message_t* ONE msg' A received packet during which the channel was measured.&#10; @return Whether the channel had high quality.&#10;</long>
        </documentation>
        <interfacedef-ref qname="LinkPacketMetadata"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x402c9b90"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x403a20c0"/>
                <typename><typedef-ref name="message_t" ref="0x403a2e50"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x40899ad0" loc="47:/opt/tinyos-2.1.0/tos/interfaces/LinkPacketMetadata.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x403a20c0"/>
                <typename><typedef-ref name="message_t" ref="0x403a2e50"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="LowPowerListening" loc="41:/opt/tinyos-2.1.0/tos/chips/cc1000/LowPowerListening.nc">
      <documentation loc="32:/opt/tinyos-2.1.0/tos/chips/cc1000/LowPowerListening.nc">
        <short>&#10; Low Power Listening interface&#10;&#10; </short>
        <long>&#10; Low Power Listening interface&#10;&#10; @author David Moss&#10; @author Jonathan Hui&#10;</long>
      </documentation>
      <function command="" provided="0" name="getLocalSleepInterval" ref="0x408b9010" loc="58:/opt/tinyos-2.1.0/tos/chips/cc1000/LowPowerListening.nc">
        <documentation loc="55:/opt/tinyos-2.1.0/tos/chips/cc1000/LowPowerListening.nc">
          <short>&#10; </short>
          <long>&#10; @return the local node's sleep interval, in [ms]&#10;</long>
        </documentation>
        <interfacedef-ref qname="LowPowerListening"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x4019ad68"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getRxDutyCycle" ref="0x408d3020" loc="113:/opt/tinyos-2.1.0/tos/chips/cc1000/LowPowerListening.nc">
        <documentation loc="109:/opt/tinyos-2.1.0/tos/chips/cc1000/LowPowerListening.nc">
          <short>&#10; </short>
          <long>&#10; @return the destination node's duty cycle configured in this message&#10;     in units of [percentage*100]&#10;</long>
        </documentation>
        <interfacedef-ref qname="LowPowerListening"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x4019ad68"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x403a20c0"/>
                <typename><typedef-ref name="message_t" ref="0x403a2e50"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x408d4eb0" loc="113:/opt/tinyos-2.1.0/tos/chips/cc1000/LowPowerListening.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x403a20c0"/>
                <typename><typedef-ref name="message_t" ref="0x403a2e50"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="sleepIntervalToDutyCycle" ref="0x408d3ef8" loc="129:/opt/tinyos-2.1.0/tos/chips/cc1000/LowPowerListening.nc">
        <documentation loc="123:/opt/tinyos-2.1.0/tos/chips/cc1000/LowPowerListening.nc">
          <short>&#10; Convert a sleep interval, in units of [ms], to a duty cycle&#10; in units of [percentage*100]&#10; </short>
          <long>&#10; Convert a sleep interval, in units of [ms], to a duty cycle&#10; in units of [percentage*100]&#10; @param sleepInterval The sleep interval in units of [ms]&#10; @return The duty cycle in units of [percentage*100]&#10;</long>
        </documentation>
        <interfacedef-ref qname="LowPowerListening"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x4019ad68"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x4019ad68"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="sleepInterval" ref="0x408d3da0" loc="129:/opt/tinyos-2.1.0/tos/chips/cc1000/LowPowerListening.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x4019ad68"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getLocalDutyCycle" ref="0x408b9ce0" loc="82:/opt/tinyos-2.1.0/tos/chips/cc1000/LowPowerListening.nc">
        <documentation loc="79:/opt/tinyos-2.1.0/tos/chips/cc1000/LowPowerListening.nc">
          <short>&#10; </short>
          <long>&#10; @return this node's radio duty cycle rate, in units of [percentage*100]&#10;</long>
        </documentation>
        <interfacedef-ref qname="LowPowerListening"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x4019ad68"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setRxSleepInterval" ref="0x408b8580" loc="91:/opt/tinyos-2.1.0/tos/chips/cc1000/LowPowerListening.nc">
        <documentation loc="85:/opt/tinyos-2.1.0/tos/chips/cc1000/LowPowerListening.nc">
          <short>&#10; Configure this outgoing message so it can be transmitted to a neighbor mote&#10; with the specified Rx sleep interval.</short>
          <long>&#10; Configure this outgoing message so it can be transmitted to a neighbor mote&#10; with the specified Rx sleep interval.&#10; @param 'message_t* ONE msg' Pointer to the message that will be sent&#10; @param sleepInterval The receiving node's sleep interval, in [ms]&#10;</long>
        </documentation>
        <interfacedef-ref qname="LowPowerListening"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x403a20c0"/>
                <typename><typedef-ref name="message_t" ref="0x403a2e50"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x4019ad68"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x408b81b8" loc="91:/opt/tinyos-2.1.0/tos/chips/cc1000/LowPowerListening.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x403a20c0"/>
                <typename><typedef-ref name="message_t" ref="0x403a2e50"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="sleepIntervalMs" ref="0x408b8420" loc="91:/opt/tinyos-2.1.0/tos/chips/cc1000/LowPowerListening.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x4019ad68"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setLocalDutyCycle" ref="0x408b9620" loc="77:/opt/tinyos-2.1.0/tos/chips/cc1000/LowPowerListening.nc">
        <documentation loc="60:/opt/tinyos-2.1.0/tos/chips/cc1000/LowPowerListening.nc">
          <short>&#10; Set this node's radio duty cycle rate, in units of [percentage*100].</short>
          <long>&#10; Set this node's radio duty cycle rate, in units of [percentage*100].&#10; For example, to get a 0.05% duty cycle,&#10; &#60;code>&#10;   call LowPowerListening.setDutyCycle(5);  // or equivalently...&#10;   call LowPowerListening.setDutyCycle(00005);  // for better readability?&#10; &#60;/code>&#10;&#10; For a 100% duty cycle (always on),&#10; &#60;code>&#10;   call LowPowerListening.setDutyCycle(10000);&#10; &#60;/code>&#10;&#10; This is the equivalent of setting the local sleep interval explicitly.&#10; &#10; @param dutyCycle The duty cycle percentage, in units of [percentage*100]&#10;</long>
        </documentation>
        <interfacedef-ref qname="LowPowerListening"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x4019ad68"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dutyCycle" ref="0x408b94c8" loc="77:/opt/tinyos-2.1.0/tos/chips/cc1000/LowPowerListening.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x4019ad68"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setRxDutyCycle" ref="0x408d4848" loc="107:/opt/tinyos-2.1.0/tos/chips/cc1000/LowPowerListening.nc">
        <documentation loc="98:/opt/tinyos-2.1.0/tos/chips/cc1000/LowPowerListening.nc">
          <short>&#10; Configure this outgoing message so it can be transmitted to a neighbor mote&#10; with the specified Rx duty cycle rate.</short>
          <long>&#10; Configure this outgoing message so it can be transmitted to a neighbor mote&#10; with the specified Rx duty cycle rate.&#10; Duty cycle is in units of [percentage*100], i.e. 0.25% duty cycle = 25.&#10; &#10; @param msg Pointer to the message that will be sent&#10; @param dutyCycle The duty cycle of the receiving mote, in units of &#10;     [percentage*100]&#10;</long>
        </documentation>
        <interfacedef-ref qname="LowPowerListening"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x403a20c0"/>
                <typename><typedef-ref name="message_t" ref="0x403a2e50"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x4019ad68"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x408d44b8" loc="107:/opt/tinyos-2.1.0/tos/chips/cc1000/LowPowerListening.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x403a20c0"/>
                <typename><typedef-ref name="message_t" ref="0x403a2e50"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="dutyCycle" ref="0x408d46e8" loc="107:/opt/tinyos-2.1.0/tos/chips/cc1000/LowPowerListening.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x4019ad68"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="dutyCycleToSleepInterval" ref="0x408d3708" loc="121:/opt/tinyos-2.1.0/tos/chips/cc1000/LowPowerListening.nc">
        <documentation loc="115:/opt/tinyos-2.1.0/tos/chips/cc1000/LowPowerListening.nc">
          <short>&#10; Convert a duty cycle, in units of [percentage*100], to&#10; the sleep interval of the mote in milliseconds&#10; </short>
          <long>&#10; Convert a duty cycle, in units of [percentage*100], to&#10; the sleep interval of the mote in milliseconds&#10; @param dutyCycle The duty cycle in units of [percentage*100]&#10; @return The equivalent sleep interval, in units of [ms]&#10;</long>
        </documentation>
        <interfacedef-ref qname="LowPowerListening"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x4019ad68"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x4019ad68"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dutyCycle" ref="0x408d35b0" loc="121:/opt/tinyos-2.1.0/tos/chips/cc1000/LowPowerListening.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x4019ad68"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getRxSleepInterval" ref="0x408d4020" loc="96:/opt/tinyos-2.1.0/tos/chips/cc1000/LowPowerListening.nc">
        <documentation loc="93:/opt/tinyos-2.1.0/tos/chips/cc1000/LowPowerListening.nc">
          <short>&#10; </short>
          <long>&#10; @return the destination node's sleep interval configured in this message&#10;</long>
        </documentation>
        <interfacedef-ref qname="LowPowerListening"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x4019ad68"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x403a20c0"/>
                <typename><typedef-ref name="message_t" ref="0x403a2e50"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x408b8eb8" loc="96:/opt/tinyos-2.1.0/tos/chips/cc1000/LowPowerListening.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x403a20c0"/>
                <typename><typedef-ref name="message_t" ref="0x403a2e50"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setLocalSleepInterval" ref="0x408c2918" loc="53:/opt/tinyos-2.1.0/tos/chips/cc1000/LowPowerListening.nc">
        <documentation loc="43:/opt/tinyos-2.1.0/tos/chips/cc1000/LowPowerListening.nc">
          <short>&#10; Set this this node's radio sleep interval, in milliseconds.</short>
          <long>&#10; Set this this node's radio sleep interval, in milliseconds.&#10; Once every interval, the node will sleep and perform an Rx check &#10; on the radio.  Setting the sleep interval to 0 will keep the radio&#10; always on.&#10;&#10; This is the equivalent of setting the local duty cycle rate.&#10;&#10; @param sleepIntervalMs the length of this node's Rx check interval, in [ms]&#10;</long>
        </documentation>
        <interfacedef-ref qname="LowPowerListening"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x4019ad68"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="sleepIntervalMs" ref="0x408c27c0" loc="53:/opt/tinyos-2.1.0/tos/chips/cc1000/LowPowerListening.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x4019ad68"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="CsmaControl" loc="29:/opt/tinyos-2.1.0/tos/chips/cc1000/CsmaControl.nc">
      <documentation loc="22:/opt/tinyos-2.1.0/tos/chips/cc1000/CsmaControl.nc">
        <short>&#10; Interface for activating/deactivating congestion control.</short>
        <long>&#10; Interface for activating/deactivating congestion control.&#10;&#10; @author Philip Levis&#10; @author Joe Polastre&#10; @date   August 31 2005&#10;</long>
      </documentation>
      <function command="" provided="0" name="disableCca" ref="0x408c0278" loc="40:/opt/tinyos-2.1.0/tos/chips/cc1000/CsmaControl.nc">
        <documentation loc="36:/opt/tinyos-2.1.0/tos/chips/cc1000/CsmaControl.nc">
          <short>&#10; Disable congestion control.</short>
          <long>&#10; Disable congestion control.&#10; @return SUCCESS if congestion control disabled, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CsmaControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x402d2bd0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableCca" ref="0x408c3db8" loc="34:/opt/tinyos-2.1.0/tos/chips/cc1000/CsmaControl.nc">
        <documentation loc="30:/opt/tinyos-2.1.0/tos/chips/cc1000/CsmaControl.nc">
          <short>&#10; Enable congestion control.</short>
          <long>&#10; Enable congestion control.&#10; @return SUCCESS if congestion control enabled, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CsmaControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x402d2bd0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="CsmaBackoff" loc="29:/opt/tinyos-2.1.0/tos/interfaces/CsmaBackoff.nc">
      <documentation loc="22:/opt/tinyos-2.1.0/tos/interfaces/CsmaBackoff.nc">
        <short>&#10; Interface for MAC Backoff values from the radio stack.</short>
        <long>&#10; Interface for MAC Backoff values from the radio stack.&#10; Allows application to change the backoff on a per packet basis.&#10; Only used if congestion control is enabled.&#10;&#10; @author Joe Polastre&#10;</long>
      </documentation>
      <function event="" provided="0" name="congestion" ref="0x408bfb18" loc="45:/opt/tinyos-2.1.0/tos/interfaces/CsmaBackoff.nc">
        <documentation loc="39:/opt/tinyos-2.1.0/tos/interfaces/CsmaBackoff.nc">
          <short>&#10; Return backoff time after message m could not be send due to congestion.</short>
          <long>&#10; Return backoff time after message m could not be send due to congestion.&#10; The units are raio dependent.&#10; @param 'message_t* ONE m'&#10; @return Backoff time after congestion&#10;</long>
        </documentation>
        <interfacedef-ref qname="CsmaBackoff"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x4019ad68"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x403a20c0"/>
                <typename><typedef-ref name="message_t" ref="0x403a2e50"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="m" ref="0x408bf9c0" loc="45:/opt/tinyos-2.1.0/tos/interfaces/CsmaBackoff.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x403a20c0"/>
                <typename><typedef-ref name="message_t" ref="0x403a2e50"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="initial" ref="0x408bf168" loc="37:/opt/tinyos-2.1.0/tos/interfaces/CsmaBackoff.nc">
        <documentation loc="31:/opt/tinyos-2.1.0/tos/interfaces/CsmaBackoff.nc">
          <short>&#10; Return initial backoff time before attempting to send message m.</short>
          <long>&#10; Return initial backoff time before attempting to send message m. The&#10; units are radio dependent.&#10; @param 'message_t* ONE m'&#10; @return Initial backoff time&#10;</long>
        </documentation>
        <interfacedef-ref qname="CsmaBackoff"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x4019ad68"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x403a20c0"/>
                <typename><typedef-ref name="message_t" ref="0x403a2e50"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="m" ref="0x408bf010" loc="37:/opt/tinyos-2.1.0/tos/interfaces/CsmaBackoff.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x403a20c0"/>
                <typename><typedef-ref name="message_t" ref="0x403a2e50"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="RadioTimeStamping" loc="33:/opt/tinyos-2.1.0/tos/interfaces/RadioTimeStamping.nc">
      <documentation loc="22:/opt/tinyos-2.1.0/tos/interfaces/RadioTimeStamping.nc">
        <short>&#10; Interface for receiving time stamp information from the radio.</short>
        <long>&#10; Interface for receiving time stamp information from the radio.&#10; This information is also embedded in packet metadata.&#10;&#10; @author Jonathan Hui&#10; @author Philip Levis&#10; @author Joe Polastre&#10; @date   October 10 2005&#10;&#10;</long>
      </documentation>
      <function event="" provided="0" name="transmittedSFD" ref="0x408bc3c0" loc="40:/opt/tinyos-2.1.0/tos/interfaces/RadioTimeStamping.nc">
        <documentation loc="35:/opt/tinyos-2.1.0/tos/interfaces/RadioTimeStamping.nc">
          <short> &#10; Provides the time at which start of frame delimiter has been&#10; transmitted: units are in terms of a 32kHz clock.</short>
          <long> &#10; Provides the time at which start of frame delimiter has been&#10; transmitted: units are in terms of a 32kHz clock.&#10; @param 'message_t* ONE p_msg'&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioTimeStamping"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x4019ad68"/></typename>
            </type-int>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x403a20c0"/>
                <typename><typedef-ref name="message_t" ref="0x403a2e50"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="time" ref="0x408bc030" loc="40:/opt/tinyos-2.1.0/tos/interfaces/RadioTimeStamping.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x4019ad68"/></typename>
            </type-int>
          </variable>
          <variable name="p_msg" ref="0x408bc260" loc="40:/opt/tinyos-2.1.0/tos/interfaces/RadioTimeStamping.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x403a20c0"/>
                <typename><typedef-ref name="message_t" ref="0x403a2e50"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="receivedSFD" ref="0x408bcd68" loc="51:/opt/tinyos-2.1.0/tos/interfaces/RadioTimeStamping.nc">
        <documentation loc="42:/opt/tinyos-2.1.0/tos/interfaces/RadioTimeStamping.nc">
          <short> &#10; Provides the time at which start of frame delimiter was received:&#10; units are in terms of a 32kHz clock.</short>
          <long> &#10; Provides the time at which start of frame delimiter was received:&#10; units are in terms of a 32kHz clock.  &#60;b>NOTE&#60;/b> that receiving&#10; a receivedSFD() event does NOT mean that a packet will be&#10; received; the transmission may stop, become corrupted, or be&#10; filtered by the physical or link layers.  The number of rxSFD&#10; events will always be great than or equal to the number of&#10; Receive message events.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioTimeStamping"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x4019ad68"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="time" ref="0x408bcc10" loc="51:/opt/tinyos-2.1.0/tos/interfaces/RadioTimeStamping.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x4019ad68"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="BusyWait" loc="48:/opt/tinyos-2.1.0/tos/lib/timer/BusyWait.nc">
      <documentation loc="25:/opt/tinyos-2.1.0/tos/lib/timer/BusyWait.nc">
        <short>&#10; BusyWait is a low-level interface intended for busy waiting for short&#10; durations.</short>
        <long>&#10; BusyWait is a low-level interface intended for busy waiting for short&#10; durations.&#10;&#10; &#60;p>BusyWait is parameterised by its &#34;precision&#34; (milliseconds,&#10; microseconds, etc), identified by a type. This prevents, e.g.,&#10; unintentionally mixing components expecting milliseconds with those&#10; expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>BusyWait's second parameter is its &#34;width&#34;, i.e., the number of bits&#10; used to represent time values. Width is indicated by including the&#10; appropriate size integer type as a BusyWait parameter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this BusyWait&#10;   interface.&#10; @param size_type An integer type representing time values for this &#10;   BusyWait interface.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x408dbe38" loc="48:/opt/tinyos-2.1.0/tos/lib/timer/BusyWait.nc">
          <interfacedef-ref qname="BusyWait"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x408dbe38"/></type-var>
        </typedef>
        <typedef name="size_type" ref="0x408d7010" loc="48:/opt/tinyos-2.1.0/tos/lib/timer/BusyWait.nc">
          <interfacedef-ref qname="BusyWait"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x408d7010"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="wait" ref="0x408d7628" loc="55:/opt/tinyos-2.1.0/tos/lib/timer/BusyWait.nc">
        <documentation loc="50:/opt/tinyos-2.1.0/tos/lib/timer/BusyWait.nc">
          <short>&#10; Busy wait for (at least) dt time units.</short>
          <long>&#10; Busy wait for (at least) dt time units. Use sparingly, when the&#10; cost of using an Alarm or Timer would be too high.&#10; @param dt Time to busy wait for.&#10;</long>
        </documentation>
        <interfacedef-ref qname="BusyWait"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x408d7010"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dt" ref="0x408d74d0" loc="55:/opt/tinyos-2.1.0/tos/lib/timer/BusyWait.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x408d7010"/></type-var>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ReadNow" loc="52:/opt/tinyos-2.1.0/tos/interfaces/ReadNow.nc">
      <documentation loc="33:/opt/tinyos-2.1.0/tos/interfaces/ReadNow.nc">
        <short>&#10; The ReadNow interface is intended for split-phase low-latency&#10; reading of small values.</short>
        <long>&#10; The ReadNow interface is intended for split-phase low-latency&#10; reading of small values. The type of the value is given as a&#10; template argument. Because this interface is split-phase, these&#10; values may be backed by hardware. Providers of this interface&#10; should also provide a Resource interface, and this interface should&#10; only be used after the resource has been acquired. Otherwise, the&#10; low-latency requirement may be impossible to meet.&#10;&#10; &#60;p>&#10; This interface has the same calling semantics as the Read interface&#10; described in TEP 114, except that it is async.&#10; &#10; @param val_t the type of the object that will be returned&#10;&#10; @author Gilman Tolle &#60;gtolle@archrock.com>&#10; @version $Revision: 1.5 $ $Date: 2008/06/16 18:58:51 $&#10;</long>
      </documentation>
      <parameters>
        <typedef name="val_t" ref="0x408d9a30" loc="52:/opt/tinyos-2.1.0/tos/interfaces/ReadNow.nc">
          <interfacedef-ref qname="ReadNow"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x408d9a30"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="read" ref="0x408d9f00" loc="58:/opt/tinyos-2.1.0/tos/interfaces/ReadNow.nc">
        <documentation loc="53:/opt/tinyos-2.1.0/tos/interfaces/ReadNow.nc">
          <short>&#10; Initiates a read of the value.</short>
          <long>&#10; Initiates a read of the value.&#10; &#10; @return SUCCESS if a readDone() event will eventually come back.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ReadNow"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x402d2bd0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="readDone" ref="0x408f3700" loc="66:/opt/tinyos-2.1.0/tos/interfaces/ReadNow.nc">
        <documentation loc="60:/opt/tinyos-2.1.0/tos/interfaces/ReadNow.nc">
          <short>&#10; Signals the completion of the read().</short>
          <long>&#10; Signals the completion of the read().&#10;&#10; @param result SUCCESS if the read() was successful&#10; @param val the value that has been read&#10;</long>
        </documentation>
        <interfacedef-ref qname="ReadNow"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x402d2bd0"/></typename>
            </type-int>
            <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x408d9a30"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="result" ref="0x408f33d0" loc="66:/opt/tinyos-2.1.0/tos/interfaces/ReadNow.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x402d2bd0"/></typename>
            </type-int>
          </variable>
          <variable name="val" ref="0x408f35a0" loc="66:/opt/tinyos-2.1.0/tos/interfaces/ReadNow.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x408d9a30"/></type-var>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="CC1000Squelch" loc="34:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000Squelch.nc">
      <documentation loc="30:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000Squelch.nc">
        <short>&#10; CC1000 internal noise floor (aka squelch value) interface&#10; </short>
        <long>&#10; CC1000 internal noise floor (aka squelch value) interface&#10; @author David Gay&#10;</long>
      </documentation>
      <function command="" provided="0" name="get" ref="0x408dc380" loc="46:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000Squelch.nc">
        <documentation loc="42:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000Squelch.nc">
          <short>&#10; Return current estimated noise floor&#10; </short>
          <long>&#10; Return current estimated noise floor&#10; @return Noise floor value&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC1000Squelch"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x4019ad68"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="settled" ref="0x408dc7d0" loc="53:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000Squelch.nc">
        <documentation loc="48:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000Squelch.nc">
          <short>&#10; Check if noise floor estimate is considered stable (typically after&#10; some number of measurements)&#10; </short>
          <long>&#10; Check if noise floor estimate is considered stable (typically after&#10; some number of measurements)&#10; @return TRUE if noise floor estimate considered stable, FALSE otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC1000Squelch"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x402c9b90"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="adjust" ref="0x408ccea0" loc="40:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000Squelch.nc">
        <documentation loc="36:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000Squelch.nc">
          <short>&#10; Adjust noise floor based on new noise measurement&#10; </short>
          <long>&#10; Adjust noise floor based on new noise measurement&#10; @param data noise measurement&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC1000Squelch"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x4019ad68"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x408ccd48" loc="40:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000Squelch.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x4019ad68"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="CC1000Control" loc="34:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000Control.nc">
      <documentation loc="29:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000Control.nc">
        <short>&#10; CC1000 internal radio control interface.</short>
        <long>&#10; CC1000 internal radio control interface.&#10; @author Philip Buonadonna&#10; @aythor Jaein Jeong&#10;</long>
      </documentation>
      <function command="" provided="0" name="tunePreset" ref="0x408cda40" loc="49:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000Control.nc">
        <documentation loc="41:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000Control.nc">
          <short>&#10; Tune the radio to one of the frequencies available in the CC1K_Params&#10; table.</short>
          <long>&#10; Tune the radio to one of the frequencies available in the CC1K_Params&#10; table.  Calling Tune will allso reset the rfpower and LockVal&#10; selections to the table values.&#10; &#10; @param freq The index into the CC1K_Params table that holds the&#10; desired preset frequency parameters.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC1000Control"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="freq" ref="0x408cd8e8" loc="49:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000Control.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="biasOn" ref="0x408e18f8" loc="93:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000Control.nc">
        <documentation loc="87:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000Control.nc">
          <short>&#10; Turn the bias power on.</short>
          <long>&#10; Turn the bias power on. This function must be followed by a call to&#10; either rxMode() or txMode() to place the radio in a recieve/transmit&#10; state respectively. There is approximately a 200us delay when&#10; restoring bias power.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC1000Control"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getRFPower" ref="0x408e0558" loc="110:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000Control.nc">
        <documentation loc="105:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000Control.nc">
          <short>&#10; Get the present RF power index.</short>
          <long>&#10; Get the present RF power index.&#10;&#10; @return The power index value.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC1000Control"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="tuneManual" ref="0x408e21c0" loc="63:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000Control.nc">
        <documentation loc="51:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000Control.nc">
          <short>&#10; Tune the radio to a given frequency.</short>
          <long>&#10; Tune the radio to a given frequency. Since the CC1000 uses a digital&#10; frequency synthesizer, it cannot tune to just an arbitrary frequency.&#10; This routine will determine the closest achievable channel, compute&#10; the necessary parameters and tune the radio.&#10; &#10; @param The desired channel frequency, in Hz.&#10; &#10; @return The actual computed channel frequency, in Hz.  A return value&#10; of '0' indicates that no frequency was computed and the radio was not&#10; tuned.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC1000Control"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x4019b400"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x4019b400"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="DesiredFreq" ref="0x408e2068" loc="63:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000Control.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x4019b400"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="selectLock" ref="0x408e0b28" loc="118:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000Control.nc">
        <documentation loc="112:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000Control.nc">
          <short> &#10; Select the signal to monitor at the CHP_OUT pin of the CC1000.</short>
          <long> &#10; Select the signal to monitor at the CHP_OUT pin of the CC1000.  See&#10; the CC1000 data sheet for the available signals.&#10; &#10; @param LockVal The index of the signal to monitor at the CHP_OUT pin&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC1000Control"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="LockVal" ref="0x408e09d0" loc="118:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000Control.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="init" ref="0x408cd498" loc="39:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000Control.nc">
        <documentation loc="36:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000Control.nc">
          <short>&#10; Initialise the radio to its default state.</short>
          <long>&#10; Initialise the radio to its default state.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC1000Control"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getLock" ref="0x408de038" loc="126:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000Control.nc">
        <documentation loc="120:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000Control.nc">
          <short>&#10; Get the binary value from the CHP_OUT pin.</short>
          <long>&#10; Get the binary value from the CHP_OUT pin.  Analog signals cannot be&#10; read using function.&#10;&#10; @return 1 - Pin is high or 0 - Pin is low&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC1000Control"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="coreOn" ref="0x408e1430" loc="85:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000Control.nc">
        <documentation loc="80:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000Control.nc">
          <short>&#10; Turn off the bias power on the CC1000 radio, but leave the core and&#10; crystal oscillator powered.</short>
          <long>&#10; Turn off the bias power on the CC1000 radio, but leave the core and&#10; crystal oscillator powered.  This will result in approximately a 750&#10; uA power savings.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC1000Control"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="txMode" ref="0x408e2b30" loc="73:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000Control.nc">
        <documentation loc="70:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000Control.nc">
          <short>&#10; Shift the CC1000 Radio into transmit mode.</short>
          <long>&#10; Shift the CC1000 Radio into transmit mode.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC1000Control"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getLOStatus" ref="0x408de4f8" loc="136:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000Control.nc">
        <documentation loc="128:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000Control.nc">
          <short>&#10; Returns whether the present frequency set is using high-side LO&#10; injection or not.</short>
          <long>&#10; Returns whether the present frequency set is using high-side LO&#10; injection or not.  This information is used to determine if the data&#10; from the CC1000 needs to be inverted or not.&#10;&#10; @return TRUE if high-side LO injection is being used (i.e. data does NOT need to be inverted&#10; at the receiver.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC1000Control"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x402c9b90"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="rxMode" ref="0x408e1010" loc="78:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000Control.nc">
        <documentation loc="75:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000Control.nc">
          <short>&#10; Shift the CC1000 Radio in receive mode.</short>
          <long>&#10; Shift the CC1000 Radio in receive mode.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC1000Control"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="off" ref="0x408e2758" loc="68:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000Control.nc">
        <documentation loc="65:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000Control.nc">
          <short>&#10; Turn the CC1000 off&#10;</short>
        </documentation>
        <interfacedef-ref qname="CC1000Control"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setRFPower" ref="0x408e0010" loc="103:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000Control.nc">
        <documentation loc="95:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000Control.nc">
          <short>&#10; Set the transmit RF power value.</short>
          <long>&#10; Set the transmit RF power value.  The input value is simply an&#10; arbitrary index that is programmed into the CC1000 registers.  Consult&#10; the CC1000 datasheet for the resulting power output/current&#10; consumption values.&#10;&#10; @param power A power index between 1 and 255.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC1000Control"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="power" ref="0x408e1df8" loc="103:/opt/tinyos-2.1.0/tos/chips/cc1000/CC1000Control.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ByteRadio" loc="19:/opt/tinyos-2.1.0/tos/chips/cc1000/ByteRadio.nc">
      <documentation loc="10:/opt/tinyos-2.1.0/tos/chips/cc1000/ByteRadio.nc">
        <short>&#10; Radio logic is split between Csma (media-access control, low-power&#10; listening and general control) and SendReceive (packet reception and&#10; transmission).</short>
        <long>&#10; Radio logic is split between Csma (media-access control, low-power&#10; listening and general control) and SendReceive (packet reception and&#10; transmission). This interface specifies the interaction between these&#10; two components.&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <function event="" provided="0" name="rts" ref="0x408ce9f0" loc="25:/opt/tinyos-2.1.0/tos/chips/cc1000/ByteRadio.nc">
        <documentation loc="21:/opt/tinyos-2.1.0/tos/chips/cc1000/ByteRadio.nc">
          <short>&#10; SendReceive wants to send a packet.</short>
          <long>&#10; SendReceive wants to send a packet.&#10; @param msg Message to be sent.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ByteRadio"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x403a20c0"/>
                <typename><typedef-ref name="message_t" ref="0x403a2e50"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x408ce898" loc="25:/opt/tinyos-2.1.0/tos/chips/cc1000/ByteRadio.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x403a20c0"/>
                <typename><typedef-ref name="message_t" ref="0x403a2e50"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="listen" ref="0x408c9780" loc="61:/opt/tinyos-2.1.0/tos/chips/cc1000/ByteRadio.nc">
        <documentation loc="58:/opt/tinyos-2.1.0/tos/chips/cc1000/ByteRadio.nc">
          <short>&#10; Enable listening for incoming packets.</short>
          <long>&#10; Enable listening for incoming packets.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ByteRadio"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="syncing" ref="0x408c86c0" loc="85:/opt/tinyos-2.1.0/tos/chips/cc1000/ByteRadio.nc">
        <documentation loc="76:/opt/tinyos-2.1.0/tos/chips/cc1000/ByteRadio.nc">
          <short>&#10; Detect if SendReceive is attempting to sync with an incoming packet.</short>
          <long>&#10; Detect if SendReceive is attempting to sync with an incoming packet.&#10; During sync, idleByte events are not signaled. If sync is successful,&#10; an rx() event will be signaled, if it fails, idleByte events will&#10; resume. If syncing() returns TRUE, the last idleByte() event must&#10; have had preamble = TRUE.&#10;&#10; @return TRUE if a sync attempt is in progress, FALSE if not.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ByteRadio"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x402c9b90"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="rxDone" ref="0x408e4010" loc="95:/opt/tinyos-2.1.0/tos/chips/cc1000/ByteRadio.nc">
        <documentation loc="92:/opt/tinyos-2.1.0/tos/chips/cc1000/ByteRadio.nc">
          <short>&#10; Message reception is complete.</short>
          <long>&#10; Message reception is complete.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ByteRadio"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getPreambleLength" ref="0x408c9358" loc="56:/opt/tinyos-2.1.0/tos/chips/cc1000/ByteRadio.nc">
        <documentation loc="52:/opt/tinyos-2.1.0/tos/chips/cc1000/ByteRadio.nc">
          <short>&#10; Get message preamble length.</short>
          <long>&#10; Get message preamble length.&#10; @return Preamble length in bytes&#10;</long>
        </documentation>
        <interfacedef-ref qname="ByteRadio"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x4019ad68"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="idleByte" ref="0x408c8168" loc="74:/opt/tinyos-2.1.0/tos/chips/cc1000/ByteRadio.nc">
        <documentation loc="68:/opt/tinyos-2.1.0/tos/chips/cc1000/ByteRadio.nc">
          <short>&#10; SendReceive signals this event for every radio-byte-time while&#10; listening is enabled and a message isn't being received or&#10; transmitted.</short>
          <long>&#10; SendReceive signals this event for every radio-byte-time while&#10; listening is enabled and a message isn't being received or&#10; transmitted.&#10; @param preamble TRUE if a message preamble byte has been received&#10;</long>
        </documentation>
        <interfacedef-ref qname="ByteRadio"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x402c9b90"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="preamble" ref="0x408c8010" loc="74:/opt/tinyos-2.1.0/tos/chips/cc1000/ByteRadio.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x402c9b90"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="cts" ref="0x408cee00" loc="32:/opt/tinyos-2.1.0/tos/chips/cc1000/ByteRadio.nc">
        <documentation loc="27:/opt/tinyos-2.1.0/tos/chips/cc1000/ByteRadio.nc">
          <short>&#10; Access to the media granted.</short>
          <long>&#10; Access to the media granted. Start sending. SendReceive must signal&#10; sendDone when transmission is complete. Note: the media-access-contro&#10; layer must have enabled listening before calling cts().&#10;</long>
        </documentation>
        <interfacedef-ref qname="ByteRadio"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setPreambleLength" ref="0x408cae48" loc="50:/opt/tinyos-2.1.0/tos/chips/cc1000/ByteRadio.nc">
        <documentation loc="46:/opt/tinyos-2.1.0/tos/chips/cc1000/ByteRadio.nc">
          <short>&#10; Set message preamble length.</short>
          <long>&#10; Set message preamble length.&#10; @param bytes Preamble length in bytes&#10;</long>
        </documentation>
        <interfacedef-ref qname="ByteRadio"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x4019ad68"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="bytes" ref="0x408cacf0" loc="50:/opt/tinyos-2.1.0/tos/chips/cc1000/ByteRadio.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x4019ad68"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="sendDone" ref="0x408ca840" loc="44:/opt/tinyos-2.1.0/tos/chips/cc1000/ByteRadio.nc">
        <documentation loc="41:/opt/tinyos-2.1.0/tos/chips/cc1000/ByteRadio.nc">
          <short>&#10; Transmission complete.</short>
          <long>&#10; Transmission complete.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ByteRadio"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="off" ref="0x408c9b80" loc="66:/opt/tinyos-2.1.0/tos/chips/cc1000/ByteRadio.nc">
        <documentation loc="63:/opt/tinyos-2.1.0/tos/chips/cc1000/ByteRadio.nc">
          <short>&#10; Disable listening for incoming packets.</short>
          <long>&#10; Disable listening for incoming packets.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ByteRadio"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getTxMessage" ref="0x408ca380" loc="39:/opt/tinyos-2.1.0/tos/chips/cc1000/ByteRadio.nc">
        <documentation loc="34:/opt/tinyos-2.1.0/tos/chips/cc1000/ByteRadio.nc">
          <short>&#10; Between the rts() and sendDone() events, this must return the&#10; message under transmission.</short>
          <long>&#10; Between the rts() and sendDone() events, this must return the&#10; message under transmission.&#10; @return Message being transmitted.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ByteRadio"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:1">
            <type-tag size="I:44" alignment="I:1"><nx_struct-ref name="message_t" ref="0x403a20c0"/>
              <typename><typedef-ref name="message_t" ref="0x403a2e50"/></typename>
            </type-tag>
          </type-pointer>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="rx" ref="0x408c8c10" loc="90:/opt/tinyos-2.1.0/tos/chips/cc1000/ByteRadio.nc">
        <documentation loc="87:/opt/tinyos-2.1.0/tos/chips/cc1000/ByteRadio.nc">
          <short>&#10; A message is being received&#10;</short>
        </documentation>
        <interfacedef-ref qname="ByteRadio"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Resource" loc="67:/opt/tinyos-2.1.0/tos/interfaces/Resource.nc">
      <documentation loc="53:/opt/tinyos-2.1.0/tos/interfaces/Resource.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The Resource interface can be used to gain access to&#10; shared resources.</short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The Resource interface can be used to gain access to&#10; shared resources.  It is always offered as a parameterized&#10; interface, and its users gain access to the resource through some&#10; predefined arbitration policy.&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10; @version $Revision: 1.5 $&#10; @date $Date: 2007/04/15 20:05:03 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="release" ref="0x409bfa18" loc="110:/opt/tinyos-2.1.0/tos/interfaces/Resource.nc">
        <documentation loc="94:/opt/tinyos-2.1.0/tos/interfaces/Resource.nc">
          <short>&#10; Release a shared resource you previously acquired.</short>
          <long>&#10; Release a shared resource you previously acquired.  &#10;&#10; @return SUCCESS The resource has been released &#60;br>&#10;         FAIL You tried to release but you are not the&#10;              owner of the resource &#10;&#10; @note This command should never be called between putting in a request &#9;  &#10;       and waiting for a granted event.  Doing so will result in a&#10;       potential race condition.  There are ways to guarantee that no&#10;       race will occur, but they are clumsy and overly complicated.&#10;       Since it doesn't logically make since to be calling&#10;       &#60;code>release&#60;/code> before receiving a &#60;code>granted&#60;/code> event, &#10;       we have opted to keep thing simple and warn you about the potential &#10;       race.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x402d2bd0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="immediateRequest" ref="0x409bf0f8" loc="87:/opt/tinyos-2.1.0/tos/interfaces/Resource.nc">
        <documentation loc="80:/opt/tinyos-2.1.0/tos/interfaces/Resource.nc">
          <short>&#10; Request immediate access to a shared resource.</short>
          <long>&#10; Request immediate access to a shared resource. You must call release()&#10; when you are done with it.&#10;&#10; @return SUCCESS When a request has been accepted. &#60;br>&#10;            FAIL The request cannot be fulfilled&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x402d2bd0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="request" ref="0x409c2ad8" loc="78:/opt/tinyos-2.1.0/tos/interfaces/Resource.nc">
        <documentation loc="68:/opt/tinyos-2.1.0/tos/interfaces/Resource.nc">
          <short>&#10; Request access to a shared resource.</short>
          <long>&#10; Request access to a shared resource. You must call release()&#10; when you are done with it.&#10;&#10; @return SUCCESS When a request has been accepted. The granted()&#10;                 event will be signaled once you have control of the&#10;                 resource.&#60;br>&#10;         EBUSY You have already requested this resource and a&#10;               granted event is pending&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x402d2bd0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="granted" ref="0x409bf5a8" loc="92:/opt/tinyos-2.1.0/tos/interfaces/Resource.nc">
        <documentation loc="89:/opt/tinyos-2.1.0/tos/interfaces/Resource.nc">
          <short>&#10; You are now in control of the resource.</short>
          <long>&#10; You are now in control of the resource.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOwner" ref="0x409bd138" loc="118:/opt/tinyos-2.1.0/tos/interfaces/Resource.nc">
        <documentation loc="112:/opt/tinyos-2.1.0/tos/interfaces/Resource.nc">
          <short>&#10;  Check if the user of this interface is the current&#10;  owner of the Resource&#10;  </short>
          <long>&#10;  Check if the user of this interface is the current&#10;  owner of the Resource&#10;  @return TRUE  It is the owner &#60;br>&#10;             FALSE It is not the owner&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x402c9b90"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ResourceConfigure" loc="44:/opt/tinyos-2.1.0/tos/interfaces/ResourceConfigure.nc">
      <documentation loc="31:/opt/tinyos-2.1.0/tos/interfaces/ResourceConfigure.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10; &#10; This interface is provided by a Resource arbiter in order to allow&#10; users of a shared resource to configure that resource just before being&#10; granted access to it.</short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10; &#10; This interface is provided by a Resource arbiter in order to allow&#10; users of a shared resource to configure that resource just before being&#10; granted access to it.  It will always be parameterized along side &#10; a parameterized Resource interface, with the ids from one mapping directly&#10; onto the ids of the other.&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="unconfigure" ref="0x40a2cb60" loc="55:/opt/tinyos-2.1.0/tos/interfaces/ResourceConfigure.nc">
        <documentation loc="51:/opt/tinyos-2.1.0/tos/interfaces/ResourceConfigure.nc">
          <short>&#10; Used to unconfigure a resource just before releasing it.</short>
          <long>&#10; Used to unconfigure a resource just before releasing it.&#10; Must always be used in conjuntion with the Resource interface.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceConfigure"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="configure" ref="0x40a2c6a0" loc="49:/opt/tinyos-2.1.0/tos/interfaces/ResourceConfigure.nc">
        <documentation loc="45:/opt/tinyos-2.1.0/tos/interfaces/ResourceConfigure.nc">
          <short>&#10; Used to configure a resource just before being granted access to it.</short>
          <long>&#10; Used to configure a resource just before being granted access to it.&#10; Must always be used in conjuntion with the Resource interface.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceConfigure"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Atm128AdcMultiple" loc="68:/opt/tinyos-2.1.0/tos/chips/atm128/adc/Atm128AdcMultiple.nc">
      <documentation loc="33:/opt/tinyos-2.1.0/tos/chips/atm128/adc/Atm128AdcMultiple.nc">
        <short>&#10; Hardware Abstraction Layer interface of Atmega128 for acquiring data&#10; from multiple channels using the ATmega128's free-running mode.</short>
        <long>&#10; Hardware Abstraction Layer interface of Atmega128 for acquiring data&#10; from multiple channels using the ATmega128's free-running mode.&#10; &#60;p>&#10; Because of the possibility that samples may be imprecise after &#10; switching channels and/or reference voltages, and because there&#10; is a one sample delay on swithcing channels and reference voltages,&#10; Atm128ADCMultiple is complex. Two straightforward uses are:&#10; &#60;ol type=&#34;A&#34;>&#10; &#60;li>Acquire N samples from channel C:&#10;    &#60;ol>&#10;    &#60;li>call getData to start sampling on channel C at the desired rate&#10;       (note that the choice of prescalers is very limited, so you&#10;       don't have many choices for sampling rate)&#10;    &#60;li>ignore the first dataReady event&#10;    &#60;li>use the results of the next N dataReady() events, return FALSE&#10;       on the last one&#10;    &#60;/ol>&#10; &#60;li>Acquire one sample each from channels C1, ..., Cn (this pseudocode&#10;    assumes that none of these channels are differential)&#10;    &#60;ol>&#10;    &#60;li>call getData to start sampling on channel C1&#10;    &#60;li>on the ith dataReady event switch to channel Ci+1 by changing&#10;       *newChannel&#10;    &#60;li>the data passed to the ith dataReady event is for channel Ci-1&#10;       (the data from the first dataReady event is ignored)&#10;    &#60;/ol>&#10; &#60;/ol>&#10;&#10; @author Hu Siquan &#60;husq@xbow.com>&#10; @author David Gay&#10;</long>
      </documentation>
      <function command="" provided="0" name="getData" ref="0x40a1e6a8" loc="91:/opt/tinyos-2.1.0/tos/chips/atm128/adc/Atm128AdcMultiple.nc">
        <documentation loc="70:/opt/tinyos-2.1.0/tos/chips/atm128/adc/Atm128AdcMultiple.nc">
          <short>&#10; Initiates free-running ADC conversions, with the ability to switch &#10; channels and reference-voltage with a one sample delay.</short>
          <long>&#10; Initiates free-running ADC conversions, with the ability to switch &#10; channels and reference-voltage with a one sample delay.&#10;&#10; @param channel Initial A/D conversion channel. The channel can &#10;   be changed in the dataReady event, though these changes happen&#10;   with a one-sample delay (this is a hardware restriction).&#10; @param refVoltage Initial A/D reference voltage. See the&#10;   ATM128_ADC_VREF_xxx constants in Atm128ADC.h. Like the channel,&#10;   the reference voltage can be changed in the dataReady event with&#10;   a one-sample delay.&#10; @param leftJustify TRUE to place A/D result in high-order bits &#10;   (i.e., shifted left by 6 bits), low to place it in the low-order bits&#10; @param prescaler Prescaler value for the A/D conversion clock. If you &#10;  specify ATM128_ADC_PRESCALE, a prescaler will be chosen that guarantees&#10;  full precision. Other prescalers can be used to get faster conversions. &#10;  See the ATmega128 manual for details.&#10; @return TRUE if the conversion will be precise, FALSE if it will be &#10;   imprecise (due to a change in reference voltage, or switching to a&#10;   differential input channel)&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128AdcMultiple"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x402c9b90"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x402c9b90"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="channel" ref="0x40a23e70" loc="91:/opt/tinyos-2.1.0/tos/chips/atm128/adc/Atm128AdcMultiple.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </variable>
          <variable name="refVoltage" ref="0x40a1e0f0" loc="91:/opt/tinyos-2.1.0/tos/chips/atm128/adc/Atm128AdcMultiple.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </variable>
          <variable name="leftJustify" ref="0x40a1e318" loc="92:/opt/tinyos-2.1.0/tos/chips/atm128/adc/Atm128AdcMultiple.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x402c9b90"/></typename>
            </type-int>
          </variable>
          <variable name="prescaler" ref="0x40a1e538" loc="92:/opt/tinyos-2.1.0/tos/chips/atm128/adc/Atm128AdcMultiple.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="dataReady" ref="0x40a1da40" loc="110:/opt/tinyos-2.1.0/tos/chips/atm128/adc/Atm128AdcMultiple.nc">
        <documentation loc="94:/opt/tinyos-2.1.0/tos/chips/atm128/adc/Atm128AdcMultiple.nc">
          <short>&#10; Returns the next sample in a free-running conversion.</short>
          <long>&#10; Returns the next sample in a free-running conversion. Allow the user&#10; to switch channels and/or reference voltages with a one sample delay.&#10;&#10; @param data a 2 byte unsigned data value sampled by the ADC.&#10; @param precise if this conversion was precise, FALSE if it wasn't &#10;   (we assume that the second conversion after a change of reference&#10;   voltage or after switching to a differential channel is precise)&#10; @param channel Channel this sample was from.&#10; @param newChannel Change this parameter to switch to a new channel&#10;   for the second next sample.&#10; @param newRefVoltage Change this parameter to change the reference &#10;   voltage for the second next sample.&#10;&#10; @return TRUE to continue sampling, FALSE to stop.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128AdcMultiple"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x402c9b90"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x4019ad68"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x402c9b90"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
              </type-int>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
              </type-int>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x40a1d010" loc="110:/opt/tinyos-2.1.0/tos/chips/atm128/adc/Atm128AdcMultiple.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x4019ad68"/></typename>
            </type-int>
          </variable>
          <variable name="precise" ref="0x40a1d200" loc="110:/opt/tinyos-2.1.0/tos/chips/atm128/adc/Atm128AdcMultiple.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x402c9b90"/></typename>
            </type-int>
          </variable>
          <variable name="channel" ref="0x40a1d408" loc="110:/opt/tinyos-2.1.0/tos/chips/atm128/adc/Atm128AdcMultiple.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </variable>
          <variable name="newChannel" ref="0x40a1d660" loc="111:/opt/tinyos-2.1.0/tos/chips/atm128/adc/Atm128AdcMultiple.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="newRefVoltage" ref="0x40a1d8c8" loc="111:/opt/tinyos-2.1.0/tos/chips/atm128/adc/Atm128AdcMultiple.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
              </type-int>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Atm128AdcSingle" loc="43:/opt/tinyos-2.1.0/tos/chips/atm128/adc/Atm128AdcSingle.nc">
      <documentation loc="33:/opt/tinyos-2.1.0/tos/chips/atm128/adc/Atm128AdcSingle.nc">
        <short>&#10; Hardware Abstraction Layer interface of Atmega128 for acquiring&#10; a single sample from a channel.</short>
        <long>&#10; Hardware Abstraction Layer interface of Atmega128 for acquiring&#10; a single sample from a channel.&#10;&#10; @author Hu Siquan &#60;husq@xbow.com>&#10; @author David Gay&#10;</long>
      </documentation>
      <function command="" provided="0" name="getData" ref="0x40a219e8" loc="61:/opt/tinyos-2.1.0/tos/chips/atm128/adc/Atm128AdcSingle.nc">
        <documentation loc="45:/opt/tinyos-2.1.0/tos/chips/atm128/adc/Atm128AdcSingle.nc">
          <short>&#10; Initiates an ADC conversion on a given channel.</short>
          <long>&#10; Initiates an ADC conversion on a given channel.&#10;&#10; @param channel A/D conversion channel.&#10; @param refVoltage Select reference voltage for A/D conversion. See&#10;   the ATM128_ADC_VREF_xxx constants in Atm128ADC.h&#10; @param leftJustify TRUE to place A/D result in high-order bits &#10;   (i.e., shifted left by 6 bits), low to place it in the low-order bits&#10; @param prescaler Prescaler value for the A/D conversion clock. If you &#10;  specify ATM128_ADC_PRESCALE, a prescaler will be chosen that guarantees&#10;  full precision. Other prescalers can be used to get faster conversions. &#10;  See the ATmega128 manual for details.&#10; @return TRUE if the conversion will be precise, FALSE if it will be &#10;   imprecise (due to a change in refernce voltage, or switching to a&#10;   differential input channel)&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128AdcSingle"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x402c9b90"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x402c9b90"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="channel" ref="0x40a21208" loc="61:/opt/tinyos-2.1.0/tos/chips/atm128/adc/Atm128AdcSingle.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </variable>
          <variable name="refVoltage" ref="0x40a21430" loc="61:/opt/tinyos-2.1.0/tos/chips/atm128/adc/Atm128AdcSingle.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </variable>
          <variable name="leftJustify" ref="0x40a21658" loc="62:/opt/tinyos-2.1.0/tos/chips/atm128/adc/Atm128AdcSingle.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x402c9b90"/></typename>
            </type-int>
          </variable>
          <variable name="prescaler" ref="0x40a21878" loc="62:/opt/tinyos-2.1.0/tos/chips/atm128/adc/Atm128AdcSingle.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="cancel" ref="0x40a20a48" loc="82:/opt/tinyos-2.1.0/tos/chips/atm128/adc/Atm128AdcSingle.nc">
        <documentation loc="74:/opt/tinyos-2.1.0/tos/chips/atm128/adc/Atm128AdcSingle.nc">
          <short>&#10; Cancel an outstanding getData operation.</short>
          <long>&#10; Cancel an outstanding getData operation. Use with care, to&#10; avoid problems with races between the dataReady event and cancel.&#10; @return TRUE if a conversion was in-progress or an interrupt&#10;   was pending. dataReady will not be signaled. FALSE if the&#10;   conversion was already complete. dataReady will be (or has&#10;   already been) signaled.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128AdcSingle"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x402c9b90"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="dataReady" ref="0x40a204c0" loc="72:/opt/tinyos-2.1.0/tos/chips/atm128/adc/Atm128AdcSingle.nc">
        <documentation loc="64:/opt/tinyos-2.1.0/tos/chips/atm128/adc/Atm128AdcSingle.nc">
          <short>&#10; Indicates a sample has been recorded by the ADC as the result&#10; of a &#60;code>getData()&#60;/code> command.</short>
          <long>&#10; Indicates a sample has been recorded by the ADC as the result&#10; of a &#60;code>getData()&#60;/code> command.&#10;&#10; @param data a 2 byte unsigned data value sampled by the ADC.&#10; @param precise if the conversion precise, FALSE if it wasn't. This&#10;   values matches the result from the &#60;code>getData&#60;/code> call.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128AdcSingle"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x4019ad68"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x402c9b90"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x40a20170" loc="72:/opt/tinyos-2.1.0/tos/chips/atm128/adc/Atm128AdcSingle.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x4019ad68"/></typename>
            </type-int>
          </variable>
          <variable name="precise" ref="0x40a20360" loc="72:/opt/tinyos-2.1.0/tos/chips/atm128/adc/Atm128AdcSingle.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x402c9b90"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplAtm128Adc" loc="39:/opt/tinyos-2.1.0/tos/chips/atm128/adc/HplAtm128Adc.nc">
      <documentation loc="27:/opt/tinyos-2.1.0/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <short>&#10; HPL interface to the Atmega128 A/D conversion subsystem.</short>
        <long>&#10; HPL interface to the Atmega128 A/D conversion subsystem. Please see the&#10; Atmega128 manual for full details on the functioning of this subsystem.&#10; &#60;p>&#10; A word of warning: the Atmega128 SLEEP instruction initiates an A/D&#10; conversion when the ADC and ADC interrupt are enabled.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author Hu Siquan &#60;husq@xbow.com>&#10; @author David Gay&#10;</long>
      </documentation>
      <function command="" provided="0" name="setSingle" ref="0x40a357e0" loc="105:/opt/tinyos-2.1.0/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="102:/opt/tinyos-2.1.0/tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Disable continuous sampling&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getAdmux" ref="0x40a3de58" loc="44:/opt/tinyos-2.1.0/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="40:/opt/tinyos-2.1.0/tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Read the ADMUX (ADC selection) register&#10; </short>
          <long>&#10; Read the ADMUX (ADC selection) register&#10; @return Current ADMUX value&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x40313b08"/>
            <typename><typedef-ref name="Atm128Admux_t" ref="0x40313d90"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setPrescaler" ref="0x40a34c88" loc="131:/opt/tinyos-2.1.0/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="126:/opt/tinyos-2.1.0/tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Set ADC prescaler selection bits&#10; </short>
          <long>&#10; Set ADC prescaler selection bits&#10; @param scale New ADC prescaler. Must be one of the ATM128_ADC_PRESCALE_xxx&#10;   values from Atm128Adc.h&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="scale" ref="0x40a34b30" loc="131:/opt/tinyos-2.1.0/tos/chips/atm128/adc/HplAtm128Adc.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isEnabled" ref="0x40a35ca0" loc="113:/opt/tinyos-2.1.0/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="109:/opt/tinyos-2.1.0/tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Is ADC enabled?&#10; </short>
          <long>&#10; Is ADC enabled?&#10; @return TRUE if the ADC is enabled, FALSE otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x402c9b90"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableAdc" ref="0x40a38920" loc="73:/opt/tinyos-2.1.0/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="70:/opt/tinyos-2.1.0/tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Enable ADC sampling&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setAdmux" ref="0x40a39490" loc="49:/opt/tinyos-2.1.0/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="45:/opt/tinyos-2.1.0/tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Set the ADMUX (ADC selection) register&#10; </short>
          <long>&#10; Set the ADMUX (ADC selection) register&#10; @param admux New ADMUX value&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x40313b08"/>
              <typename><typedef-ref name="Atm128Admux_t" ref="0x40313d90"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="admux" ref="0x40a39338" loc="49:/opt/tinyos-2.1.0/tos/chips/atm128/adc/HplAtm128Adc.nc">
            <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x40313b08"/>
              <typename><typedef-ref name="Atm128Admux_t" ref="0x40313d90"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="enableInterruption" ref="0x40a361a8" loc="82:/opt/tinyos-2.1.0/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="79:/opt/tinyos-2.1.0/tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Enable ADC interrupt&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isComplete" ref="0x40a345e0" loc="124:/opt/tinyos-2.1.0/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="119:/opt/tinyos-2.1.0/tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Is A/D conversion complete? Note that this flag is automatically&#10; cleared when an A/D interrupt occurs.</short>
          <long>&#10; Is A/D conversion complete? Note that this flag is automatically&#10; cleared when an A/D interrupt occurs.&#10; @return TRUE if the A/D conversion is complete, FALSE otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x402c9b90"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="cancel" ref="0x40a33158" loc="141:/opt/tinyos-2.1.0/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="133:/opt/tinyos-2.1.0/tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Cancel A/D conversion and any pending A/D interrupt.</short>
          <long>&#10; Cancel A/D conversion and any pending A/D interrupt. Also disables the&#10; ADC interruption (otherwise a sample might start at the next sleep&#10; instruction). This command can assume that the A/D converter is enabled. &#10; @return TRUE if an A/D conversion was in progress or an A/D interrupt&#10;   was pending, FALSE otherwise. In single conversion mode, a return&#10;   of TRUE implies that the dataReady event will not be signaled.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x402c9b90"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableAdc" ref="0x40a38d20" loc="77:/opt/tinyos-2.1.0/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="74:/opt/tinyos-2.1.0/tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Disable ADC sampling&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="resetInterrupt" ref="0x40a36a30" loc="90:/opt/tinyos-2.1.0/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="87:/opt/tinyos-2.1.0/tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Clear the ADC interrupt flag&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableInterruption" ref="0x40a36600" loc="86:/opt/tinyos-2.1.0/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="83:/opt/tinyos-2.1.0/tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Disable ADC interrupt&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startConversion" ref="0x40a36e68" loc="97:/opt/tinyos-2.1.0/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="92:/opt/tinyos-2.1.0/tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Start ADC conversion.</short>
          <long>&#10; Start ADC conversion. If ADC interrupts are enabled, the dataReady event&#10; will be signaled once (in non-continuous mode) or repeatedly (in&#10; continuous mode).&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isStarted" ref="0x40a34138" loc="118:/opt/tinyos-2.1.0/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="114:/opt/tinyos-2.1.0/tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Is A/D conversion in progress?&#10; </short>
          <long>&#10; Is A/D conversion in progress?&#10; @return TRUE if the A/D conversion is in progress, FALSE otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x402c9b90"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setAdcsra" ref="0x40a38010" loc="60:/opt/tinyos-2.1.0/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="56:/opt/tinyos-2.1.0/tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Set the ADCSRA (ADC control) register&#10; </short>
          <long>&#10; Set the ADCSRA (ADC control) register&#10; @param adcsra New ADCSRA value&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x40319df0"/>
              <typename><typedef-ref name="Atm128Adcsra_t" ref="0x403181e8"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="adcsra" ref="0x40a39e50" loc="60:/opt/tinyos-2.1.0/tos/chips/atm128/adc/HplAtm128Adc.nc">
            <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x40319df0"/>
              <typename><typedef-ref name="Atm128Adcsra_t" ref="0x403181e8"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setContinuous" ref="0x40a353e0" loc="101:/opt/tinyos-2.1.0/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="98:/opt/tinyos-2.1.0/tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Enable continuous sampling&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getAdcsra" ref="0x40a39978" loc="55:/opt/tinyos-2.1.0/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="51:/opt/tinyos-2.1.0/tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Read the ADCSRA (ADC control) register&#10; </short>
          <long>&#10; Read the ADCSRA (ADC control) register&#10; @return Current ADCSRA value&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x40319df0"/>
            <typename><typedef-ref name="Atm128Adcsra_t" ref="0x403181e8"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getValue" ref="0x40a384c0" loc="66:/opt/tinyos-2.1.0/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="62:/opt/tinyos-2.1.0/tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Read the latest A/D conversion result&#10; </short>
          <long>&#10; Read the latest A/D conversion result&#10; @return A/D value&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x4019ad68"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="dataReady" ref="0x40a338a8" loc="147:/opt/tinyos-2.1.0/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="143:/opt/tinyos-2.1.0/tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; A/D interrupt occured&#10; </short>
          <long>&#10; A/D interrupt occured&#10; @param data Latest A/D conversion result&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x4019ad68"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x40a33750" loc="147:/opt/tinyos-2.1.0/tos/chips/atm128/adc/HplAtm128Adc.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x4019ad68"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="AsyncStdControl" loc="65:/opt/tinyos-2.1.0/tos/interfaces/AsyncStdControl.nc">
      <documentation loc="51:/opt/tinyos-2.1.0/tos/interfaces/AsyncStdControl.nc">
        <short>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the asynchronous counterpart to the StdContol interface.</short>
        <long>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the asynchronous counterpart to the StdContol interface.  It&#10; should be used for switching between the on and off power states of&#10; the component providing it.  This interface differs from the&#10; StdControl interface only in the fact that any of its commands can&#10; be called from asynchronous context.&#10;&#10; @author Joe Polastre&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="start" ref="0x40a3b010" loc="74:/opt/tinyos-2.1.0/tos/interfaces/AsyncStdControl.nc">
        <documentation loc="67:/opt/tinyos-2.1.0/tos/interfaces/AsyncStdControl.nc">
          <short>&#10; Start this component and all of its subcomponents.</short>
          <long>&#10; Start this component and all of its subcomponents.&#10;&#10; @return SUCCESS if the component was either already on or was &#10;         successfully turned on&#60;br>&#10;         FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="AsyncStdControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x402d2bd0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x40a3b4f8" loc="84:/opt/tinyos-2.1.0/tos/interfaces/AsyncStdControl.nc">
        <documentation loc="76:/opt/tinyos-2.1.0/tos/interfaces/AsyncStdControl.nc">
          <short>&#10; Stop the component and any pertinent subcomponents (not all&#10; subcomponents may be turned off due to wakeup timers, etc.).</short>
          <long>&#10; Stop the component and any pertinent subcomponents (not all&#10; subcomponents may be turned off due to wakeup timers, etc.).&#10;&#10; @return SUCCESS if the component was either already off or was &#10;         successfully turned off&#60;br>&#10;         FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="AsyncStdControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x402d2bd0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ResourceRequested" loc="36:/opt/tinyos-2.1.0/tos/interfaces/ResourceRequested.nc">
      <documentation loc="23:/opt/tinyos-2.1.0/tos/interfaces/ResourceRequested.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The ResourceRequested interface can be used in conjunction with the &#10; Resource interface in order to receive events based on other users&#10; requests.</short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The ResourceRequested interface can be used in conjunction with the &#10; Resource interface in order to receive events based on other users&#10; requests.&#10; &#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10; @version $Revision: 1.4 $&#10; @date $Date: 2006/12/12 18:23:15 $&#10;</long>
      </documentation>
      <function event="" provided="0" name="requested" ref="0x40a819a8" loc="43:/opt/tinyos-2.1.0/tos/interfaces/ResourceRequested.nc">
        <documentation loc="37:/opt/tinyos-2.1.0/tos/interfaces/ResourceRequested.nc">
          <short>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.request() command.</short>
          <long>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.request() command. You may want to&#10; consider releasing a resource based on this event&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceRequested"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="immediateRequested" ref="0x40a7e010" loc="51:/opt/tinyos-2.1.0/tos/interfaces/ResourceRequested.nc">
        <documentation loc="45:/opt/tinyos-2.1.0/tos/interfaces/ResourceRequested.nc">
          <short>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.immediateRequest() command.</short>
          <long>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.immediateRequest() command. You may&#10; want to consider releasing a resource based on this event&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceRequested"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ResourceDefaultOwner" loc="40:/opt/tinyos-2.1.0/tos/interfaces/ResourceDefaultOwner.nc">
      <documentation loc="31:/opt/tinyos-2.1.0/tos/interfaces/ResourceDefaultOwner.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; </short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; @author Kevin Klues (klues@tkn.tu-berlin.edu)&#10; @version $ $&#10; @date $Date: 2007/02/04 20:06:42 $ &#10;</long>
      </documentation>
      <function command="" provided="0" name="release" ref="0x40a7d6d8" loc="56:/opt/tinyos-2.1.0/tos/interfaces/ResourceDefaultOwner.nc">
        <documentation loc="48:/opt/tinyos-2.1.0/tos/interfaces/ResourceDefaultOwner.nc">
          <short>&#10; Release control of the resource&#10;&#10; </short>
          <long>&#10; Release control of the resource&#10;&#10; @return SUCCESS The resource has been released and pending requests&#10;                 can resume. &#60;br>&#10;             FAIL You tried to release but you are not the&#10;                  owner of the resource&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x402d2bd0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="requested" ref="0x40a7b0f8" loc="73:/opt/tinyos-2.1.0/tos/interfaces/ResourceDefaultOwner.nc">
        <documentation loc="67:/opt/tinyos-2.1.0/tos/interfaces/ResourceDefaultOwner.nc">
          <short>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.request() command.</short>
          <long>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.request() command. You may want to&#10; consider releasing a resource based on this event&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="granted" ref="0x40a7d1a8" loc="46:/opt/tinyos-2.1.0/tos/interfaces/ResourceDefaultOwner.nc">
        <documentation loc="41:/opt/tinyos-2.1.0/tos/interfaces/ResourceDefaultOwner.nc">
          <short>&#10; Event sent to the resource controller giving it control whenever a resource&#10; goes idle.</short>
          <long>&#10; Event sent to the resource controller giving it control whenever a resource&#10; goes idle. That is to say, whenever no one currently owns the resource,&#10; and there are no more pending requests&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOwner" ref="0x40a7dbe8" loc="65:/opt/tinyos-2.1.0/tos/interfaces/ResourceDefaultOwner.nc">
        <documentation loc="58:/opt/tinyos-2.1.0/tos/interfaces/ResourceDefaultOwner.nc">
          <short>&#10;  Check if the user of this interface is the current&#10;  owner of the Resource&#10; &#10;  </short>
          <long>&#10;  Check if the user of this interface is the current&#10;  owner of the Resource&#10; &#10;  @return TRUE  It is the owner &#60;br>&#10;          FALSE It is not the owner&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x402c9b90"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="immediateRequested" ref="0x40a7b6d0" loc="81:/opt/tinyos-2.1.0/tos/interfaces/ResourceDefaultOwner.nc">
        <documentation loc="75:/opt/tinyos-2.1.0/tos/interfaces/ResourceDefaultOwner.nc">
          <short>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.immediateRequest() command.</short>
          <long>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.immediateRequest() command. You may&#10; want to consider releasing a resource based on this event&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ArbiterInfo" loc="72:/opt/tinyos-2.1.0/tos/interfaces/ArbiterInfo.nc">
      <documentation loc="59:/opt/tinyos-2.1.0/tos/interfaces/ArbiterInfo.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The ArbiterInfo interface allows a component to query the current &#10; status of an arbiter.</short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The ArbiterInfo interface allows a component to query the current &#10; status of an arbiter.  It must be provided by ALL arbiter implementations,&#10; and can be used for a variety of different purposes.  Normally it will be&#10; used in conjunction with the Resource interface for performing run time&#10; checks on access rights to a particular shared resource.&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="inUse" ref="0x40a80990" loc="80:/opt/tinyos-2.1.0/tos/interfaces/ArbiterInfo.nc">
        <documentation loc="73:/opt/tinyos-2.1.0/tos/interfaces/ArbiterInfo.nc">
          <short>&#10; Check whether a resource is currently allocated.</short>
          <long>&#10; Check whether a resource is currently allocated.&#10;&#10; @return TRUE If the resource being arbitrated is currently allocated&#10;              to any of its users&#60;br>&#10;         FALSE Otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ArbiterInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x402c9b90"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="userId" ref="0x40a80e90" loc="88:/opt/tinyos-2.1.0/tos/interfaces/ArbiterInfo.nc">
        <documentation loc="82:/opt/tinyos-2.1.0/tos/interfaces/ArbiterInfo.nc">
          <short>&#10; Get the id of the client currently using a resource.</short>
          <long>&#10; Get the id of the client currently using a resource.&#10; &#10; @return Id of the current owner of the resource&#60;br>&#10;         0xFF if no one currently owns the resource&#10;</long>
        </documentation>
        <interfacedef-ref qname="ArbiterInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x4019a708"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ResourceQueue" loc="35:/opt/tinyos-2.1.0/tos/interfaces/ResourceQueue.nc">
      <documentation loc="23:/opt/tinyos-2.1.0/tos/interfaces/ResourceQueue.nc">
        <short>&#10;  A queue interface for managing client ids when performing resource &#10;  arbitration.</short>
        <long>&#10;  A queue interface for managing client ids when performing resource &#10;  arbitration. A single slot in the queue is guaranteed to each resource&#10;  client, with the actual queing policy determined by the implementation&#10;  of the interface.&#10;&#10;  @author Kevin Klues &#60;klueska@cs.wustl.edu>&#10;  @date   $Date: 2006/12/12 18:23:15 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="enqueue" ref="0x40a99e00" loc="69:/opt/tinyos-2.1.0/tos/interfaces/ResourceQueue.nc">
        <documentation loc="62:/opt/tinyos-2.1.0/tos/interfaces/ResourceQueue.nc">
          <short>&#10; Enqueue a cleint id&#10;&#10; </short>
          <long>&#10; Enqueue a cleint id&#10;&#10; @param cleintId - the cleint id to enqueue&#10; @return SUCCESS if the client id was enqueued successfully &#60;br>&#10;         EBUSY   if it has already been enqueued.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x402d2bd0"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="resource_client_id_t" ref="0x40a7f760"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="id" ref="0x40a99ca8" loc="69:/opt/tinyos-2.1.0/tos/interfaces/ResourceQueue.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="resource_client_id_t" ref="0x40a7f760"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isEmpty" ref="0x40a77a90" loc="43:/opt/tinyos-2.1.0/tos/interfaces/ResourceQueue.nc">
        <documentation loc="37:/opt/tinyos-2.1.0/tos/interfaces/ResourceQueue.nc">
          <short>&#10; Check to see if the queue is empty.</short>
          <long>&#10; Check to see if the queue is empty.&#10;&#10; @return TRUE  if the queue is empty. &#60;br>&#10;         FALSE if there is at least one entry in the queue&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x402c9b90"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isEnqueued" ref="0x40a99168" loc="52:/opt/tinyos-2.1.0/tos/interfaces/ResourceQueue.nc">
        <documentation loc="45:/opt/tinyos-2.1.0/tos/interfaces/ResourceQueue.nc">
          <short>&#10; Check to see if a given cleint id has already been enqueued&#10; and is waiting to be processed.</short>
          <long>&#10; Check to see if a given cleint id has already been enqueued&#10; and is waiting to be processed.&#10;&#10; @return TRUE  if the client id is in the queue. &#60;br>&#10;         FALSE if it does not&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x402c9b90"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="resource_client_id_t" ref="0x40a7f760"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="id" ref="0x40a99010" loc="52:/opt/tinyos-2.1.0/tos/interfaces/ResourceQueue.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="resource_client_id_t" ref="0x40a7f760"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="dequeue" ref="0x40a99718" loc="60:/opt/tinyos-2.1.0/tos/interfaces/ResourceQueue.nc">
        <documentation loc="54:/opt/tinyos-2.1.0/tos/interfaces/ResourceQueue.nc">
          <short>&#10; Retreive the cleint id of the next resource in the queue.</short>
          <long>&#10; Retreive the cleint id of the next resource in the queue. &#10; If the queue is empty, the return value is undefined.&#10;&#10; @return The cleint id at the head of the queue.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="resource_client_id_t" ref="0x40a7f760"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="PowerDownCleanup" loc="45:/opt/tinyos-2.1.0/tos/lib/power/PowerDownCleanup.nc">
      <documentation loc="31:/opt/tinyos-2.1.0/tos/lib/power/PowerDownCleanup.nc">
        <short>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This interface exists to allow a Resource user to cleanup any state&#10; information before a shared Resource is shutdown.</short>
        <long>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This interface exists to allow a Resource user to cleanup any state&#10; information before a shared Resource is shutdown.  It should be provided&#10; by the user of a shared Resource, and used by the&#10; power managment component for that Resource.  The &#60;code>cleanup()&#60;/code>&#10; command will be called by the power manager just before powering down&#10; the shared resource.&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="cleanup" ref="0x40acd4d8" loc="52:/opt/tinyos-2.1.0/tos/lib/power/PowerDownCleanup.nc">
        <documentation loc="46:/opt/tinyos-2.1.0/tos/lib/power/PowerDownCleanup.nc">
          <short>&#10; This command will be called by the power management component of&#10; a shared Resource.</short>
          <long>&#10; This command will be called by the power management component of&#10; a shared Resource.  The implementation of this command defines&#10; what must be done just before that shared Resource is shut off.&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="PowerDownCleanup"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="LocalTime" loc="42:/opt/tinyos-2.1.0/tos/lib/timer/LocalTime.nc">
      <documentation loc="25:/opt/tinyos-2.1.0/tos/lib/timer/LocalTime.nc">
        <short>&#10; A LocalTime interface counts time in some units.</short>
        <long>&#10; A LocalTime interface counts time in some units. If you need to detect&#10; time overflow, you should use a component offering the Counter&#10; interface.&#10;&#10; &#60;p>The LocalTime interface is parameterised by its &#34;precision&#34;&#10; (milliseconds, microseconds, etc), identified by a type. This prevents,&#10; e.g., unintentionally mixing components expecting milliseconds with&#10; those expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Counter.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x40b118d8" loc="42:/opt/tinyos-2.1.0/tos/lib/timer/LocalTime.nc">
          <interfacedef-ref qname="LocalTime"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x40b118d8"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="get" ref="0x40b11db8" loc="50:/opt/tinyos-2.1.0/tos/lib/timer/LocalTime.nc">
        <documentation loc="44:/opt/tinyos-2.1.0/tos/lib/timer/LocalTime.nc">
          <short> &#10; Return current time.</short>
          <long> &#10; Return current time. Time starts counting at boot - some time sources&#10; may stop counting while the processor is in low-power mode.&#10;&#10; @return Current time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="LocalTime"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x4019b400"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Alarm" loc="45:/opt/tinyos-2.1.0/tos/lib/timer/Alarm.nc">
      <documentation loc="25:/opt/tinyos-2.1.0/tos/lib/timer/Alarm.nc">
        <short>&#10; An Alarm is a low-level interface intended for precise timing.</short>
        <long>&#10; An Alarm is a low-level interface intended for precise timing.&#10;&#10; &#60;p>An Alarm is parameterised by its &#34;precision&#34; (milliseconds,&#10; microseconds, etc), identified by a type. This prevents, e.g.,&#10; unintentionally mixing components expecting milliseconds with those&#10; expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>An Alarm's second parameter is its &#34;width&#34;, i.e., the number of&#10; bits used to represent time values. Width is indicated by including&#10; the appropriate size integer type as an Alarm parameter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Alarm.&#10; @param size_type An integer type representing time values for this Alarm.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x40b313b8" loc="45:/opt/tinyos-2.1.0/tos/lib/timer/Alarm.nc">
          <interfacedef-ref qname="Alarm"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x40b313b8"/></type-var>
        </typedef>
        <typedef name="size_type" ref="0x40b31520" loc="45:/opt/tinyos-2.1.0/tos/lib/timer/Alarm.nc">
          <interfacedef-ref qname="Alarm"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x40b31520"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="getNow" ref="0x40b2f810" loc="98:/opt/tinyos-2.1.0/tos/lib/timer/Alarm.nc">
        <documentation loc="94:/opt/tinyos-2.1.0/tos/lib/timer/Alarm.nc">
          <short>&#10; Return the current time.</short>
          <long>&#10; Return the current time.&#10; @return Current time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x40b31520"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="fired" ref="0x40b304d0" loc="67:/opt/tinyos-2.1.0/tos/lib/timer/Alarm.nc">
        <documentation loc="64:/opt/tinyos-2.1.0/tos/lib/timer/Alarm.nc">
          <short>&#10; Signaled when the alarm expires.</short>
          <long>&#10; Signaled when the alarm expires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startAt" ref="0x40b2f1c8" loc="92:/opt/tinyos-2.1.0/tos/lib/timer/Alarm.nc">
        <documentation loc="79:/opt/tinyos-2.1.0/tos/lib/timer/Alarm.nc">
          <short>&#10; Set a single-short alarm to time t0+dt.</short>
          <long>&#10; Set a single-short alarm to time t0+dt. Replaces any current alarm&#10; time. The &#60;code>fired&#60;/code> will be signaled when the alarm expires.&#10; Alarms set in the past will fire &#34;soon&#34;.&#10; &#10; &#60;p>Because the current time may wrap around, it is possible to use&#10; values of t0 greater than the &#60;code>getNow&#60;/code>'s result. These&#10; values represent times in the past, i.e., the time at which getNow()&#10; would last of returned that value.&#10;&#10; @param t0 Base time for alarm.&#10; @param dt Alarm time as offset from t0.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x40b31520"/></type-var>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x40b31520"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t0" ref="0x40b30e48" loc="92:/opt/tinyos-2.1.0/tos/lib/timer/Alarm.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x40b31520"/></type-var>
          </variable>
          <variable name="dt" ref="0x40b2f068" loc="92:/opt/tinyos-2.1.0/tos/lib/timer/Alarm.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x40b31520"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isRunning" ref="0x40b30940" loc="77:/opt/tinyos-2.1.0/tos/lib/timer/Alarm.nc">
        <documentation loc="70:/opt/tinyos-2.1.0/tos/lib/timer/Alarm.nc">
          <short>&#10; Check if alarm is running.</short>
          <long>&#10; Check if alarm is running. Note that a FALSE return does not indicate&#10; that the &#60;code>fired&#60;/code> event will not be signaled (it may have&#10; already started executing, but not reached your code yet).&#10;&#10; @return TRUE if the alarm is still running.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x402c9b90"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getAlarm" ref="0x40b2fca0" loc="105:/opt/tinyos-2.1.0/tos/lib/timer/Alarm.nc">
        <documentation loc="100:/opt/tinyos-2.1.0/tos/lib/timer/Alarm.nc">
          <short>&#10; Return the time the currently running alarm will fire or the time that&#10; the previously running alarm was set to fire.</short>
          <long>&#10; Return the time the currently running alarm will fire or the time that&#10; the previously running alarm was set to fire.&#10; @return Alarm time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x40b31520"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="start" ref="0x40b31b50" loc="55:/opt/tinyos-2.1.0/tos/lib/timer/Alarm.nc">
        <documentation loc="48:/opt/tinyos-2.1.0/tos/lib/timer/Alarm.nc">
          <short>&#10; Set a single-short alarm to some time units in the future.</short>
          <long>&#10; Set a single-short alarm to some time units in the future. Replaces&#10; any current alarm time. Equivalent to start(getNow(), dt). The&#10; &#60;code>fired&#60;/code> will be signaled when the alarm expires.&#10;&#10; @param dt Time until the alarm fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x40b31520"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dt" ref="0x40b319f8" loc="55:/opt/tinyos-2.1.0/tos/lib/timer/Alarm.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x40b31520"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x40b30070" loc="62:/opt/tinyos-2.1.0/tos/lib/timer/Alarm.nc">
        <documentation loc="57:/opt/tinyos-2.1.0/tos/lib/timer/Alarm.nc">
          <short>&#10; Cancel an alarm.</short>
          <long>&#10; Cancel an alarm. Note that the &#60;code>fired&#60;/code> event may have&#10; already been signaled (even if your code has not yet started&#10; executing).&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplAtm128TimerCtrl8" loc="33:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128TimerCtrl8.nc">
      <documentation loc="25:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128TimerCtrl8.nc">
        <short>&#10; HPL Interface to Atmega128 8-bit timer control registers&#10;&#10; </short>
        <long>&#10; HPL Interface to Atmega128 8-bit timer control registers&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <function command="" provided="0" name="getControl" ref="0x40b400c8" loc="36:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128TimerCtrl8.nc">
        <documentation loc="35:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128TimerCtrl8.nc">
          <short>Timer control register: Direct access</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:1" alignment="I:1"><union-ref ref="0x40321c78"/>
            <typename><typedef-ref name="Atm128TimerControl_t" ref="0x40321ea0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getInterruptFlag" ref="0x40b3e670" loc="44:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128TimerCtrl8.nc">
        <documentation loc="43:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128TimerCtrl8.nc">
          <short>Interrupt flag register: Direct access</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:1" alignment="I:1"><union-ref ref="0x40323cd0"/>
            <typename><typedef-ref name="Atm128_TIFR_t" ref="0x40323ef8"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getInterruptMask" ref="0x40b40ba0" loc="40:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128TimerCtrl8.nc">
        <documentation loc="39:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128TimerCtrl8.nc">
          <short>Interrupt mask register: Direct access</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:1" alignment="I:1"><union-ref ref="0x40325590"/>
            <typename><typedef-ref name="Atm128_TIMSK_t" ref="0x403257b8"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setInterruptMask" ref="0x40b3e1c0" loc="41:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128TimerCtrl8.nc">
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:1" alignment="I:1"><union-ref ref="0x40325590"/>
              <typename><typedef-ref name="Atm128_TIMSK_t" ref="0x403257b8"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="mask" ref="0x40b3e068" loc="41:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128TimerCtrl8.nc">
            <type-tag size="I:1" alignment="I:1"><union-ref ref="0x40325590"/>
              <typename><typedef-ref name="Atm128_TIMSK_t" ref="0x403257b8"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setInterruptFlag" ref="0x40b3ec78" loc="45:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128TimerCtrl8.nc">
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:1" alignment="I:1"><union-ref ref="0x40323cd0"/>
              <typename><typedef-ref name="Atm128_TIFR_t" ref="0x40323ef8"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="flags" ref="0x40b3eb20" loc="45:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128TimerCtrl8.nc">
            <type-tag size="I:1" alignment="I:1"><union-ref ref="0x40323cd0"/>
              <typename><typedef-ref name="Atm128_TIFR_t" ref="0x40323ef8"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setControl" ref="0x40b406e8" loc="37:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128TimerCtrl8.nc">
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:1" alignment="I:1"><union-ref ref="0x40321c78"/>
              <typename><typedef-ref name="Atm128TimerControl_t" ref="0x40321ea0"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="control" ref="0x40b40590" loc="37:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128TimerCtrl8.nc">
            <type-tag size="I:1" alignment="I:1"><union-ref ref="0x40321c78"/>
              <typename><typedef-ref name="Atm128TimerControl_t" ref="0x40321ea0"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplAtm128TimerAsync" loc="15:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128TimerAsync.nc">
      <documentation loc="11:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128TimerAsync.nc">
        <short>&#10;&#10; </short>
        <long>&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <function command="" provided="0" name="controlBusy" ref="0x40b397f0" loc="38:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128TimerAsync.nc">
        <documentation loc="34:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128TimerAsync.nc">
          <short>&#10; Check if control register TCCR0 is busy (should not be updated if true)&#10; </short>
          <long>&#10; Check if control register TCCR0 is busy (should not be updated if true)&#10; @return TRUE if TCCR0 is busy, FALSE otherwise (can be updated)&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerAsync"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="compareBusy" ref="0x40b39cc0" loc="44:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128TimerAsync.nc">
        <documentation loc="40:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128TimerAsync.nc">
          <short>&#10; Check if compare register OCR0 is busy (should not be updated if true)&#10; </short>
          <long>&#10; Check if compare register OCR0 is busy (should not be updated if true)&#10; @return TRUE if OCR0 is busy, FALSE otherwise (can be updated)&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerAsync"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setTimer0Asynchronous" ref="0x40b393d8" loc="32:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128TimerAsync.nc">
        <documentation loc="29:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128TimerAsync.nc">
          <short>&#10; Turn on timer 0 asynchronous mode&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerAsync"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="countBusy" ref="0x40b381a8" loc="50:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128TimerAsync.nc">
        <documentation loc="46:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128TimerAsync.nc">
          <short>&#10; Check if current timer value (TCNT0) is busy (should not be updated if true)&#10; </short>
          <long>&#10; Check if current timer value (TCNT0) is busy (should not be updated if true)&#10; @return TRUE if TCNT0 is busy, FALSE otherwise (can be updated)&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerAsync"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getAssr" ref="0x40b3d8e0" loc="21:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128TimerAsync.nc">
        <documentation loc="17:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128TimerAsync.nc">
          <short>&#10; Read timer0 asynchronous status register (ASSR)&#10; </short>
          <long>&#10; Read timer0 asynchronous status register (ASSR)&#10; @return Current value of ASSR&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerAsync"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:1" alignment="I:1"><union-ref ref="0x4031fe08"/>
            <typename><typedef-ref name="Atm128Assr_t" ref="0x4031e048"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setAssr" ref="0x40b3ded0" loc="27:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128TimerAsync.nc">
        <documentation loc="23:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128TimerAsync.nc">
          <short>&#10; Set timer0 asynchronous status register (ASSR)&#10; </short>
          <long>&#10; Set timer0 asynchronous status register (ASSR)&#10; @param x New value for ASSR&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerAsync"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:1" alignment="I:1"><union-ref ref="0x4031fe08"/>
              <typename><typedef-ref name="Atm128Assr_t" ref="0x4031e048"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="x" ref="0x40b3dd78" loc="27:/opt/tinyos-2.1.0/tos/chips/atm128/timer/HplAtm128TimerAsync.nc">
            <type-tag size="I:1" alignment="I:1"><union-ref ref="0x4031fe08"/>
              <typename><typedef-ref name="Atm128Assr_t" ref="0x4031e048"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
    </interfacedef>
  </interfacedefs>
  <tags>
  </tags>
  <variables>
  </variables>
  <constants>
  </constants>
  <functions>
  </functions>
  <typedefs>
  </typedefs>
</nesc>
